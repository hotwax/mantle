<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="get" noun="ProductPrice" authenticate="anonymous-view">
        <description>Use the ProductPrice entity to determine the price to charge or pay for a Product.</description>
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="quantity" type="BigDecimal" default="1"/>

            <parameter name="priceUomId" default-value="USD"/>
            <parameter name="pricePurposeEnumId" default-value="PppPurchase"/>

            <parameter name="productStoreId"/>
            <parameter name="vendorPartyId"/>
            <parameter name="customerPartyId"/>

            <!-- TODO: to support look for records with this first and then with null: <parameter name="agreementId"/> -->
            <!-- TODO: to support look for records with this first and then with null: <parameter name="agreementItemSeqId"/> -->
        </in-parameters>
        <out-parameters>
            <parameter name="price" type="BigDecimal"/>
            <parameter name="listPrice" type="BigDecimal"/>
            <parameter name="priceUomId"/>
        </out-parameters>
        <actions>
            <!-- get PptCurrent price -->
            <!-- try most constrained, back off from there -->
            <if condition="productStoreId &amp;&amp; vendorPartyId &amp;&amp; customerPartyId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptCurrent', productStoreId:productStoreId, vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>
            </if>
            <!-- try just vendor and customer -->
            <if condition="!productPrice &amp;&amp; vendorPartyId &amp;&amp; customerPartyId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptCurrent', vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>
            </if>
            <!-- try just customer and store -->
            <if condition="!productPrice &amp;&amp; productStoreId &amp;&amp; customerPartyId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptCurrent', productStoreId:productStoreId, customerPartyId:customerPartyId]"/>
            </if>
            <!-- try just store -->
            <if condition="!productPrice &amp;&amp; productStoreId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptCurrent', productStoreId:productStoreId]"/>
            </if>
            <!-- try just vendor -->
            <if condition="!productPrice &amp;&amp; vendorPartyId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptCurrent', vendorPartyId:vendorPartyId]"/>
            </if>
            <set field="price" from="productPrice?.price"/>

            <!-- get PptList price -->
            <set field="productPrice" from="null"/>
            <!-- try most constrained, back off from there -->
            <if condition="productStoreId &amp;&amp; vendorPartyId &amp;&amp; customerPartyId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptList', productStoreId:productStoreId, vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>
            </if>
            <!-- try just vendor and customer -->
            <if condition="!productPrice &amp;&amp; vendorPartyId &amp;&amp; customerPartyId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptList', vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>
            </if>
            <!-- try just customer and store -->
            <if condition="!productPrice &amp;&amp; productStoreId &amp;&amp; customerPartyId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptList', productStoreId:productStoreId, customerPartyId:customerPartyId]"/>
            </if>
            <!-- try just store -->
            <if condition="!productPrice &amp;&amp; productStoreId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptList', productStoreId:productStoreId]"/>
            </if>
            <!-- try just vendor -->
            <if condition="!productPrice &amp;&amp; vendorPartyId">
                <service-call name="mantle.product.PriceServices.find#ProductPriceRecord" out-map="context"
                        in-map="[productId:productId, priceUomId:priceUomId, pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId, quantity:quantity,
                            priceTypeEnumId:'PptList', vendorPartyId:vendorPartyId]"/>
            </if>
            <set field="listPrice" from="productPrice?.price"/>

            <set field="price" from="price ?: listPrice ?: 0"/>

            <!-- <log level="warn" message="========== BEFORE rules productId=${productId}, price=${price}, listPrice=${listPrice}"/> -->

            <!-- run the ProductPriceKS knowledge session rules -->
            <if condition="ec.factory.getToolFactory('KIE')"><then>
                <script>ec.getTool("KIE", null).getStatelessKieSession("ProductPriceKS").execute([])</script>
            </then><else>
                <log message="KIE not found, not running price rules, using price lookup only"/>
            </else></if>

            <!-- <log level="warn" message="========== AFTER rules productId=${productId}, price=${price}, listPrice=${listPrice}"/> -->
        </actions>
    </service>

    <service verb="find" noun="ProductPriceRecord">
        <description>This is an internal service called by get#ProductPrice.</description>
        <in-parameters>
            <parameter name="productId" required="true"/><parameter name="priceUomId" required="true"/>
            <parameter name="pricePurposeEnumId" required="true"/><parameter name="priceTypeEnumId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
            <parameter name="productStoreId"/>
            <parameter name="vendorPartyId"/><parameter name="customerPartyId"/>
        </in-parameters>
        <out-parameters><parameter name="productPrice" type="EntityValue"/></out-parameters>
        <actions>
            <!-- <log level="warn" message="finding price record with context: ${context}"/> -->

            <entity-find entity-name="mantle.product.ProductPrice" list="productPriceList" cache="true">
                <econdition-object field="[productId:productId, priceUomId:priceUomId,
                        pricePurposeEnumId:pricePurposeEnumId, priceTypeEnumId:priceTypeEnumId]"/>
                <econdition field-name="minQuantity" operator="less-equals" from="quantity"/>

                <econdition field-name="productStoreId" ignore-if-empty="true"/>
                <econdition field-name="vendorPartyId" ignore-if-empty="true"/>
                <econdition field-name="customerPartyId" ignore-if-empty="true"/>

                <order-by field-name="-fromDate"/><!-- get most recent price records first -->
                <order-by field-name="-minQuantity"/><!-- get highest qualifying (<=quantity) minQuantity records first -->
            </entity-find>
            <!-- <log level="warn" message="CALC productPriceList: ${productPriceList}"/> -->

            <filter-map-list list="productPriceList"><date-filter/></filter-map-list>
            <set field="productPrice" from="productPriceList?.first"/>
        </actions>
    </service>
</services>
