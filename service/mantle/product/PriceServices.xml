<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="get" noun="ProductPrice" authenticate="anonymous-view">
        <description>Use the ProductPrice entity to determine the price to charge or pay for a Product.</description>
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="quantity" type="BigDecimal" default="1"/>
            <parameter name="priceUomId" default-value="USD"/>
            <parameter name="pricePurposeEnumId" default-value="PppPurchase"/>

            <parameter name="productStoreId"/><parameter name="vendorPartyId"/><parameter name="customerPartyId"/>

            <!-- TODO: to support look for records with this first and then with null: <parameter name="agreementId"/> -->
            <!-- TODO: to support look for records with this first and then with null: <parameter name="agreementItemSeqId"/> -->
        </in-parameters>
        <out-parameters>
            <parameter name="price" type="BigDecimal"/>
            <parameter name="listPrice" type="BigDecimal"/>
            <parameter name="priceUomId"/>
        </out-parameters>
        <actions>
            <!-- get PptCurrent price -->
            <entity-find entity-name="mantle.product.ProductPrice" list="currentPriceListAll" cache="true">
                <date-filter/><econdition field-name="priceTypeEnumId" value="PptCurrent"/>
                <econdition field-name="productId"/><econdition field-name="priceUomId"/>
                <econdition field-name="pricePurposeEnumId" or-null="true"/>
                <!-- get most recent price records first, get highest qualifying (<=quantity) minQuantity records first -->
                <order-by field-name="-fromDate,-minQuantity"/>
            </entity-find>
            <!-- filter by minQuantity after to maximize cache hits, simplify clearing -->
            <set field="currentPriceList" from="currentPriceListAll.findAll({ Map it -&gt; ((BigDecimal) it.minQuantity) &lt;= ((BigDecimal) quantity) })"/>
            <!-- use the maximal match, priority customer, vendor, then store (each if applicable/specified) -->
            <set field="productPrice" from="findMaximalMatch(currentPriceList,
                    [customerPartyId:customerPartyId, vendorPartyId:vendorPartyId, productStoreId:productStoreId])"/>
            <set field="price" from="productPrice?.price"/>

            <!-- get PptList price -->
            <entity-find entity-name="mantle.product.ProductPrice" list="listPriceListAll" cache="true">
                <date-filter/><econdition field-name="priceTypeEnumId" value="PptList"/>
                <econdition field-name="productId"/><econdition field-name="priceUomId"/>
                <econdition field-name="pricePurposeEnumId" or-null="true"/>
                <!-- get most recent price records first, get highest qualifying (<=quantity) minQuantity records first -->
                <order-by field-name="-fromDate,-minQuantity"/>
            </entity-find>
            <!-- filter by minQuantity after to maximize cache hits, simplify clearing -->
            <set field="listPriceList" from="listPriceListAll.findAll({ Map it -&gt; ((BigDecimal) it.minQuantity) &lt;= ((BigDecimal) quantity) })"/>
            <!-- use the maximal match, priority customer, vendor, then store (each if applicable/specified) -->
            <set field="listProductPrice" from="findMaximalMatch(listPriceList,
                    [customerPartyId:customerPartyId, vendorPartyId:vendorPartyId, productStoreId:productStoreId])"/>
            <set field="listPrice" from="listProductPrice?.price"/>

            <if condition="!price"><set field="price" from="listPrice ?: BigDecimal.ZERO"/></if>

            <!-- <log level="warn" message="========== BEFORE rules productId=${productId}, price=${price}, listPrice=${listPrice}"/> -->

            <!-- run the ProductPriceKS knowledge session rules -->
            <if condition="ec.factory.getToolFactory('KIE')"><then>
                <script>ec.getTool("KIE", null).getStatelessKieSession("ProductPriceKS").execute([])</script>
            </then><else>
                <log message="KIE not found, not running price rules, using price lookup only"/>
            </else></if>

            <!-- <log level="warn" message="========== AFTER rules productId=${productId}, price=${price}, listPrice=${listPrice}"/> -->
        </actions>
    </service>
    <service verb="get" noun="OrderProductPrice">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="quantity" type="BigDecimal" default="1"/>
            <parameter name="priceUomId" default-value="USD"/>
            <parameter name="pricePurposeEnumId" default-value="PppPurchase"/>

            <parameter name="productStoreId"/><parameter name="vendorPartyId"/><parameter name="customerPartyId"/>
            <parameter name="orderId"/><parameter name="orderPartSeqId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="price" type="BigDecimal"/>
            <parameter name="listPrice" type="BigDecimal"/>
            <parameter name="priceUomId"/>
        </out-parameters>
        <actions>
            <if condition="orderId">
                <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader">
                    <field-map field-name="orderId"/></entity-find-one>
                <set field="productStoreId" from="productStoreId ?: orderHeader?.productStoreId"/>
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                    <field-map field-name="productStoreId"/></entity-find-one>
                <set field="priceUomId" from="(priceUomId ?: orderHeader?.currencyUomId) ?: productStore?.defaultCurrencyUomId"/>

                <if condition="orderPartSeqId">
                    <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
                    <set field="vendorPartyId" from="(vendorPartyId ?: orderPart?.vendorPartyId) ?: productStore?.organizationPartyId"/>
                    <set field="customerPartyId" from="(customerPartyId ?: orderPart?.customerPartyId) ?: ec.user.userAccount?.partyId"/>
                </if>
                <set field="vendorPartyId" from="orderPart?.vendorPartyId ?: productStore?.organizationPartyId"/>
            </if>

            <service-call name="mantle.product.PriceServices.get#ProductPrice" in-map="context" out-map="context"/>
        </actions>
    </service>
</services>
