<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="match" noun="PaymentMethodTransUnmatched">
        <in-parameters>
            <parameter name="paymentMethodId" required="true"/>
            <parameter name="lookBackDays" type="Integer" default="7"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/>

            <entity-find entity-name="mantle.account.method.PaymentMethodTrans" list="bankAccountTransList">
                <econdition field-name="paymentMethodId"/>
                <econditions combine="or">
                    <econdition field-name="paymentId" from="null"/>
                    <econdition field-name="acctgTransId" from="null"/>
                </econditions>
            </entity-find>

            <set field="ignoreTypeSet" from="new HashSet(['INT', 'DIV', 'FEE', 'SRVCHG'])"/>

            <iterate list="bankAccountTransList" entry="bankAccountTrans">
                <if condition="!bankAccountTrans.transAmount || !bankAccountTrans.postedDate"><continue/></if>
                <set field="payment" from="null"/>
                <set field="acctgTransAndEntry" from="null"/>

                <script>
                    Calendar lookBackCal = ec.user.nowCalendar
                    lookBackCal.setTimeInMillis(bankAccountTrans.postedDate.time)
                    lookBackCal.add(Calendar.DAY_OF_YEAR, -lookBackDays)
                    lookBackTs = new java.sql.Timestamp(lookBackCal.getTimeInMillis())
                </script>


                <!-- find matching Payment, ignore certain transType values for payments -->
                <if condition="!bankAccountTrans.paymentId &amp;&amp; !ignoreTypeSet.contains(bankAccountTrans.transType)">
                    <!-- only look for Payments not yet reconciled -->
                    <set field="findPmt" from="[reconcileStatusId:'PmtrNot']"/>

                    <!-- if transType is DEBIT PaymentMethod.ownerPartyId is fromPartyId, if CREDIT then is toPartyId;
                        OR just look at sign of transAmount? (- fromPartyId, + toPartyId) -->
                    <!-- match against Payment.paymentMethodId or toPaymentMethodId -->
                    <if condition="bankAccountTrans.transAmount &gt;= 0">
                        <then>
                            <set field="findPmt.toPartyId" from="paymentMethod.ownerPartyId"/>
                            <set field="findPmt.toPaymentMethodId" from="paymentMethodId"/>
                        </then>
                        <else>
                            <set field="findPmt.fromPartyId" from="paymentMethod.ownerPartyId"/>
                            <set field="findPmt.paymentMethodId" from="paymentMethodId"/>
                        </else>
                    </if>

                    <!-- if we have checkNumber or refNumber match against Payment.paymentRefNum -->
                    <if condition="bankAccountTrans.checkNumber || bankAccountTrans.refNumber">
                        <!-- TODO: what if we match on this and amounts differ... handle differently? -->
                        <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                            <econdition-object field="findPmt"/>
                            <econdition field-name="paymentRefNum" from="bankAccountTrans.checkNumber ?: bankAccountTrans.refNumber"/>
                        </entity-find>
                        <set field="payment" from="paymentList ? paymentList[0] : null"/>
                    </if>

                    <!-- otherwise match against transAmount, postedDate (within X number of days after Payment.effectiveDate?) -->
                    <if condition="!payment">
                        <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                            <econdition-object field="findPmt"/>
                            <econdition field-name="amount" from="bankAccountTrans.transAmount.abs()"/>
                            <econdition field-name="amountUomId" from="paymentMethod.currencyUomId" ignore-if-empty="true"/>
                            <econdition field-name="effectiveDate" operator="less-equals" from="bankAccountTrans.postedDate"/>
                            <econdition field-name="effectiveDate" operator="greater-equals" from="lookBackTs"/>
                        </entity-find>
                        <set field="payment" from="paymentList ? paymentList[0] : null"/>
                    </if>
                    <!-- nothing found? match against originalCurrencyAmount, originalCurrencyUomId -->
                    <if condition="!payment &amp;&amp; paymentMethod.currencyUomId">
                        <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                            <econdition-object field="findPmt"/>
                            <econdition field-name="originalCurrencyAmount" from="bankAccountTrans.transAmount.abs()"/>
                            <econdition field-name="originalCurrencyUomId" from="paymentMethod.currencyUomId"/>
                            <econdition field-name="effectiveDate" operator="less-equals" from="bankAccountTrans.postedDate"/>
                            <econdition field-name="effectiveDate" operator="greater-equals" from="lookBackTs"/>
                        </entity-find>
                        <set field="payment" from="paymentList ? paymentList[0] : null"/>
                    </if>
                </if>
                <if condition="!bankAccountTrans.acctgTransId &amp;&amp; paymentMethod.glAccountId">
                    <!-- match PaymentMethod.glAccountId against AcctgTransEntry.glAccountId -->
                    <!-- look for AcctgTransEntry.reconcileStatusId=AterNot -->
                    <set field="findAte" from="[glAccountId:paymentMethod.glAccountId, reconcileStatusId:'AterNot']"/>

                    <!-- if transAmount positive debitCreditFlag=D, else debitCreditFlag=C -->
                    <set field="findAte.debitCreditFlag" from="bankAccountTrans.transAmount &gt;= 0 ? 'D' : 'C'"/>

                    <!-- if we have a paymentId, look up AcctgTrans by paymentId -->
                    <if condition="payment">
                        <entity-find entity-name="mantle.ledger.transaction.AcctgTransAndEntry" list="ataeList">
                            <econdition-object field="findAte"/>
                            <econdition field-name="paymentId" from="payment.paymentId"/>
                        </entity-find>
                        <set field="acctgTransAndEntry" from="ataeList ? ataeList[0] : null"/>
                    </if>
                    <!-- otherwise match against transAmount, postedDate (within X number of days after AcctgTrans.transactionDate?) -->
                    <!-- look for abs of transAmount -->
                    <if condition="!acctgTransAndEntry">
                        <entity-find entity-name="mantle.ledger.transaction.AcctgTransAndEntry" list="ataeList">
                            <econdition-object field="findAte"/>
                            <econdition field-name="amount" from="bankAccountTrans.transAmount.abs()"/>
                            <econdition field-name="amountUomId" from="paymentMethod.currencyUomId" ignore-if-empty="true"/>
                            <econdition field-name="transactionDate" operator="less-equals" from="bankAccountTrans.postedDate"/>
                            <econdition field-name="transactionDate" operator="greater-equals" from="lookBackTs"/>
                        </entity-find>
                        <set field="acctgTransAndEntry" from="ataeList ? ataeList[0] : null"/>
                    </if>
                    <!-- nothing found? match against originalCurrencyAmount, originalCurrencyUomId -->
                    <if condition="!acctgTransAndEntry &amp;&amp; paymentMethod.currencyUomId">
                        <entity-find entity-name="mantle.ledger.transaction.AcctgTransAndEntry" list="ataeList">
                            <econdition-object field="findAte"/>
                            <econdition field-name="originalCurrencyAmount" from="bankAccountTrans.transAmount.abs()"/>
                            <econdition field-name="originalCurrencyUomId" from="paymentMethod.currencyUomId"/>
                            <econdition field-name="transactionDate" operator="less-equals" from="bankAccountTrans.postedDate"/>
                            <econdition field-name="transactionDate" operator="greater-equals" from="lookBackTs"/>
                        </entity-find>
                        <set field="acctgTransAndEntry" from="ataeList ? ataeList[0] : null"/>
                    </if>
                </if>
                <if condition="payment || acctgTransAndEntry">
                    <service-call name="mantle.account.ReconciliationServices.reconcile#PaymentMethodTrans"
                            in-map="[paymentMethodId:paymentMethodId, fitId:bankAccountTrans.fitId,
                                bankAccountTrans:bankAccountTrans, paymentId:payment?.paymentId, payment:payment,
                                acctgTransId:acctgTransAndEntry?.acctgTransId,
                                acctgTransEntrySeqId:acctgTransAndEntry?.acctgTransEntrySeqId]"/>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="reconcile" noun="PaymentMethodTrans">
        <description>Record reconciliation for a PaymentMethodTrans record against Payment and/or AcctgTransEntry. Called
            by match#PaymentMethodTransUnmatched or can be called directly for manual match.</description>
        <in-parameters>
            <parameter name="paymentMethodId" required="true"/>
            <parameter name="fitId" required="true"/>
            <parameter name="bankAccountTrans" type="EntityValue"><description>Looked up from ID if not passed</description></parameter>
            <parameter name="paymentId"/>
            <parameter name="payment" type="EntityValue"><description>Looked up from ID if not passed</description></parameter>
            <parameter name="acctgTransId"/>
            <parameter name="acctgTransEntrySeqId"/>
            <parameter name="acctgTransEntry" type="EntityValue"><description>Looked up from ID if not passed</description></parameter>
            <parameter name="pmtReconcileStatusId" default-value="PmtrRec"/>
            <parameter name="ateReconcileStatusId" default-value="AterRec"/>
        </in-parameters>
        <actions>
            <if condition="!bankAccountTrans"><entity-find-one entity-name="mantle.account.method.PaymentMethodTrans"
                    value-field="bankAccountTrans"/></if>

            <if condition="paymentId">
                <!-- if another PaymentMethodTrans has this paymentId clear it -->
                <entity-find entity-name="mantle.account.method.PaymentMethodTrans" list="existingTransList">
                    <econdition field-name="paymentId"/></entity-find>
                <iterate list="existingTransList" entry="existingTrans">
                    <set field="existingTrans.paymentId" from="null"/>
                    <entity-update value-field="existingTrans"/>
                </iterate>

                <!-- set the paymentId -->
                <set field="bankAccountTrans.paymentId" from="paymentId"/>
                <entity-update value-field="bankAccountTrans"/>

                <!-- set Payment.reconcileStatusId -->
                <!-- TODO: could populate originalCurrencyAmount, originalCurrencyUomId if they are different -->
                <if condition="!payment"><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/></if>
                <if condition="payment.reconcileStatusId != pmtReconcileStatusId">
                    <set field="payment.reconcileStatusId" from="pmtReconcileStatusId"/>
                    <entity-update value-field="payment"/>
                </if>
            </if>
            <if condition="acctgTransId &amp;&amp; acctgTransEntrySeqId">
                <!-- if another PaymentMethodTrans has this acctgTransId/acctgTransEntrySeqId clear them -->
                <entity-find entity-name="mantle.account.method.PaymentMethodTrans" list="existingTransList">
                    <econdition field-name="acctgTransId"/><econdition field-name="acctgTransEntrySeqId"/></entity-find>
                <iterate list="existingTransList" entry="existingTrans">
                    <set field="existingTrans.acctgTransId" from="null"/>
                    <set field="existingTrans.acctgTransEntrySeqId" from="null"/>
                    <entity-update value-field="existingTrans"/>
                </iterate>

                <!-- set the acctgTransId and acctgTransEntrySeqId -->
                <set field="bankAccountTrans.acctgTransId" from="acctgTransId"/>
                <set field="bankAccountTrans.acctgTransEntrySeqId" from="acctgTransEntrySeqId"/>
                <entity-update value-field="bankAccountTrans"/>

                <!-- set AcctgTransEntry.reconcileStatusId -->
                <!-- TODO: could populate originalCurrencyAmount, originalCurrencyUomId if they are different -->
                <if condition="!acctgTransEntry"><entity-find-one entity-name="mantle.ledger.transaction.AcctgTransEntry"
                        value-field="acctgTransEntry"/></if>
                <if condition="acctgTransEntry.reconcileStatusId != ateReconcileStatusId">
                    <set field="acctgTransEntry.reconcileStatusId" from="ateReconcileStatusId"/>
                    <entity-update value-field="acctgTransEntry"/>
                </if>
            </if>
        </actions>
    </service>
</services>
