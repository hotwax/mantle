<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <!-- ============================= -->
    <!-- Shipping Gateway Interfaces -->
    <!-- ============================= -->

    <service verb="get" noun="OrderShippingRate" type="interface">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
            <parameter name="createOrderItem" type="Boolean" default="true"/>
            <parameter name="shipmentMethodEnumId"><description>Overrides the OrderPart.shipmentMethodEnumId if specified.</description></parameter>
            <parameter name="carrierPartyId"><description>Overrides the OrderPart.carrierPartyId if specified.</description></parameter>
            <parameter name="postalContactMechId"><description>Overrides the OrderPart.postalContactMechId if specified.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="shippingTotal" required="true"/>
            <parameter name="orderItemSeqId"/>
        </out-parameters>
    </service>
    <service verb="estimate" noun="ShippingRate" type="interface">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>
    <service verb="request" noun="ShippingLabels" type="interface">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>
    <service verb="void" noun="ShippingLabels" type="interface">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>
    <service verb="track" noun="ShippingLabels" type="interface">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentPackageSeqId"/>
            <parameter name="shipmentRouteSegmentSeqId"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>
    <service verb="validate" noun="ShippingPostalAddress" type="interface">
        <in-parameters>
            <parameter name="contactMechId" required="true"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
    </service>

    <!-- ============================================ -->
    <!-- Order Shipping Rate Services Called Directly -->
    <!-- ============================================ -->

    <service verb="calculate" noun="OrderShipping">
        <description>Call this to calculate shipping for an order. Calls the service named in getOrderRateServiceName
            for the shipping gateway.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="shippingGatewayConfigId"><description>Optional if OrderHeader.productStoreId is populated
                and a corresponding ProductStoreShippingGateway record exists.</description></parameter>
            <parameter name="createOrderItem" type="Boolean" default="true"/>
            <parameter name="shipmentMethodEnumId"><description>Overrides the OrderPart.shipmentMethodEnumId if specified.</description></parameter>
            <parameter name="carrierPartyId"><description>Overrides the OrderPart.carrierPartyId if specified.</description></parameter>
            <parameter name="postalContactMechId"><description>Overrides the OrderPart.postalContactMechId if specified.</description></parameter>
        </in-parameters>
        <out-parameters><parameter name="shippingTotal" required="true"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList"><econdition field-name="orderId"/></entity-find>
            <set field="shippingTotal" from="0" type="BigDecimal"/>
            <iterate list="orderPartList" entry="orderPart">
                <service-call name="mantle.shipment.CarrierServices.calculate#OrderPartShipping"
                        in-map="context + [orderPartSeqId:orderPart.orderPartSeqId]" out-map="copsOut"/>
                <set field="shippingTotal" from="shippingTotal + (copsOut.shippingTotal ?: 0)"/>
            </iterate>
        </actions>
    </service>
    <service verb="calculate" noun="OrderPartShipping">
        <description>If there are any shipping charge items (type ItemShipping) in the part deletes them. Calls the
            service specified in ShippingGatewayConfig.getOrderRateServiceName for the OrderPart.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="shippingGatewayConfigId"><description>Optional if OrderHeader.productStoreId is populated
                and a corresponding ProductStoreShippingGateway record exists.</description></parameter>
            <parameter name="createOrderItem" type="Boolean" default="true"/>
            <parameter name="shipmentMethodEnumId"><description>Overrides the OrderPart.shipmentMethodEnumId if specified.</description></parameter>
            <parameter name="carrierPartyId"><description>Overrides the OrderPart.carrierPartyId if specified.</description></parameter>
            <parameter name="postalContactMechId"><description>Overrides the OrderPart.postalContactMechId if specified.</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="shippingTotal" required="true"/>
            <parameter name="orderItemSeqId"/>
        </out-parameters>
        <actions>
            <if condition="!shippingGatewayConfigId">
                <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
                <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
                <set field="carrierPartyId" from="carrierPartyId ?: orderPart.carrierPartyId"/>

                <if condition="!orderHeader.productStoreId"><return error="true"
                        message="Could not get order shipping rate, order is not associated with a store and no gateway config ID specified."/></if>

                <entity-find-one entity-name="mantle.product.store.ProductStoreShippingGateway"
                        value-field="productStoreShippingGateway">
                    <field-map field-name="productStoreId" from="orderHeader.productStoreId"/>
                    <field-map field-name="carrierPartyId"/>
                </entity-find-one>
                <set field="shippingGatewayConfigId" from="productStoreShippingGateway?.shippingGatewayConfigId"/>
            </if>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayConfig" value-field="shippingGatewayConfig" cache="true"/>
            <if condition="shippingGatewayConfig == null"><return error="true"
                    message="Could not get order shipping rate, no gateway configuration found."/></if>
            <if condition="!shippingGatewayConfig.getOrderRateServiceName"><return error="true"
                    message="Could not get order shipping rate, no order rate service on gateway configuration [${shippingGatewayConfig.shippingGatewayConfigId}]."/></if>

            <!-- if order part has shipping (ItemShipping) items clear them out first -->
            <entity-delete-by-condition entity-name="mantle.order.OrderItem">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                <econdition field-name="itemTypeEnumId" value="ItemShipping"/>
            </entity-delete-by-condition>

            <!-- call gateway (could be local) service to calculate shipping charges -->
            <service-call name="${shippingGatewayConfig.getOrderRateServiceName}" in-map="context" out-map="context"/>
        </actions>
    </service>

    <!-- ========================= -->
    <!-- Local Order Shipping Rate -->
    <!-- ========================= -->

    <service verb="get" noun="OrderShippingRateLocal">
        <description>Estimate shipping costs locally using rules</description>
        <implements service="mantle.shipment.CarrierServices.get#OrderShippingRate"/>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                <!-- NOTE: shouldn't need to exclude ItemShipping type items, calling service (estimate#OrderPartShipping) deletes them -->
                <!-- NOTE: there should be no tax in place when this is run, tax calc should be after as shipping may be taxed -->
                <!-- TODO: filter out non-product and other general non-shipping items -->
                <order-by field-name="orderItemSeqId"/>
            </entity-find>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayConfig" value-field="shippingGatewayConfig" cache="true"/>

            <set field="carrierPartyId" from="carrierPartyId ?: orderPart.carrierPartyId"/>
            <set field="shipmentMethodEnumId" from="shipmentMethodEnumId ?: orderPart.shipmentMethodEnumId"/>

            <set field="postalContactMechId" from="postalContactMechId ?: orderPart.postalContactMechId"/>
            <service-call name="mantle.party.ContactServices.get#PostalAddressGeoIdSet" out-map="context"
                    in-map="[contactMechId:postalContactMechId]"/>

            <set field="itemCount" from="0" type="BigDecimal"/>
            <set field="totalQuantity" from="0" type="BigDecimal"/>
            <set field="totalWeight" from="0" type="BigDecimal"/>
            <iterate list="orderItemList" entry="orderItem">
                <set field="product" from="orderItem.'mantle.product.Product'"/>
                <set field="typeEnum" from="product?.'ProductType#moqui.basic.Enumeration'"/>
                <if condition="(!product?.chargeShipping || product?.chargeShipping == 'Y') &amp;&amp;
                        product?.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse']">
                    <set field="itemCount" from="itemCount + 1"/>

                    <set field="totalQuantity" from="totalQuantity + (orderItem.quantity ?: 0)"/>

                    <entity-find-one entity-name="mantle.product.ProductDimension" value-field="shippingWeight">
                        <field-map field-name="productId" from="orderItem.productId"/>
                        <field-map field-name="dimensionTypeId" value="ShippingWeight"/>
                    </entity-find-one>
                    <!-- TODO: this assumes all weights are the same unit, add some unit conversion to a standard like WT_lb -->
                    <!-- NOTE: this defaults to 1, maybe make this configurable somehow -->
                    <set field="totalWeight" from="totalWeight + ((shippingWeight?.value ?: 1) * orderItem.quantity)"/>
                </if>
            </iterate>

            <if condition="itemCount">
                <!-- start with shippingTotal=0 so it can be added to by the rules -->
                <set field="shippingTotal" from="0" type="BigDecimal"/>

                <!-- run the OrderShippingEstimateKS knowledge session rules -->
                <if condition="ec.factory.getToolFactory('KIE')"><then>
                    <script>ec.getTool("KIE", null).getStatelessKieSession("OrderShippingRateKS").execute([])</script>
                </then><else>
                    <log message="KIE not found, not calculating order shipping for order ${orderId}"/>
                </else></if>

                <log level="info" message="Calculated shippingTotal [${shippingTotal}] order part [${orderId}:${orderPartSeqId}] carrier [${carrierPartyId}] method [${shipmentMethodEnumId}] address [${postalContactMechId}] geos [${geoIdSet}] items [${itemCount}] quantity [${totalQuantity}] weight [${totalWeight}]"/>

                <if condition="createOrderItem">
                    <entity-find-one entity-name="mantle.party.PartyDetail" value-field="carrierDetail" cache="true">
                        <field-map field-name="partyId" from="orderPart.carrierPartyId"/></entity-find-one>
                    <entity-find-one entity-name="moqui.basic.Enumeration" value-field="shipmentMethodEnum">
                        <field-map field-name="enumId" from="orderPart.shipmentMethodEnumId"/></entity-find-one>
                    <set field="carrierName" value="${ec.resource.expand('PartyNameTemplate','',carrierDetail)}"/>
                    <set field="itemDescription" value="${orderPart.carrierPartyId == '_NA_' ? '' : (carrierName + ' - ') }${shipmentMethodEnum.description}"/>
                    <service-call name="create#mantle.order.OrderItem" in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,
                            itemTypeEnumId:'ItemShipping', quantity:1, unitAmount:shippingTotal, itemDescription:itemDescription]"
                            out-map="context"/>
                </if>
            </if>
        </actions>
    </service>
</services>
