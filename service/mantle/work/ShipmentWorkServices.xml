<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="create" noun="ShipmentLoadShip">
        <in-parameters>
            <auto-parameters entity-name="mantle.work.effort.WorkEffort" include="nonpk"/>
            <parameter name="workEffortTypeEnumId" default-value="WetEvent"/>
            <parameter name="purposeEnumId" default-value="WepShipmentShip"/>
            <parameter name="statusId" default-value="WeInPlanning"/>
            <parameter name="timeUomId" default-value="TF_hr"/>

            <parameter name="facilityId" required="true"/>
            <parameter name="estimatedStartDate" type="Timestamp" required="true"/>

            <parameter name="assetIdList" type="List"><parameter name="assetId"/></parameter>
            <parameter name="assetStatusId" default-value="WeaaAssigned"/>
            <parameter name="assetFromDate" default="ec.user.nowTimestamp"/>
            <parameter name="shipmentIdList" type="List"><parameter name="shipmentId"/></parameter>
        </in-parameters>
        <out-parameters><parameter name="workEffortId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.work.effort.WorkEffort" in-map="context" out-map="context"/>

            <iterate list="assetIdList" entry="assetId">
                <service-call name="create#mantle.work.effort.WorkEffortAssetAssign"
                        in-map="[workEffortId:workEffortId, assetId:assetId, statusId:assetStatusId, fromDate:assetFromDate]"/>
            </iterate>
            <iterate list="shipmentIdList" entry="shipmentId">
                <service-call name="update#mantle.shipment.Shipment" in-map="[shipmentId:shipmentId, shipWorkEffortId:workEffortId]"/>
            </iterate>
        </actions>
    </service>

    <service verb="add" noun="ShipmentToShipmentLoad">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="workEffortId" required="true"/>
            <parameter name="binLocationNumber" type="Long"/>
            <parameter name="allowBulkLocations" type="Boolean" default="false"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <if condition="shipment.statusId in ['ShipShipped', 'ShipDelivered', 'ShipRejected','ShipCancelled']">
                <return message="Shipment ${shipmentId} is in status ${shipment.status?.description ?: shipment.statusId}, not shipping" type="warning"/></if>

            <!-- TODO if !allowBulkLocations return with warning if any inventory reserved against bulk location -->

            <!-- if no binLocationNumber sequence it -->
            <if condition="!binLocationNumber">
                <entity-find entity-name="mantle.shipment.Shipment" list="shipBinList">
                    <econdition field-name="shipWorkEffortId" from="workEffortId"/>
                    <econdition field-name="binLocationNumber" operator="is-not-null"/>
                    <select-field field-name="binLocationNumber"/>
                    <order-by field-name="binLocationNumber"/>
                </entity-find>
                <script><![CDATA[
                    if (shipBinList) {
                        List binNumList = shipBinList*.binLocationNumber
                        long lastBinNum = 0
                        for (binNum in binNumList) {
                            if (binNum > (lastBinNum + 1)) { binLocationNumber = lastBinNum + 1; break }
                            lastBinNum = binNum
                        }
                        if (!binLocationNumber) binLocationNumber = lastBinNum + 1
                    } else {
                        binLocationNumber = 1
                    }
                ]]></script>
            </if>

            <!-- update the shipment -->
            <service-call name="update#mantle.shipment.Shipment"
                    in-map="[shipmentId:shipmentId, shipWorkEffortId:workEffortId, binLocationNumber:binLocationNumber]"/>
        </actions>
    </service>
    <service verb="add" noun="OrderPartToShipmentLoad">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="workEffortId" required="true"/>
            <parameter name="binLocationNumber" type="Long"/>
            <parameter name="allowBulkLocations" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <if condition="orderPart.statusId != 'OrderApproved'">
                <return message="Order ${orderId} part ${orderPartSeqId} is not in Approved status, not shipping" type="warning"/></if>

            <!-- find existing shipment(s) for items in this order part -->
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/></entity-find>
            <set field="orderItemSeqIdList" from="orderItemList*.orderItemSeqId"/>
            <entity-find entity-name="mantle.shipment.ShipmentAndItemSource" list="shipmentItemSourceList" distinct="true">
                <econdition field-name="orderId"/>
                <econdition field-name="orderItemSeqId" operator="in" from="orderItemSeqIdList"/>
                <econdition field-name="shipmentStatusId" operator="not-in" value="ShipRejected,ShipCancelled"/>
                <econdition field-name="statusId" operator="not-equals" value="SisCancelled"/>
                <select-field field-name="shipmentId"/>
            </entity-find>
            <set field="shipmentIdList" from="shipmentItemSourceList*.shipmentId"/>

            <!-- if has no shipments create one -->
            <!-- NOTE: if not all shipped then ship the rest? no, don't bulk or auto extend what is likely a manual order shipment -->
            <if condition="!shipmentIdList">
                <service-call name="mantle.shipment.ShipmentServices.create#OrderPartShipment" out-map="createShipmentOut"
                        in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId]"/>
                <set field="shipmentIdList" from="[createShipmentOut.shipmentId]"/>
            </if>

            <!-- add shipment(s) to shipment load (picklist) -->
            <iterate list="shipmentIdList" entry="shipmentId">
                <service-call name="mantle.work.ShipmentWorkServices.add#ShipmentToShipmentLoad" in-map="[shipmentId:shipmentId,
                        workEffortId:workEffortId, binLocationNumber:binLocationNumber, allowBulkLocations:allowBulkLocations]"/>
            </iterate>
        </actions>
    </service>
</services>
