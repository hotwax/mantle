<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.6.xsd">

    <service verb="create" noun="Project">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <auto-parameters entity-name="mantle.work.effort.WorkEffort" include="nonpk"/>
            <parameter name="workEffortName" required="true"/>
            <parameter name="estimatedStartDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="estimatedCompletionDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="statusId" default-value="WeInPlanning"/>

            <parameter name="clientPartyId"/>
            <parameter name="clientBillingPartyId"/>
            <parameter name="clientManagerPartyId"/>
            <parameter name="vendorPartyId"/>
            <parameter name="vendorManagerPartyId"/>
        </in-parameters>
        <actions>
            <service-call name="create#WorkEffort" out-map="context" in-map="context + [workEffortTypeEnumId:'WetProject']"/>

            <!-- always assign the user who creates the project as a manager -->
            <service-call name="create#WorkEffortParty"
                    in-map="[workEffortId:workEffortId, partyId:ec.user.userAccount.partyId,
                        roleTypeId:'Manager', fromDate:ec.user.nowTimestamp, statusId:'WeptAssigned']"/>

            <if condition="clientPartyId">
                <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId,
                        partyId:clientPartyId, roleTypeId:'CustomerBillTo', fromDate:ec.user.nowTimestamp]"/>
            </if>
            <if condition="clientBillingPartyId">
                <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId, partyId:clientBillingPartyId,
                        roleTypeId:'ClientBilling', fromDate:ec.user.nowTimestamp, statusId:'WeptAssigned']"/>
            </if>
            <if condition="clientManagerPartyId">
                <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId, partyId:clientManagerPartyId,
                        roleTypeId:'ClientManager', fromDate:ec.user.nowTimestamp, statusId:'WeptAssigned']"/>
            </if>
            <if condition="vendorPartyId">
                <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId, partyId:vendorPartyId,
                        roleTypeId:'VendorBillFrom', fromDate:ec.user.nowTimestamp]"/>
            </if>
            <if condition="vendorManagerPartyId &amp;&amp; vendorManagerPartyId != ec.user.userAccount.partyId">
                <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId, partyId:vendorManagerPartyId,
                        roleTypeId:'Manager', fromDate:ec.user.nowTimestamp, statusId:'WeptAssigned']"/>
            </if>
        </actions>
    </service>
    <service verb="update" noun="Project">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <auto-parameters entity-name="mantle.work.effort.WorkEffort" include="nonpk"/>
            <parameter name="estimatedStartDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="estimatedCompletionDate" type="Timestamp" format="yyyy-MM-dd"/>

            <parameter name="clientPartyId"/>
            <parameter name="clientBillingPartyId"/>
            <parameter name="clientManagerPartyId"/>
            <parameter name="vendorPartyId"/>
            <parameter name="managerPartyId"/>
        </in-parameters>
        <actions>
            <service-call name="update#mantle.work.effort.WorkEffort" out-map="context" in-map="context"/>

            <if condition="clientPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'CustomerBillTo', newPartyId:clientPartyId]"/>
            </if>
            <if condition="clientBillingPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'ClientBilling',
                        newPartyId:clientBillingPartyId, statusId:'WeptAssigned']"/>
            </if>
            <if condition="clientManagerPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'ClientManager',
                        newPartyId:clientManagerPartyId, statusId:'WeptAssigned']"/>
            </if>
            <if condition="vendorPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'VendorBillFrom',
                        newPartyId:vendorPartyId, statusId:'WeptAssigned']"/>
            </if>
            <if condition="managerPartyId">
                <service-call name="mantle.work.WorkEffortServices.replace#WorkEffortParty"
                        in-map="[workEffortId:workEffortId, roleTypeId:'Manager',
                        newPartyId:managerPartyId, statusId:'WeptAssigned']"/>
            </if>
        </actions>
    </service>

    <service verb="get" noun="ProjectStats">
        <in-parameters>
            <parameter name="workEffort" type="Map"/>
            <parameter name="workEffortId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="actualProfit" type="BigDecimal"/>
            <parameter name="clientBudgetRemaining" type="BigDecimal"/>
            <parameter name="clientBudgetUsedPercent" type="BigDecimal"/>
            <parameter name="clientActualOverBudget" type="Boolean"/>

            <parameter name="actualPlusRemainingTime" type="BigDecimal"/>
            <parameter name="bestTimeEstimate" type="BigDecimal"/>
            <parameter name="estimatedCompletePercent" type="BigDecimal"/>
            <parameter name="estimatedRemainingPercent" type="BigDecimal"/>
            <parameter name="estimatedActualPlusRemainingDiff" type="BigDecimal"/>
            <parameter name="actualPlusRemainingOverEstimated" type="Boolean"/>

            <parameter name="clientAverageHourCost" type="BigDecimal"/>
            <parameter name="clientEstimatedCost" type="BigDecimal"/>
            <parameter name="clientBudgetEstimateDiff" type="BigDecimal"/>

            <parameter name="estimatedCompleteBudgetPercentGap" type="BigDecimal"/>
            <parameter name="estimatedCompleteOverBudget" type="Boolean"/>

            <parameter name="projectWarning" type="Boolean"/>
            <parameter name="projectDanger" type="Boolean"/>

            <parameter name="taskCount" type="Long"/>
            <parameter name="taskCountByStatusMap" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="workEffort == null">
                <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/></if>

            <set field="actualProfit" from="(workEffort.actualClientCost ?: 0) - (workEffort.actualCost ?: 0)"/>
            <set field="clientBudgetRemaining" from="(workEffort.totalClientCostAllowed ?: 0) - (workEffort.actualClientCost ?: 0)"/>
            <set field="clientBudgetUsedPercent" from="workEffort.totalClientCostAllowed ? ((workEffort.actualClientCost ?: 0) / workEffort.totalClientCostAllowed) * 100 : 0"/>
            <set field="clientActualOverBudget" from="workEffort.actualClientCost &gt; workEffort.totalClientCostAllowed"/>

            <set field="actualPlusRemainingTime" from="(workEffort.actualWorkTime ?: 0) + (workEffort.remainingWorkTime ?: 0)"/>
            <set field="bestTimeEstimate" from="actualPlusRemainingTime &gt; workEffort.estimatedWorkTime ? actualPlusRemainingTime : workEffort.estimatedWorkTime "/>
            <set field="estimatedCompletePercent" from="workEffort.estimatedWorkTime ? ((workEffort.actualWorkTime ?: 0) / workEffort.estimatedWorkTime) * 100 : 0"/>
            <set field="estimatedRemainingPercent" from="workEffort.estimatedWorkTime ? ((workEffort.remainingWorkTime ?: 0) / workEffort.estimatedWorkTime) * 100 : 0"/>
            <set field="estimatedActualPlusRemainingDiff" from="(workEffort.estimatedWorkTime ?: 0) - actualPlusRemainingTime"/>
            <set field="actualPlusRemainingOverEstimated" from="actualPlusRemainingTime &gt; workEffort.estimatedWorkTime"/>

            <set field="clientAverageHourCost" from="workEffort.actualWorkTime ? ((workEffort.actualClientCost ?: 0) / workEffort.actualWorkTime) : 0"/>
            <set field="clientEstimatedCost" from="clientAverageHourCost * bestTimeEstimate"/>
            <set field="clientBudgetEstimateDiff" from="(workEffort.totalClientCostAllowed ?: 0) - clientEstimatedCost"/>

            <set field="estimatedCompleteBudgetPercentGap" from="(estimatedCompletePercent ?: 0) - clientBudgetUsedPercent"/>
            <set field="estimatedCompleteOverBudget" from="estimatedCompletePercent &lt; clientBudgetUsedPercent"/>

            <set field="projectDanger" from="clientActualOverBudget | actualPlusRemainingOverEstimated"/>
            <set field="projectWarning" from="estimatedCompleteOverBudget"/>

            <entity-find-count entity-name="mantle.work.effort.WorkEffort" count-field="taskCount">
                <econdition field-name="rootWorkEffortId" from="workEffort.workEffortId"/>
                <econdition field-name="workEffortTypeEnumId" value="WetTask"/>
            </entity-find-count>
            <entity-find entity-name="mantle.work.effort.ProjectTaskCounts" list="taskStatusCountList">
                <econdition field-name="rootWorkEffortId" from="workEffort.workEffortId"/>
                <select-field field-name="statusId"/><select-field field-name="taskCount"/>
            </entity-find>
            <set field="taskCountByStatusMap" from="[:]"/>
            <iterate list="taskStatusCountList" entry="taskStatusCount">
                <script>taskCountByStatusMap.put(taskStatusCount.statusId, taskStatusCount.taskCount)</script></iterate>
        </actions>
    </service>

    <service verb="get" noun="ProjectParties">
        <in-parameters>
            <parameter name="rootWorkEffortId" default="workEffortId"/>
            <parameter name="workEffortId"/>
            <parameter name="addOptional" type="Boolean" default="true"/>
            <parameter name="onlyAssignable" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters><parameter name="resultList" type="List"><parameter name="result" type="Map"/></parameter></out-parameters>
        <actions>
            <entity-find entity-name="mantle.work.effort.WorkEffortAndPartyDetail" list="partyList">
                <date-filter/><econdition field-name="workEffortId" from="rootWorkEffortId"/>
                <econdition field-name="roleTypeId" operator="in" value="Assignee,OrgTeam" ignore="!onlyAssignable"/>
                <order-by field-name="^firstName,^lastName,^organizationName"/>
            </entity-find>
            <script>
                resultList = []
                if (addOptional) resultList.add([partyId:"", name:"None"])
                for (def party in partyList)
                    resultList.add([partyId:party.partyId, name:ec.resource.expand('PartyNameTemplate', '', party)])
            </script>
        </actions>
    </service>
    <service verb="get" noun="ProjectTeams">
        <in-parameters>
            <parameter name="rootWorkEffortId" default="workEffortId"/>
            <parameter name="workEffortId"/>
        </in-parameters>
        <out-parameters><parameter name="resultList" type="List"><parameter name="result" type="Map"/></parameter></out-parameters>
        <actions>
            <entity-find entity-name="mantle.work.effort.WorkEffortAndPartyDetail" list="weapdList">
                <date-filter/>
                <econdition field-name="workEffortId" from="rootWorkEffortId"/>
                <econdition field-name="roleTypeId" value="OrgTeam"/>
                <order-by field-name="organizationName"/><order-by field-name="^firstName"/><order-by field-name="^lastName"/>
            </entity-find>
            <script>
                resultList = [[partyId:"", name:"None"]]
                for (def weapd in weapdList)
                    resultList.add([partyId:weapd.partyId, name:ec.resource.expand('PartyNameTemplate','',weapd)])
            </script>
        </actions>
    </service>
    <service verb="get" noun="ProjectTasks">
        <in-parameters>
            <parameter name="rootWorkEffortId" default="workEffortId"/>
            <parameter name="workEffortId"/>
        </in-parameters>
        <out-parameters><parameter name="resultList" type="List"><parameter name="result" type="Map"/></parameter></out-parameters>
        <actions>
            <entity-find entity-name="mantle.work.effort.WorkEffort" list="taskList">
                <econdition field-name="rootWorkEffortId"/>
                <econdition field-name="workEffortTypeEnumId" value="WetTask"/>
                <econdition field-name="statusId" operator="not-in" value="WeClosed,WeCancelled"/>
                <order-by field-name="workEffortId"/>
            </entity-find>
            <script>
                resultList = [[workEffortId:"", taskLabel:"None"]]
                for (def task in taskList)
                    resultList.add([workEffortId:task.workEffortId, taskLabel:ec.resource.expand('WorkEffortNameTemplate','',task)])
            </script>
        </actions>
    </service>
    <service verb="get" noun="ProjectMilestones">
        <in-parameters>
            <parameter name="rootWorkEffortId" default="workEffortId"/>
            <parameter name="workEffortId"/>
        </in-parameters>
        <out-parameters><parameter name="resultList" type="List"><parameter name="result" type="Map"/></parameter></out-parameters>
        <actions>
            <entity-find entity-name="mantle.work.effort.WorkEffort" list="milestoneList">
                <econdition field-name="rootWorkEffortId"/>
                <econdition field-name="workEffortTypeEnumId" value="WetMilestone"/>
                <order-by field-name="estimatedStartDate"/>
            </entity-find>
            <script>
                resultList = [[workEffortId:"", milestoneLabel:"None"]]
                for (def milestone in milestoneList)
                    resultList.add([workEffortId:milestone.workEffortId, milestoneLabel:ec.resource.expand('WorkEffortNameTemplate','',milestone)])
            </script>
        </actions>
    </service>

    <service verb="create" noun="Milestone">
        <in-parameters>
            <parameter name="rootWorkEffortId" required="true"/>
            <parameter name="workEffortId" required="true"/>
            <parameter name="workEffortName" required="true"/>
            <parameter name="estimatedStartDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="estimatedCompletionDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="statusId" default-value="WeInPlanning"/>
        </in-parameters>
        <out-parameters><parameter name="workEffortId"/></out-parameters>
        <actions>
            <!-- decided to go with manual ID instead of auto <set field="seqName" value="Project_MS_${rootWorkEffortId}"/>
            <set field="workEffortId" value="${rootWorkEffortId}-MS-${ec.entity.sequencedIdPrimary(seqName, null, null)}"/> -->
            <service-call name="create#mantle.work.effort.WorkEffort" out-map="context" in-map="context + [workEffortTypeEnumId:'WetMilestone']"/>
        </actions>
    </service>
    <service verb="update" noun="Milestone">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="workEffortName"/>
            <parameter name="estimatedStartDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="estimatedCompletionDate" type="Timestamp" format="yyyy-MM-dd"/>
            <parameter name="statusId"/>
        </in-parameters>
        <actions>
            <service-call name="update#mantle.work.effort.WorkEffort" out-map="context" in-map="context"/>
        </actions>
    </service>
</services>
