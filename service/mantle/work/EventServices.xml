<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="get" noun="FullCalendarData">
        <description>Get data to display WorkEffort events with the FullCalender JS library (see http://fullcalendar.io/)</description>
        <in-parameters>
            <parameter name="facilityId"/>
            <parameter name="facilityIdList" type="List"><parameter name="facilityId"/></parameter>
            <parameter name="partyId"/>
            <parameter name="partyIdList" type="List"><parameter name="partyId"/></parameter>
            <parameter name="assetId"/>
            <parameter name="assetIdList" type="List"><parameter name="assetId"/></parameter>
            <parameter name="start" required="true"/>
            <parameter name="end" required="true"/>
            <parameter name="titleGString" default-value="\${(workEffort.workEffortName ?: (workEffort.purposeEnumId ? workEffort.'WorkEffortPurpose#moqui.basic.Enumeration'.description : 'Event')) + ' [' + workEffort.workEffortId + ']'}"/>
            <parameter name="urlGString"/>
        </in-parameters>
        <out-parameters>
            <parameter name="eventList" type="List">
                <parameter name="eventMap" type="Map">
                    <parameter name="id"/>
                    <parameter name="title"/>
                    <parameter name="start"><description>actualStartDate or estimatedStartDate as ISO8601 formatted String</description></parameter>
                    <parameter name="end"><description>actualCompletionDate or estimatedCompletionDate (or if null start date +
                        actualWorkDuration, estimatedWorkDuration, or estimatedWorkTime) as a ISO8601 (yyyy-MM-dd'T'HH:mm:ss) formatted String</description></parameter>
                    <!-- NOTE: consider supporting allDay, color, etc in the future with WorkEffort fields -->
                    <parameter name="url"><description>Only returned if urlGString is specified</description></parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <!-- start and end are ISO8601 date strings -->
            <set field="startTs" from="ec.l10n.parseTimestamp(start.toString() + ' 00:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')"/>
            <set field="endTs" from="ec.l10n.parseTimestamp(end.toString() + ' 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS')"/>
            <!-- In older versions of FullCalendar start/end come in as seconds since epoch so add '000' to make milliseconds
            <set field="startTs" from="ec.l10n.parseTimestamp(start + '000', null)"/>
            <set field="endTs" from="ec.l10n.parseTimestamp(end + '000', null)"/>
             -->

            <!-- <log level="warn" message="=========== Event FullCalendarData start ${start} - ${startTs} end ${end} - ${endTs}"/> -->

            <set field="facilityIdSet" from="new HashSet()"/>
            <if condition="facilityId"><script>facilityIdSet.add(facilityId)</script></if>
            <if condition="facilityIdList"><script>facilityIdSet.addAll(facilityIdList)</script></if>
            <set field="partyIdSet" from="new HashSet()"/>
            <if condition="partyId"><script>partyIdSet.add(partyId)</script></if>
            <if condition="partyIdList"><script>partyIdSet.addAll(partyIdList)</script></if>
            <set field="assetIdSet" from="new HashSet()"/>
            <if condition="assetId"><script>assetIdSet.add(assetId)</script></if>
            <if condition="assetIdList"><script>assetIdSet.addAll(assetIdList)</script></if>

            <entity-find entity-name="mantle.work.effort.WorkEffortPartyAsset" list="workEffortList">
                <econdition field-name="workEffortTypeEnumId" value="WetEvent"/>
                <econdition field-name="facilityId" operator="in" from="facilityIdSet" ignore-if-empty="true"/>
                <econdition field-name="partyId" operator="in" from="partyIdSet" ignore-if-empty="true"/>
                <econdition field-name="assetId" operator="in" from="assetIdSet" ignore-if-empty="true"/>
                <econdition field-name="estimatedStartDate" operator="greater-equals" from="startTs"/>
                <econdition field-name="estimatedStartDate" operator="less-equals" from="endTs"/>
                <select-field field-name="workEffortId"/><select-field field-name="purposeEnumId"/>
                <select-field field-name="workEffortName"/>
                <select-field field-name="description"/><select-field field-name="location"/>
                <select-field field-name="actualStartDate"/><select-field field-name="actualCompletionDate"/>
                <select-field field-name="actualWorkTime"/><select-field field-name="actualWorkDuration"/>
                <select-field field-name="estimatedStartDate"/><select-field field-name="estimatedCompletionDate"/>
                <select-field field-name="estimatedWorkTime"/><select-field field-name="estimatedWorkDuration"/>
                <select-field field-name="timeUomId"/>
            </entity-find>

            <set field="eventList" from="[]"/>
            <iterate list="workEffortList" entry="workEffortDef">
                <set field="workEffort" from="workEffortDef"/><!-- put it in the context -->
                <set field="title" from="ec.resource.expand(titleGString, '')"/>

                <service-call name="mantle.work.WorkEffortServices.get#WorkEffortStartEnd" out-map="startEndOut"
                        in-map="[workEffortId:workEffort.workEffortId, workEffort:workEffort]"/>
                <set field="start" from="ec.l10n.format(startEndOut.startDate, 'yyyy-MM-dd\'T\'HH:mm:ss')"/>
                <set field="end" from="ec.l10n.format(startEndOut.endDate, 'yyyy-MM-dd\'T\'HH:mm:ss')"/>

                <if condition="urlGString">
                    <set field="url" from="ec.resource.expand(urlGString, '')"/>
                    <else><set field="url" value=""/></else>
                </if>
                <set field="eventMap" from="[id:workEffort.workEffortId, title:title, start:start, end:end, url:url, allDay:false]"/>
                <script>eventList.add(eventMap)</script>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="Event">
        <in-parameters>
            <auto-parameters entity-name="mantle.work.effort.WorkEffort" include="nonpk"/>
            <parameter name="workEffortTypeEnumId" default-value="WetEvent"/>
            <parameter name="workEffortName" required="true"/>
            <parameter name="description"/>
            <parameter name="statusId" default-value="WeInPlanning"/>
            <parameter name="resolutionEnumId" default-value="WerUnresolved"/>
            <parameter name="priority" type="Long" default="5"/>
            <parameter name="timeUomId" default-value="TF_hr"/>
            <parameter name="assignToPartyId" default-value="${ec.user.userAccount.partyId}"/>
            <parameter name="requestId"/>
            <parameter name="assetId"/>
        </in-parameters>
        <out-parameters><parameter name="workEffortId"/></out-parameters>
        <actions>
            <set field="seqName" value="Project_${rootWorkEffortId}"/>
            <service-call name="create#mantle.work.effort.WorkEffort" in-map="context" out-map="context"/>
            <service-call name="create#mantle.work.effort.WorkEffortParty" in-map="[workEffortId:workEffortId,
                    partyId:assignToPartyId, roleTypeId:'_NA_', fromDate:ec.user.nowTimestamp, statusId:'WeptAssigned']"/>
            <if condition="requestId">
                <service-call name="create#mantle.request.RequestWorkEffort"
                        in-map="[workEffortId:workEffortId, requestId:requestId]"/>
            </if>
            <if condition="assetId">
                <service-call name="create#mantle.work.effort.WorkEffortAssetAssign" in-map="[workEffortId:workEffortId,
                        assetId:assetId, fromDate:ec.user.nowTimestamp, statusId:'WeaaAssigned']"/>
            </if>
        </actions>
    </service>
</services>
