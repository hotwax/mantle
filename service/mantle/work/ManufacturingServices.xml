<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="ProductionRunDisplayInfo">
        <in-parameters><parameter name="workEffortId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="workEffort" type="Map"/>
            <parameter name="statusHistoryList" type="List"><parameter name="auditLog" type="Map"/></parameter>

            <parameter name="lineFacility" type="Map"/>
            <parameter name="warehouseFacility" type="Map"/>
            <parameter name="currentFacilityIdList" type="List"><parameter name="facilityId"/></parameter>
            <parameter name="inventoryFacilityId"/>
            <parameter name="inventoryFacility" type="Map"/>

            <parameter name="consumeList" type="List"><parameter name="consumeItem" type="Map"/></parameter>
            <parameter name="consumeProductIdList" type="List"><parameter name="productId"/></parameter>
            <parameter name="produceList" type="List"><parameter name="produceItem" type="Map"/></parameter>
            <parameter name="produceProductIdList" type="List"><parameter name="productId"/></parameter>
            <parameter name="combinedProductIdList" type="List"><parameter name="productId"/></parameter>
            <parameter name="assetSummaryList" type="List">
                <description>List of AssetSummaryView records for all products consumed and produced, to be filtered and used as needed.</description>
                <parameter name="assetSummary" type="Map"/>
            </parameter>

            <parameter name="issuanceSummaryList" type="List">
                <description>Summary of quantities of assets issued (consumed) by productId.</description>
                <parameter name="issuanceSummary" type="Map"/>
            </parameter>
            <parameter name="receiptSummaryList" type="List">
                <description>Summary of quantities of assets received (produced) by productId.</description>
                <parameter name="receiptSummary" type="Map"/>
            </parameter>

            <parameter name="equipmentList" type="List"><parameter name="equipment" type="Map"/></parameter>
            <parameter name="weapdList" type="List">
                <description>List of WorkEffortAndPartyDetail values.</description>
                <parameter name="weapd" type="Map"/>
            </parameter>
        </out-parameters>
        <actions>
            <!-- The Production Run WorkEffort -->
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/>

            <entity-find entity-name="moqui.entity.EntityAuditLog" list="statusHistoryList">
                <econdition field-name="changedEntityName" value="mantle.work.effort.WorkEffort"/>
                <econdition field-name="changedFieldName" value="statusId"/>
                <econdition field-name="pkPrimaryValue" from="workEffortId"/>
                <order-by field-name="changedDate"/>
            </entity-find>

            <!-- Line and Warehouse Facilities -->
            <entity-find-related-one value-field="workEffort" relationship-name="mantle.facility.Facility" to-value-field="lineFacility"/>
            <entity-find-related-one value-field="lineFacility" relationship-name="Parent#mantle.facility.Facility" to-value-field="warehouseFacility"/>
            <set field="currentFacilityIdList" from="[lineFacility.facilityId]"/>
            <script>if (warehouseFacility) currentFacilityIdList.add(warehouseFacility.facilityId)</script>
            <!-- use the warehouse for inventory unless there is no warehouse, then use the line (the direct facility on the run) -->
            <set field="inventoryFacilityId" from="warehouseFacility.facilityId ?: lineFacility.facilityId"/>
            <set field="inventoryFacility" from="warehouseFacility ?: lineFacility"/>

            <!-- Products to consume and produce -->
            <entity-find entity-name="mantle.work.effort.WorkEffortProductDetail" list="allProdList">
                <date-filter/><econdition field-name="workEffortId"/><order-by field-name="productName"/></entity-find>
            <filter-map-list list="allProdList" to-list="consumeList"><field-map field-name="typeEnumId" value="WeptConsume"/></filter-map-list>
            <filter-map-list list="allProdList" to-list="produceList"><field-map field-name="typeEnumId" value="WeptProduce"/></filter-map-list>
            <set field="consumeProductIdList" from="consumeList?.productId ?: []"/>
            <set field="produceProductIdList" from="produceList?.productId ?: []"/>
            <set field="combinedProductIdList" from="consumeProductIdList + produceProductIdList"/>

            <if condition="combinedProductIdList">
                <entity-find entity-name="mantle.product.asset.AssetSummaryView" list="assetSummaryList">
                    <econdition field-name="productId" operator="in" from="combinedProductIdList"/>
                    <econdition field-name="facilityId" from="inventoryFacilityId"/>
                    <select-field field-name="productId"/>
                    <select-field field-name="availableToPromiseTotal"/><select-field field-name="quantityOnHandTotal"/>
                </entity-find>
            </if>

            <entity-find entity-name="mantle.product.issuance.AssetIssuanceSummary" list="issuanceSummaryList">
                <econdition field-name="workEffortId"/><select-field field-name="productId"/>
                <select-field field-name="quantity"/></entity-find>
            <entity-find entity-name="mantle.product.receipt.AssetReceiptSummary" list="receiptSummaryList">
                <econdition field-name="workEffortId"/><select-field field-name="productId"/>
                <select-field field-name="quantityAccepted"/></entity-find>

            <!-- Equipment -->
            <entity-find entity-name="mantle.work.effort.WorkEffortAssetAndAssign" list="equipmentList">
                <date-filter/><econdition field-name="workEffortId"/><order-by field-name="assetName"/></entity-find>

            <!-- Party Assignments -->
            <entity-find entity-name="mantle.work.effort.WorkEffortAndPartyDetail" list="weapdList">
                <date-filter/><econdition field-name="workEffortId"/><order-by field-name="firstName,lastName,organizationName"/></entity-find>
        </actions>
    </service>

    <service verb="get" noun="ProductionRunProduceConsumeDetail">
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="excludeWithMatchingConsume" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="produceBomDetailList" type="List"><parameter name="produceBomDetailMap" type="Map">
                <parameter name="productId"/>
                <parameter name="workEffortProductDetail" type="Map"/>
                <parameter name="estimatedQuantity" type="BigDecimal"/>
                <parameter name="bomDetailList" type="List"><parameter name="bomDetailMap" type="Map">
                    <parameter name="bomQuantity" type="BigDecimal"/>
                    <parameter name="productIdSet" type="Set"><parameter name="productId"/></parameter>
                    <parameter name="estConsumeQuantity" type="BigDecimal"/>
                    <parameter name="quantityNeeded" type="BigDecimal"/>
                    <parameter name="quantityRemaining" type="BigDecimal"/>
                </parameter></parameter>
            </parameter></parameter>
            <parameter name="consumeQuantityRemainingMap" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.work.effort.WorkEffortProductDetail" list="allProdList">
                <date-filter/><econdition field-name="workEffortId"/><order-by field-name="productName"/></entity-find>
            <filter-map-list list="allProdList" to-list="consumeList"><field-map field-name="typeEnumId" value="WeptConsume"/></filter-map-list>
            <filter-map-list list="allProdList" to-list="produceList"><field-map field-name="typeEnumId" value="WeptProduce"/></filter-map-list>

            <!-- get a total by productId for the consume products, reduce that quantity for each produce product record to get total count -->
            <set field="consumeQuantityRemainingMap" from="[:]"/>
            <iterate list="consumeList" entry="consumeMap">
                <script>addToBigDecimalInMap(consumeMap.productId, consumeMap.estimatedQuantity, consumeQuantityRemainingMap)</script></iterate>


            <set field="produceBomDetailList" from="[]"/>
            <iterate list="produceList" entry="produceWepd">
                <service-call name="mantle.work.ManufacturingServices.get#ProductBomDetail"
                        in-map="[productId:produceWepd.productId]" out-map="bomDetOut"/>

                <set field="allQuantitiesMatch" from="true"/>
                <iterate list="bomDetOut.bomDetailList" entry="bomDetailMap">
                    <set field="estConsumeQuantity" from="0"/>
                    <iterate list="bomDetailMap.productIdSet" entry="bomProductId">
                        <script>estConsumeQuantity += (consumeQuantityRemainingMap[bomProductId] ?: 0)</script></iterate>

                    <set field="bomDetailMap.quantityNeeded" from="(bomDetailMap.bomQuantity ?: 1) * (produceWepd.estimatedQuantity ?: 0)"/>

                    <!-- <log level="warn" message="========= Produce ${produceWepd.productId}: quantityNeeded=${bomDetailMap.quantityNeeded}, estConsumeQuantity=${estConsumeQuantity}, consume(s) ${bomDetailMap.productIdSet}"/> -->

                    <!-- only use up to quantityNeeded from quantity consumed for product(s) -->
                    <if condition="bomDetailMap.quantityNeeded &lt; estConsumeQuantity">
                        <set field="estConsumeQuantity" from="bomDetailMap.quantityNeeded"/></if>

                    <!-- reduce consumeQuantityRemainingMap entry(ies) by estConsumeQuantity -->
                    <set field="consumeReduceRemaining" from="estConsumeQuantity"/>
                    <iterate list="bomDetailMap.productIdSet" entry="bomProductId">
                        <set field="curReduce" from="(consumeQuantityRemainingMap[bomProductId] ?: 0) &gt; consumeReduceRemaining ? consumeReduceRemaining : (consumeQuantityRemainingMap[bomProductId] ?: 0)"/>
                        <set field="consumeReduceRemaining" from="consumeReduceRemaining - curReduce"/>
                        <script>addToBigDecimalInMap(bomProductId, -curReduce, consumeQuantityRemainingMap)</script>
                        <if condition="consumeReduceRemaining == 0"><break/></if>
                    </iterate>

                    <set field="bomDetailMap.estConsumeQuantity" from="estConsumeQuantity"/>
                    <set field="bomDetailMap.quantityRemaining" from="bomDetailMap.quantityNeeded - estConsumeQuantity"/>
                    <if condition="bomDetailMap.quantityRemaining != 0"><set field="allQuantitiesMatch" from="false"/></if>
                </iterate>

                <script>if (allQuantitiesMatch &amp;&amp; excludeWithMatchingConsume) continue</script>

                <script>produceBomDetailList.add([productId:produceWepd.productId, workEffortProductDetail:produceWepd,
                                                  estimatedQuantity:produceWepd.estimatedQuantity,
                                                  bomDetailList:bomDetOut.bomDetailList])</script>
            </iterate>

            <!-- clean out consumeQuantityRemainingMap -->
            <iterate list="new ArrayList(consumeQuantityRemainingMap.keySet())" entry="curProductId">
                <script>if (consumeQuantityRemainingMap[curProductId] == 0) consumeQuantityRemainingMap.remove(curProductId)</script></iterate>
        </actions>
    </service>
    
    <service verb="get" noun="ProductBomDetail">
        <description>Given a Product to Produce in a Production Run find the BOM associated products (PatMfgBom) and if
            an associated product is a variant of another include the virtual for it too (ie allow either the virtual or
            variant to be consumed in the run). If a Product to Produce is a variant of a virtual Product and it has no
            BOM associated products, allow the product it is a variant of to take place of the BOM associations as a
            production run may involve sorting inventory into its various variants.</description>
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="produceQuantity" default="1.0" type="BigDecimal"/>
        </in-parameters>
        <out-parameters>
            <parameter name="bomDetailList" type="List"><parameter name="bomDetailMap" type="Map">
                <parameter name="bomQuantity" type="BigDecimal"/>
                <parameter name="productIdSet" type="Set"><parameter name="productId"/></parameter>
            </parameter></parameter>
        </out-parameters>
        <actions>
            <!-- BOM assoc is from Product to Produce and to its various Products to Consume -->
            <entity-find entity-name="mantle.product.ProductAssoc" list="bomAssocList" cache="true">
                <econdition field-name="productId"/>
                <econdition field-name="productAssocTypeEnumId" value="PatMfgBom"/>
                <order-by field-name="sequenceNum,toProductId"/>
            </entity-find>
            <set field="bomDetailList" from="[]"/>
            <iterate list="bomAssocList" entry="bomAssoc">
                <set field="productIdSet" from="new HashSet([bomAssoc.toProductId])"/>

                <!-- see if the associated product is a variant of anything, if so include that too -->
                <!-- Variant assoc is from virtual to variant, so search by to product -->
                <entity-find entity-name="mantle.product.ProductAssoc" list="variantAssocList" cache="true">
                    <econdition field-name="toProductId" from="bomAssoc.toProductId"/>
                    <econdition field-name="productAssocTypeEnumId" value="PatVariant"/>
                    <order-by field-name="sequenceNum,productId"/>
                </entity-find>
                <iterate list="variantAssocList" entry="variantAssoc"><script>productIdSet.add(variantAssoc.productId)</script></iterate>

                <script>bomDetailList.add([bomQuantity:(bomAssoc.quantity ?: 1) * produceQuantity, productIdSet:productIdSet])</script>
            </iterate>

            <!-- no BOM? also allow variant assoc for sorting setups -->
            <if condition="!bomDetailList">
                <entity-find entity-name="mantle.product.ProductAssoc" list="varAssocList" cache="true">
                    <econdition field-name="toProductId" from="productId"/>
                    <econdition field-name="productAssocTypeEnumId" value="PatVariant"/>
                    <order-by field-name="sequenceNum,productId"/>
                </entity-find>
                <set field="bomDetailList" from="[]"/>
                <!-- should generally be just one, but iterate just in case -->
                <iterate list="varAssocList" entry="varAssoc">
                    <set field="productIdSet" from="new HashSet([varAssoc.productId])"/>
                    <script>bomDetailList.add([bomQuantity:1 * produceQuantity, productIdSet:productIdSet])</script>
                </iterate>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ProductionRun">
        <in-parameters>
            <auto-parameters entity-name="mantle.work.effort.WorkEffort" include="nonpk"/>
            <parameter name="workEffortTypeEnumId" default-value="WetEvent"/>
            <parameter name="purposeEnumId" default-value="WepProductionRun"/>
            <parameter name="statusId" default-value="WeInPlanning"/>
            <parameter name="timeUomId" default-value="TF_hr"/>

            <parameter name="facilityId" required="true"><description>The Production Line Facility to use, or the Warehouse where done.</description></parameter>

            <parameter name="consumeProductId"/>
            <parameter name="consumeEstimatedQuantity" type="BigDecimal"/>
            <parameter name="produceProductId"/>
            <parameter name="produceEstimatedQuantity" type="BigDecimal"/>

            <parameter name="originFacilityId"/>
        </in-parameters>
        <out-parameters><parameter name="workEffortId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.work.effort.WorkEffort" in-map="context" out-map="context"/>

            <if condition="consumeProductId">
                <service-call name="create#mantle.work.effort.WorkEffortProduct"
                        in-map="[workEffortId:workEffortId, productId:consumeProductId, typeEnumId:'WeptConsume',
                            fromDate:ec.user.nowTimestamp, estimatedQuantity:consumeEstimatedQuantity]"/>
            </if>
            <if condition="produceProductId">
                <service-call name="mantle.work.ManufacturingServices.get#ProductBomDetail"
                        in-map="[productId:produceProductId, produceQuantity:produceEstimatedQuantity]" out-map="bomOutMap"/>
                <iterate list="bomOutMap.bomDetailList" entry="bom">
                    <if condition="consumeProductId != bom.productIdSet[0]">
                        <service-call name="create#mantle.work.effort.WorkEffortProduct"
                                in-map="[workEffortId:workEffortId, productId:bom.productIdSet[0], typeEnumId:'WeptConsume',
                                    fromDate:ec.user.nowTimestamp, estimatedQuantity:bom.bomQuantity]"/>
                    </if>
                </iterate>

                <service-call name="create#mantle.work.effort.WorkEffortProduct"
                        in-map="[workEffortId:workEffortId, productId:produceProductId, typeEnumId:'WeptProduce',
                            fromDate:ec.user.nowTimestamp, estimatedQuantity:produceEstimatedQuantity]"/>
            </if>
            <if condition="originFacilityId">
                <service-call name="create#mantle.work.effort.WorkEffortFacility"
                        in-map="[workEffortId:workEffortId, facilityId:originFacilityId, typeEnumId:'WeftOrigin']"/>
            </if>
        </actions>
    </service>

    <service verb="get" noun="ProductionRunPickInfo">
        <description>Get information for a production run pick sheet.</description>
        <in-parameters>
            <parameter name="workEffortId" required="true"/>
            <parameter name="locationOrderBy" default-value="facilityId,areaId,aisleId,sectionId,levelId,positionId"/>
            <parameter name="productOrderBy" default-value="pseudoId,productName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="workEffort" type="Map"/>
            <parameter name="originFacility" type="Map"/>
            <parameter name="destinationFacility" type="Map"/>

            <parameter name="lineFacility" type="Map"/>
            <parameter name="warehouseFacility" type="Map"/>
            <parameter name="inventoryFacilityId"/>
            <parameter name="inventoryFacility" type="Map"/>
            <parameter name="consumeProductList" type="List"><parameter name="productItem" type="Map"/></parameter>
            <parameter name="consumeProductIdList" type="List"><parameter name="productId"/></parameter>
            <parameter name="equipmentList" type="List"><parameter name="equipment" type="Map"/></parameter>

            <parameter name="locationInfoList" type="List">
                <description>
                    locationInfoList is a  List of Maps with:
                      - FacilityLocation fields [facilityId, locationTypeEnumId, areaId, aisleId, sectionId, levelId, positionId]
                      - locationTypeEnum
                      - GeoPoint fields [latitude, longitude, elevation, elevationUomId]
                      - productInfoList - List of Maps with:
                        - Product fields (all fields from entity)
                        - quantity
                </description>
                <parameter name="locationInfo" type="Map"/>
            </parameter>
            <parameter name="productInfoList" type="List">
                <description>
                    productInfoList is a List of Maps with:
                      - Product fields (all fields from entity)
                      - quantity
                      - locationInfoList
                        - FacilityLocation fields [facilityId, locationTypeEnumId, areaId, aisleId, sectionId, levelId, positionId]
                        - locationTypeEnum
                        - GeoPoint fields [latitude, longitude, elevation, elevationUomId]
                        - quantity
                </description>
                <parameter name="productInfo" type="Map"/>
            </parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/>

                    <!-- Line and Warehouse Facilities -->
            <entity-find-related-one value-field="workEffort" relationship-name="mantle.facility.Facility" to-value-field="lineFacility"/>
            <entity-find-related-one value-field="lineFacility" relationship-name="Parent#mantle.facility.Facility" to-value-field="warehouseFacility"/>
            <!-- use the warehouse for inventory unless there is no warehouse, then use the line (the direct facility on the run) -->
            <set field="inventoryFacilityId" from="warehouseFacility?.facilityId ?: lineFacility?.facilityId"/>
            <set field="inventoryFacility" from="warehouseFacility ?: lineFacility"/>

            <entity-find entity-name="mantle.work.effort.WorkEffortAssetAndAssign" list="equipmentList">
                <date-filter/><econdition field-name="workEffortId"/><order-by field-name="assetName"/></entity-find>

            <!-- Get the picklist info by product, by location -->

            <set field="productInfoList" from="[]"/>
            <set field="locationInfoMap" from="[:]"/>

            <!-- TODO from here down -->
            <entity-find entity-name="mantle.work.effort.WorkEffortProduct" list="consumeProductList">
                <date-filter/><econdition field-name="workEffortId"/>
                <econdition field-name="typeEnumId" value="WeptConsume"/>
            </entity-find>
            <set field="consumeProductIdList" from="consumeProductList?.productId ?: []"/>

            <iterate list="consumeProductList" entry="consumeItem">
                <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                    <field-map field-name="productId" from="consumeItem.productId"/></entity-find-one>

                <set field="productLocationInfoMap" from="[:]"/>

                <if condition="!consumeItem.estimatedQuantity"><continue/></if>

                <!-- find assets more generally for the product, like the reservation algorithm -->
                <entity-find entity-name="mantle.product.asset.Asset" list="assetList">
                    <econdition field-name="productId" from="consumeItem.productId"/>
                    <econdition field-name="statusId" value="AstAvailable"/>
                    <econdition field-name="availableToPromiseTotal" operator="greater" from="0"/>
                    <econdition field-name="facilityId" from="inventoryFacilityId" ignore-if-empty="true"/>
                    <order-by field-name="receivedDate"/><!-- Ascending by receivedDate, FIFO -->
                </entity-find>

                <set field="curQuantityNotHandled" from="consumeItem.estimatedQuantity"/>
                <iterate list="assetList" entry="asset">
                    <set field="assetLocKey" from="[facilityId:asset.facilityId, locationSeqId:asset.locationSeqId]"/>
                    <entity-find-one entity-name="mantle.facility.FacilityLocation" value-field="facLoc">
                        <field-map field-name="facilityId" from="asset.facilityId"/>
                        <field-map field-name="locationSeqId" from="asset.locationSeqId"/>
                    </entity-find-one>
                    <set field="locationTypeEnum" from="facLoc?.'FacilityLocationType#moqui.basic.Enumeration'"/>

                    <set field="locationInfo" from="locationInfoMap.get(assetLocKey)"/>
                    <if condition="!locationInfo">
                        <set field="locationInfo" from="[productInfoMap:[:], locationTypeEnum:locationTypeEnum]"/>
                        <script>if (facLoc) locationInfo.putAll(facLoc)</script>
                        <if condition="facLoc?.geoPointId">
                            <entity-find-one entity-name="moqui.basic.GeoPoint" value-field="geoPoint">
                                <field-map field-name="facLoc.geoPointId"/></entity-find-one>
                            <script>if (geoPoint) locationInfo.putAll(geoPoint)</script>
                        </if>
                        <script>locationInfoMap.put(assetLocKey, locationInfo)</script>
                    </if>

                    <set field="productLocationInfo" from="productLocationInfoMap.get(assetLocKey)"/>
                    <if condition="!productLocationInfo">
                        <set field="productLocationInfo" from="[locationTypeEnum:locationTypeEnum]"/>
                        <script>if (facLoc) productLocationInfo.putAll(facLoc)</script>
                        <if condition="facLoc?.geoPointId">
                            <entity-find-one entity-name="moqui.basic.GeoPoint" value-field="geoPoint">
                                <field-map field-name="facLoc.geoPointId"/></entity-find-one>
                            <script>if (geoPoint) productLocationInfo.putAll(geoPoint)</script>
                        </if>
                        <script>productLocationInfoMap.put(assetLocKey, productLocationInfo)</script>
                    </if>

                    <set field="quantityToAdd" from="curQuantityNotHandled > asset.availableToPromiseTotal ? asset.availableToPromiseTotal : curQuantityNotHandled"/>

                    <!-- handle quantity for locationInfoList -->
                    <set field="productInfo" from="locationInfo.productInfoMap.get(consumeItem.productId)"/>
                    <if condition="!productInfo"><script>
                        productInfo = [:]
                        productInfo.putAll(product)
                        locationInfo.productInfoMap.put(consumeItem.productId, productInfo)
                    </script></if>
                    <script>addToBigDecimalInMap("quantity", quantityToAdd, productInfo)</script>

                    <!-- handle quantity for productInfoList -->
                    <script>addToBigDecimalInMap("quantity", quantityToAdd, productLocationInfo)</script>
                    <set field="curQuantityNotHandled" from="curQuantityNotHandled - quantityToAdd"/>
                    <if condition="curQuantityNotHandled == 0"><break/></if>
                </iterate>

                <set field="productLocationInfoList" from="new ArrayList(productLocationInfoMap.values())"/>
                <order-map-list list="productLocationInfoList"><order-by field-name="${locationOrderBy}"/></order-map-list>

                <script>
                    productInfo = [locationInfoList:productLocationInfoList,
                                   productLocationInfoMap:productLocationInfoMap,
                                   quantity:consumeItem.estimatedQuantity]
                    productInfo.putAll(product)
                    productInfoList.add(productInfo)
                </script>
            </iterate>

            <!-- go through locationInfoMap and create productInfoList from productInfoMap, then sort -->
            <iterate list="locationInfoMap" entry="locationInfo" key="assetLocKey">
                <set field="locationInfo.productInfoList" from="new ArrayList(locationInfo.productInfoMap.values())"/>
                <order-map-list list="locationInfo.productInfoList"><order-by field-name="${productOrderBy}"/></order-map-list>
            </iterate>
            <set field="locationInfoList" from="new ArrayList(locationInfoMap.values())"/>
            <order-map-list list="locationInfoList"><order-by field-name="${locationOrderBy}"/></order-map-list>

            <!-- order productInfoList, all that is needed at this point -->
            <order-map-list list="productInfoList"><order-by field-name="${productOrderBy}"/></order-map-list>
        </actions>
    </service>
</services>
