<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <!-- ========================== -->
    <!-- Tax Calculation Interfaces -->
    <!-- ========================== -->

    <service verb="calculate" noun="SalesTax" type="interface">
        <in-parameters>
            <parameter name="referenceId"><description>This is the orderId:orderPartSeqId or invoiceId, if available.</description></parameter>
            <parameter name="saveResults" type="Boolean"><description>If the tax service supports saving calculated
                taxes for reporting and filing with authorities set this flag when you want the results saved (this is
                usually done for invoices).</description></parameter>
            <parameter name="taxGatewayConfigId" required="true"/>
            <parameter name="customerPartyId"/>
            <parameter name="organizationPartyId"/>
            <parameter name="originAddressContactMechId"/>
            <parameter name="destinationAddressContactMechId"/>
            <parameter name="items" type="List"><parameter name="itemEntry" type="Map">
                <parameter name="itemId"/>
                <parameter name="itemTypeEnumId"/>
                <parameter name="quantity" type="BigDecimal"/>
                <parameter name="unitAmount" type="BigDecimal"/>
                <parameter name="productId"/>
                <parameter name="taxCode"/>
                <!-- discounts will be another item of type ItemDiscount, so don't do this for now:
                <parameter name="discounts" type="List"><parameter name="discountEntry" type="Map">
                    <parameter name="discountAmount" type="BigDecimal"/>
                    <parameter name="discountCode"/>
                </parameter></parameter>
                -->
                <!-- these may not be needed, we're doing one call per OrderPart anyway:
                <parameter name="originAddressContactMechId"/>
                <parameter name="destinationAddressContactMechId"/>
                -->
            </parameter></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="taxResults" type="List"><parameter name="taxResultEntry" type="Map">
                <parameter name="itemId"/>
                <parameter name="taxAmount" type="BigDecimal"/>
                <parameter name="taxRate" type="BigDecimal"/>
                <parameter name="geoName"/>
                <parameter name="authorityName"/>
                <parameter name="taxName"/>
            </parameter></parameter>
        </out-parameters>
    </service>

    <!-- ======================== -->
    <!-- Tax Calculation Services -->
    <!-- ======================== -->

    <service verb="calculate" noun="OrderSalesTax">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-related-one value-field="orderHeader" relationship-name="mantle.product.store.ProductStore"
                    to-value-field="productStore" cache="true"/>
            <entity-find-related-one value-field="productStore" relationship-name="mantle.other.tax.TaxGatewayConfig"
                    to-value-field="taxGatewayConfig" cache="true"/>
            <if condition="taxGatewayConfig == null">
                <return error="true" message="Cannot calculate tax for Order [${orderId}], not TaxGatewayConfig found (store: ${productStore?.productStoreId})"/>
            </if>

            <!-- if order part has tax (ItemSalesTax or ItemVatTax) items clear them out first -->
            <entity-delete-by-condition entity-name="mantle.order.OrderItem">
                <econdition field-name="orderId"/>
                <econdition field-name="itemTypeEnumId" operator="in" value="ItemSalesTax,ItemVatTax"/>
            </entity-delete-by-condition>

            <!-- build the parameters for the calculate#SalesTax interface -->
            <set field="saveResults" from="false"/><!-- don't save result for order, only for invoice -->
            <set field="taxGatewayConfigId" from="taxGatewayConfig.taxGatewayConfigId"/>
            <!-- get the inventory facility's PostalShippingOrigin contactMechId -->
            <entity-find entity-name="mantle.facility.FacilityContactMech" list="fromFcmList" cache="true">
                <date-filter/>
                <econdition field-name="facilityId" from="productStore.inventoryFacilityId"/>
                <econdition field-name="contactMechPurposeId" value="PostalShippingOrigin"/>
            </entity-find>
            <set field="fromFcm" from="fromFcmList?.first"/>

            <!-- loop through the OrderParts, or only single OrderPart if orderPartSeqId is specified -->
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId" ignore-if-empty="true"/>
            </entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <set field="referenceId" value="${orderId}:${orderPart.orderPartSeqId}"/>
                <set field="customerPartyId" from="orderPart.customerPartyId"/>
                <set field="organizationPartyId" from="productStore.organizationPartyId"/>
                <set field="originAddressContactMechId" from="fromFcm?.contactMechId"/>
                <set field="destinationAddressContactMechId" from="orderPart.postalContactMechId"/>

                <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                    <econdition field-name="orderId"/><econdition field-name="orderPartSeqId" from="orderPart.orderPartSeqId"/>
                </entity-find>
                <set field="items" from="[]"/>
                <iterate list="orderItemList" entry="orderItem">
                    <entity-find-related-one value-field="orderItem" relationship-name="mantle.product.Product"
                            to-value-field="product"/>
                    <if condition="!product?.taxable || product?.taxable == 'Y'">
                        <script>items.add([itemId:orderItem.orderItemSeqId, itemTypeEnumId:orderItem.itemTypeEnumId,
                                quantity:orderItem.quantity, unitAmount:orderItem.unitAmount,
                                productId:orderItem.productId, taxCode:product?.taxCode])</script>
                    </if>
                </iterate>

                <!-- call gateway (could be local) service to calculate shipping charges -->
                <service-call name="${taxGatewayConfig.calculateServiceName}" in-map="context" out-map="context"/>

                <!-- TODO: add tax child OrderItems to db -->
            </iterate>
        </actions>
    </service>
    <service verb="calculate" noun="InvoiceSalesTax">
        <in-parameters><parameter name="invoiceId" required="true"/></in-parameters>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>

    <!-- ======================= -->
    <!-- Local Sales Tax Gateway -->
    <!-- ======================= -->
    
    <service verb="calculate" noun="SalesTaxLocal">
        <implements service="mantle.other.TaxServices.calculate#SalesTax"/>
        <actions>
            <log level="info" message="Called calculate#SalesTaxLocal (not yet implemented) with context:\n ${context}"/>
            <!-- TODO: implement this... -->
        </actions>
    </service>

    <!-- ====================== -->
    <!-- Tax Statement Services -->
    <!-- ====================== -->

    <service verb="create" noun="TaxStatement">
        <in-parameters>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="partyId" required="true"/>
            <parameter name="taxAuthorityId" required="true"/>
            <parameter name="formId" required="true"/>
            <parameter name="formMap" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="formResponseId"/>
            <parameter name="taxStatementId"/>
        </out-parameters>
        <actions>
            <!-- if no formMap at least get payer and recipient basic info -->
            <if condition="!formMap &amp;&amp; formId == 'UsaIrs1099Misc'">
                <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
                <service-call name="mantle.other.TaxServices.get#UsaIrs1099MiscFormData" out-map="context"
                        in-map="[recipientPartyId:partyId, payerPartyId:timePeriod.partyId]"/>
            </if>
            <!-- create FormResponse -->
            <service-call name="org.moqui.impl.ScreenServices.create#FormResponse" out-map="context"
                    in-map="[formId:formId, responseMap:formMap]"/>
            <!-- create TaxStatement record -->
            <service-call name="create#mantle.other.tax.TaxStatement" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="delete" noun="TaxStatement">
        <in-parameters><parameter name="taxStatementId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.other.tax.TaxStatement" value-field="taxStatement"/>
            <if condition="taxStatement == null"><return message="Tax Statement ${taxStatementId} not found"/></if>
            <entity-delete value-field="taxStatement"/>
            <service-call name="org.moqui.impl.ScreenServices.delete#FormResponse" out-map="context"
                    in-map="[formResponseId:taxStatement.formResponseId]"/>
        </actions>
    </service>


    <service verb="create" noun="AllVendor1099MiscStatements">
        <in-parameters>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="taxAuthorityId" default-value="UsaIrs"/>
            <parameter name="formId" default-value="UsaIrs1099Misc"/>
            <parameter name="amountThreshold" type="BigDecimal" default="600"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>

            <set field="fromTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.fromDate} 00:00:00.000&quot;, '')"/>
            <set field="thruTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.thruDate} 23:59:59.999&quot;, '')"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceSummary" list="invoiceSummaryList">
                <econdition field-name="toPartyId" from="timePeriod.partyId"/>
                <!-- NOTE: should ever include InvoiceBilledThrough? -->
                <econdition field-name="statusId" operator="in" value="InvoiceApproved,InvoicePmtSent"/>
                <!-- Payroll invoices are handled elsewhere, Tax invoices don't need 1099s -->
                <econdition field-name="invoiceTypeEnumId" operator="not-in" value="InvoicePayroll,InvoiceTax"/>
                <econdition field-name="invoiceDate" operator="greater-equals" from="fromTimestamp"/>
                <econdition field-name="invoiceDate" operator="less-equals" from="thruTimestamp"/>
                <having-econditions>
                    <econdition field-name="grandTotal" operator="greater-equals" from="amountThreshold"/>
                </having-econditions>
                <select-field field-name="fromPartyId"/>
            </entity-find>

            <iterate list="invoiceSummaryList" entry="invoiceSummary">
                <service-call name="mantle.other.TaxServices.create#Vendor1099MiscStatement"
                        in-map="[timePeriodId:timePeriodId, partyId:invoiceSummary.fromPartyId,
                            taxAuthorityId:taxAuthorityId, formId:formId]"/>
            </iterate>
        </actions>
    </service>
    <service verb="create" noun="Vendor1099MiscStatement">
        <in-parameters>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="partyId" required="true"><description>The vendor Party, ie matches Invoice.fromPartyId</description></parameter>
            <parameter name="taxAuthorityId" default-value="UsaIrs"/>
            <parameter name="formId" default-value="UsaIrs1099Misc"/>
        </in-parameters>
        <out-parameters>
            <parameter name="taxStatementId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>

            <!-- split out various item types instead of all in otherIncome -->
            <set field="rentTypes" from="['ItemExpLeaseVehicle', 'ItemExpLeaseEquip', 'ItemExpLeaseRealEst', 'ItemExpLeaseOther']"/>
            <set field="royaltyTypes" from="['ItemExpRoyalties']"/>
            <set field="medicalHealthTypes" from="['ItemExpMedical', 'ItemExpInsHealth']"/>
            <set field="nonEmpCompTypes" from="['ItemExpCommissionFee', 'ItemExpServAccount', 'ItemExpServLabor']"/>
            <set field="attorneyTypes" from="['ItemExpServLegal']"/>
            <!-- <set field="nonOtherTypes" from="rentTypes + royaltyTypes + medicalHealthTypes + attorneyTypes + nonEmpCompTypes"/> -->
            <!-- NOTE: consider all other types otherIncome -->

            <set field="fromTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.fromDate} 00:00:00.000&quot;, '')"/>
            <set field="thruTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.thruDate} 23:59:59.999&quot;, '')"/>
            <entity-find entity-name="mantle.account.invoice.InvoiceItemSummary" list="invoiceItemSummaryList">
                <econdition field-name="fromPartyId" from="partyId"/>
                <econdition field-name="toPartyId" from="timePeriod.partyId"/>
                <!-- NOTE: should ever include InvoiceBilledThrough? -->
                <econdition field-name="statusId" operator="in" value="InvoiceApproved,InvoicePmtSent"/>
                <!-- Payroll invoices are handled elsewhere, Tax invoices don't need 1099s -->
                <econdition field-name="invoiceTypeEnumId" operator="not-in" value="InvoicePayroll,InvoiceTax"/>
                <econdition field-name="invoiceDate" operator="greater-equals" from="fromTimestamp"/>
                <econdition field-name="invoiceDate" operator="less-equals" from="thruTimestamp"/>
                <select-field field-name="itemsTotal"/><select-field field-name="itemTypeEnumId"/>
            </entity-find>

            <if condition="!invoiceItemSummaryList"><return message="No invoices found in period ${timePeriodId} for party ${partyId}"/></if>

            <set field="rents" from="0"/><set field="royalties" from="0"/>
            <set field="medicalAndHealthCarePayments" from="0"/><set field="nonemployeeCompensation" from="0"/>
            <set field="cropInsuranceProceeds" from="0"/><set field="grossProceedsToAttorney" from="0"/>
            <set field="otherIncome" from="0"/>
            <iterate list="invoiceItemSummaryList" entry="invoiceItemSummary">
                <if condition="rentTypes.contains(invoiceItemSummary.itemTypeEnumId)">
                    <then><set field="rents" from="rents + invoiceItemSummary.itemsTotal"/></then>
                    <else-if condition="royaltyTypes.contains(invoiceItemSummary.itemTypeEnumId)">
                        <set field="royalties" from="royalties + invoiceItemSummary.itemsTotal"/></else-if>
                    <else-if condition="medicalHealthTypes.contains(invoiceItemSummary.itemTypeEnumId)">
                        <set field="medicalAndHealthCarePayments" from="medicalAndHealthCarePayments + invoiceItemSummary.itemsTotal"/></else-if>
                    <else-if condition="nonEmpCompTypes.contains(invoiceItemSummary.itemTypeEnumId)">
                        <set field="nonemployeeCompensation" from="nonemployeeCompensation + invoiceItemSummary.itemsTotal"/></else-if>
                    <else-if condition="attorneyTypes.contains(invoiceItemSummary.itemTypeEnumId)">
                        <set field="grossProceedsToAttorney" from="grossProceedsToAttorney + invoiceItemSummary.itemsTotal"/></else-if>
                    <else><set field="otherIncome" from="otherIncome + invoiceItemSummary.itemsTotal"/></else>
                </if>
            </iterate>

            <service-call name="mantle.other.TaxServices.get#UsaIrs1099MiscFormData" out-map="context"
                    in-map="context + [recipientPartyId:partyId, payerPartyId:timePeriod.partyId]"/>

            <service-call name="mantle.other.TaxServices.create#TaxStatement" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="generate" noun="Efw2File">
        <in-parameters>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="payerPartyId" required="true"/>
            <parameter name="submitterPartyId" required="true"/>
            <parameter name="softwareVendorCode" default=""/> <!-- 4 digit code if registered with nactp.org, blank otherwise -->
            <parameter name="resubWfid" default=""/> <!-- If resubmission, the WFID issued by SSA -->
            <parameter name="preparerCode" default="L"/>
            <!-- TODO: allow selective employers or all? -->
            <!-- TODO: allow selective employees or all? -->
        </in-parameters>
        <out-parameters>
            <parameter name="fileText"/>
        </out-parameters>
        <actions>
            <!--
                What character sets may I use?
                    * American Standard Code for Information Interchange-1 (ASCII-1) for BSO submitters.
                    * Extended Binary Coded Decimal Interchange Code (EBCDIC) or ASCII for EDT submitters.
                    * See Appendix D for character sets.
                Are there any restrictions concerning the number of records for an EFW2 file?
                    * If your organization files on behalf of multiple employers, include no more than 1 million RW Records
                        or 50,000 RE Records per submission.
                    * Following these guidelines will help to ensure that your wage data is processed in a timely manner.
                What is the length of each record?
                    * 512 bytes.
                What case letters must I use?
                    * Use alphabetic upper-case letters for all fields other than the “Contact E-Mail/Internet” field in the
                        RA Record and the “Employer Contact E-Mail/Internet” field in the RE Record (positions 446-485).
                    * For the "Contact E-Mail/Internet" field in the RA Record (positions 446 - 485) and in the
                        “Employer Contact E-Mail/Internet” RE Record (positions 279-318), use upper and/or lower case letters
                        as needed to show the exact electronic mail address.
                What rules do you have for alpha/numeric fields?
                    * Left justify and fill with blanks.
                    * Where the "field" shows "Blank," all positions must be blank, not zeros.
                What rules do you have for money fields?
                    * Must contain only numbers.
                    * No punctuation.
                    * No signed amounts (high order signed or low order signed).
                    * Include both dollars and cents with the decimal point assumed (example: $59.60 = 00000005960).
                    * Do not round to the nearest dollar (example: $5,500.99 = 00000550099).
                    * Right justify and zero fill to the left.
                    * Any money field that has no amount to be reported must be filled with zeros, not blanks.
                What rules do you have for reporting Wages, Tips, and Other Compensation and Income Tax Withheld?
                    * The tax jurisdiction code reported in position 220 of the RE Record tells SSA how to process the report.
                    * Note section 4.2.1 where US Territories and Protectorates have special places for Income:
                        - Puerto Rico (P)
                        - Virgin Islands (V)
                        - Guam (G)
                        - American Samoa (S)
                        - Northern Mariana Islands (N)
                What rules do you have for the format of the employee name?
                    * Enter the name exactly as shown on the individual's Social Security card.
                    * Must be submitted in the individual name fields:
                        - Employee First Name
                        - Employee Middle Name or Initial (if shown on Social Security card)
                        - Employee Last Name
                        - Suffix (if shown on Social Security card)
                    * Do not include any titles.
                What rules do you have for the Social Security Number (SSN)?
                    * Use the number shown on the original/replacement SSN card.
                    * Only numeric characters.
                    * Omit hyphens.
                    * May not begin with a 666 or 9.
                    * If there is no SSN available for the employee, enter zeros (0) in positions 3 - 11 of the RW Record, and
                        have your employee call 1-800-772-1213 or visit their local Social Security office to obtain an SSN.
            -->

            <!-- Create RA Submitter Record (Required) -->
            <!-- Loop Across Employers -->
                <!-- Create RE Employer Record (Required) -->
                <!-- Loop Across Employees -->
                    <!-- Create RW Employee Wage Record (Required) -->
                    <!-- Create RO Employee Wage Record (Optional) -->
                    <!-- Create RS State Wage Record (Optional) -->
                <!-- Create RT Total Record (Required) -->
                <!-- Create RU Total Record (Optional) -->
                <!-- Create RV State Total Record (Optional) -->
            <!-- Create RF Final Record (Required) -->

            <service-call name="mantle.other.TaxServices.get#PayerTaxInfo" in-map="[partyId:payerPartyId]" out-map="payer"/>
            <!-- Do we need an alternate service for the Submitter Tax Info? -->
            <service-call name="mantle.other.TaxServices.get#PayerTaxInfo" in-map="[partyId:submitterPartyId]" out-map="submitter"/>

            <service-call name="mantle.humanres.PayrollServices.get#TimePeriodEmployments"
                          in-map="[timePeriodId:timePeriodId, ignoreType:true]" out-map="context"/>

            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityValue
                ExecutionContext ec = context.ec

                List<StringBuilder> lines = []

                ////////////////////////////////////////////////////////////////////////////////
                // RA Submitter Record (Required)
                ////////////////////////////////////////////////////////////////////////////////
                StringBuilder raHeader = new StringBuilder(512)
                // Record Identifier (1-2, 2)
                raHeader.append("RA")
                // Submitter's Employer Identification Number (EIN) (3-11, 9)
                raHeader.append(take(submitter.ein.replaceAll("\\p{P}", "").padLeft(9, '0'), 9)) // Removes all punctuation
                // User Identification (User ID) (12-10, 8)
                raHeader.append(submitter?.uid?.toUpperCase()?.padRight(8, ' ')?.take(8))
                // Software Vendor Code (20-13, 4)
                raHeader.append(take(softwareVendorCode.padRight(4, ' '), 4))
                // Blank (24-28, 5)
                raHeader.append("     ")
                // Resub Indicator (29-29, 1) // 1 if being resubmitted, otherwise 0
                raHeader.append(resubWfid.trim().empty() ? "0" : "1")
                // Resub Wage File Identifier (WFID) (30-35, 6)
                raHeader.append(take(resubWfid.toUpperCase().padRight(6, ' '), 6))
                // Software Code (36-37, 2)
                raHeader.append(softwareVendorCode.empty() ? "98" : "99")

                //******************************************************************************
                // Company
                //******************************************************************************
                // Company Name (38-94, 57)
                raHeader.append(take(submitter.name.toUpperCase().padRight(57, ' '), 57)) // Fixme, which name?
                // Location Address (95-116, 22) (Attention, Suite, Room Number, etc.)
                raHeader.append(take(ADDR2.toUpperCase().padRight(22, ' '), 22)) // Fixme
                // Delivery Address (117-138, 22) (Street Number and Name or PO Box)
                raHeader.append(take(ADDR1.toUpperCase().padRight(22, ' '), 22)) // Fixme
                // City (139-160, 22)
                raHeader.append(take(CITY.toUpperCase().padRight(22, ' '), 22)) // Fixme
                // State Abbreviation (161-162, 2) Foreign Addresses fill with blanks
                raHeader.append(take(STATE.toUpperCase().padRight(2, ' '), 2)) // Fixme
                // Zip Code (163-167, 5) For a foreign address, fill with blanks
                raHeader.append(take(ZIP.toUpperCase().padRight(5, ' '), 5)) // Fixme
                // Zip Code Extension (168-171, 4) If not applicable, fill with blanks
                raHeader.append(take(ZIP_EXT.toUpperCase().padRight(4, ' '), 4)) // Fixme
                // Blank (172-176, 5)
                raHeader.append("     ");
                // Foreign State/Province (177-199, 23) If applicable, otherwise blank
                raHeader.append(take(FOREIGN.toUpperCase().padRight(23, ' '), 23)) // Fixme
                // Foreign Postal Code (200-214, 15)
                raHeader.append(take(FOREIGN_POSTAL_CODE.toUpperCase().padRight(15, ' '), 15)) // Fixme
                // Country Code (215-216, 2) If one of the following, fill with blanks:
                    // * One of the 50 States of the U.S.A.
                    // * District of Columbia
                    // * Military Post Office (MPO)
                    // * American Samoa
                    // * Guam
                    // * Northern Mariana Islands
                    // * Puerto Rico
                    // * Virgin Islands
                    // * Otherwise, enter the applicable Country Code (see Appendix G).
                raHeader.append(take(COUNTRY_CODE.toUpperCase().padRight(2, ' '), 2)) // Fixme

                //******************************************************************************
                // Submitter
                //******************************************************************************
                // Submitter Name (217-273, 57)
                raHeader.append(take(submitter.name.toUpperCase().padRight(57, ' '), 2))
                // Location Address (274-295, 22) (Attention, Suite, Room Number, etc.)
                raHeader.append(take(SUBMITTER_ADDR2.toUpperCase().padRight(22, ' '), 22)) // Fixme
                // Delivery Address (296-317, 22) (Street Number and Name or PO Box)
                raHeader.append(take(SUBMITTER_ADDR1.toUpperCase().padRight(22, ' '), 22)) // Fixme
                // City (318-339, 22)
                raHeader.append(take(SUBMITTER_CITY.toUpperCase().padRight(22, ' '), 22)) // Fixme
                // State Abbreviation (340-341, 2) Foreign Addresses fill with blanks
                raHeader.append(take(SUBMITTER_STATE.toUpperCase().padRight(2, ' '), 2)) // Fixme
                // Zip Code (342-346, 5) For a foreign address, fill with blanks
                raHeader.append(take(SUBMITTER_ZIP.toUpperCase().padRight(5, ' '), 5)) // Fixme
                // Zip Code Extension (347-350, 4) If not applicable, fill with blanks
                raHeader.append(take(SUBMITTER_ZIP_EXT.toUpperCase().padRight(4, ' '), 4)) // Fixme
                // Blank (351-355, 5)
                raHeader.append("     ");
                // Foreign State/Province (356-378, 23) If applicable, otherwise blank
                raHeader.append(take(SUBMITTER_FOREIGN.toUpperCase().padRight(23, ' '), 23)) // Fixme
                // Foreign Postal Code (379-393, 15)
                raHeader.append(take(SUBMITTER_FOREIGN_POSTAL_CODE.toUpperCase().padRight(15, ' '), 15)) // Fixme
                // Country Code (394-395, 2) If one of the following, fill with blanks:
                    // * One of the 50 States of the U.S.A.
                    // * District of Columbia
                    // * Military Post Office (MPO)
                    // * American Samoa
                    // * Guam
                    // * Northern Mariana Islands
                    // * Puerto Rico
                    // * Virgin Islands
                    // * Otherwise, enter the applicable Country Code (see Appendix G).
                raHeader.append(take(SUBMITTER_COUNTRY_CODE.toUpperCase().padRight(2, ' '), 2)) // Fixme
                // Contact Name (396-422, 27) Submitter Contact Name
                raHeader.append(take(SUBMITTER_CONTACT_NAME.toUpperCase().padRight(27, ' '), 2)) // Fixme
                // Contact Phone Number (423-437, 15) contact phone with numeric values only (including area code), left justify and blank fill
                raHeader.append(take(SUBMITTER_CONTACT_PHONE.replaceAll("\\p{P}", "").padRight(15, ' '), 15)) // Remove Punctuation; Fixme
                // Contact Phone Extension (438-442, 5), left justify and blank fill
                raHeader.append(take(SUBMITTER_CONTACT_PHONE_EXT.replaceAll("\\p{P}", "").padRight(5, ' '), 5)) // Remove Punctuation; Fixme
                // Blank (443-445, 3)
                raHeader.append("   ")
                // Contact E-Mail Internet (446-485, 40) Cannot be blank, can be mixed case
                raHeader.append(take(SUBMITTER_CONTACT_EMAIL.padRight(40, ' '), 40)) // Fixme
                // Blank (486-488, 3)
                raHeader.append("   ")
                // Contact Fax (489-498, 10) for US Only, includes area code
                raHeader.append(take(SUBMITTER_CONTACT_FAX.replaceAll("\\p{P}", "").padRight(10, ' '), 10)) // Remove Punctuation; Fixme
                // Blank (499-499, 1)
                raHeader.append(" ")

                // Preparer Code (500-500, 1)
                // Enter one of the following codes to indicate who prepared this file:
                //     * A (Accounting Firm)
                //     * L (Self-Prepared)
                //     * S (Service Bureau)
                //     * P (Parent Company)
                //     * O (Other)
                // Note: If more than one code applies, use the code that best describes who prepared this file.
                raHeader.append(take(preparerCode.toUpperCase().padRight(1, ' '), 1))
                // Blank (501-512, 12)
                raHeader.append("            ")

                lines.add(raHeader)

// Fixme: find employers
                for (Map employer in employerList) {
                    ////////////////////////////////////////////////////////////////////////////////
                    // RE Empolyer Record (Required)
                    ////////////////////////////////////////////////////////////////////////////////
                    StringBuilder reHeader = new StringBuilder(512)
                    // Record Identifier (1-2, 2)
                    reHeader.append("RE")
                    // Tax Year (3-6, 4)
                    reHeader.append(take(TAX_YEAR.replaceAll("\\p{P}", "").padLeft(4, '0'), 4)) // Fixme
                    // Agent Identifier Code (7-1, 1)
                    // NOTE: Review Section 2.1 - Agent Determination before entering a “1,” “2” or “3” in this field.
                    // If applicable, enter one of the following codes:
                    //    * "1" 2678 Agent (Approved by IRS)
                    //    * "2" Common Paymaster (A corporation that pays an employee who works for two or more related corporations at the same time.)
                    //    * "3" 3504 Agent
                    // Otherwise, fill with a blank.
                    reHeader.append(take(AGENT_INDICATOR.toUpperCase().padRight(1, ' '), 1)) // Fixme
                    // Employer/Agent Identification Number (EIN) (8-16, 9)
                    //    * Enter only numeric characters.
                    //    * Omit hyphens.
                    //    * Do not begin with 00, 07, 08, 09, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79 or 89.
                    //    * Enter the EIN under which tax payments were submitted to the IRS under Form 941, 943, 944, CT-1 or Schedule H.
                    //        - If employer tax payments were deposited under the EIN of the Agent, enter the EIN of the Agent.
                    //        - If employer tax payments were deposited under the EIN of the employer, enter the EIN of the employer.
                    //    * If you entered a “1”, “2” or “3” in the Agent Indicator Code field (position 7); enter the EIN of the Agent.
                    //    * See “Other EIN” (positions 31- 39) if taxes were deposited under more than one EIN during the year.
                    reHeader.append(take(employer.ein.replaceAll("\\p{P}", "").padLeft(9, '0'), 9)) // Removes all punctuation; Fixme; conditional EIN
                    // Agent for EIN (17-25, 9)
                    //    If you entered a "1" in the Agent Indicator Code field (position 7), enter the Employer’s EIN for which you
                    //    are an Agent.  Otherwise, fill with blanks
                    reHeader.append(take(AGENT_EIN.replaceAll("\\p{P}", "").padLeft(9, '0'), 9)) // Removes all punctuation; Fixme
                    // Terminating Business Indicator(26-26, 1)
                    //     If this is the last tax year that W-2s will be filed under this EIN, enter "1."  Otherwise, enter "0" (zero).
                    reHeader.append(take(TERMINATING_INDICATOR.toUpperCase().padRight(1, ' '), 1)) // Fixme
                    // Establishment Number (27-30, 4)
                    //     For multiple RE Records with the same EIN, you may use this field to assign a unique identifier for
                    //     each RE Record (i.e., store for factory locations or types of payroll). Enter any combination of
                    //     blanks, numbers, letters or keyboard characters.  Otherwise, fill with blanks.
                    reHeader.append(take(ESTABLISHMENT_NUMBER.toUpperCase().padRight(4, ' '), 4)) // Fixme
                    // Other EIN (31-39, 9)
                    //     For this tax year, if you submitted tax payments to the IRS under Form 941, 943, 944, CT-1 or Schedule H
                    //     or W-2 data to SSA, and you used an EIN different from the EIN in positions 8 - 16, enter the other EIN.
                    reHeader.append(take(OTHER_EIN.replaceAll("\\p{P}", "").padLeft(9, '0'), 9)) // Removes all punctuation; Fixme
                    //******************************************************************************
                    // Employer
                    //******************************************************************************
                    // Employer Name (40-96, 57)
                    raHeader.append(take(employer.name.toUpperCase().padRight(57, ' '), 57))
                    // Location Address (97-118, 22) (Attention, Suite, Room Number, etc.)
                    raHeader.append(take(EMPLOYER_ADDR2.toUpperCase().padRight(22, ' '), 22)) // Fixme
                    // Delivery Address (119-140, 22) (Street Number and Name or PO Box)
                    raHeader.append(take(EMPLOYER_ADDR1.toUpperCase().padRight(22, ' '), 22)) // Fixme
                    // City (141-162, 22)
                    raHeader.append(take(EMPLOYER_CITY.toUpperCase().padRight(22, ' '), 22)) // Fixme
                    // State Abbreviation (163-164, 2) Foreign Addresses fill with blanks
                    raHeader.append(take(EMPLOYER_STATE.toUpperCase().padRight(2, ' '), 2)) // Fixme
                    // Zip Code (165-169, 5) For a foreign address, fill with blanks
                    raHeader.append(take(EMPLOYER_ZIP.toUpperCase().padRight(5, ' '), 5)) // Fixme
                    // Zip Code Extension (170-173, 4) If not applicable, fill with blanks
                    raHeader.append(take(EMPLOYER_ZIP_EXT.toUpperCase().padRight(4, ' '), 4)) // Fixme
                    // Kind of Employer (174-174, 1)
                    //    Enter the appropriate kind of employer:
                    //        F = Federal govt.
                    //            (Federal government entity or instrumentality)
                    //        S = State/local non-501c.
                    //            (State or local government or instrumentality (this includes cities, townships, counties,
                    //             special-purpose districts or other publicly-owned entities with governmental authority))
                    //        T = 501c non-govt.
                    //            (Non-governmental tax-exempt section 501(c) organization (types of 501(c) non-governmental
                    //             organizations include private foundations, public charities, social and recreation clubs and
                    //             veterans organizations))
                    //        Y = State/local 501c.
                    //             (State or local government or instrumentality where the employer received a determination
                    //              letter from the IRS indication that they are also a tax-exempt organization under section 501(c)(3))
                    //        N = None Apply
                    // Note: Leave blank if the Tax Jurisdiction Code in position 220 of the RE Record is P (Puerto Rico).
                    reHeader.append(take(KIND_OF_EMPLOYER.toUpperCase().padRight(1, ' '), 1)) // Fixme
                    // Foreign State/Province (179-201, 23) If applicable, otherwise blank
                    reHeader.append(take(FOREIGN.toUpperCase().padRight(23, ' '), 23)) // Fixme
                    // Foreign Postal Code (202-216, 15)
                    reHeader.append(take(FOREIGN_POSTAL_CODE.toUpperCase().padRight(15, ' '), 15)) // Fixme
                    // Country Code (217-218, 2) If one of the following, fill with blanks:
                    //    * One of the 50 States of the U.S.A.
                    //    * District of Columbia
                    //    * Military Post Office (MPO)
                    //    * American Samoa
                    //    * Guam
                    //    * Northern Mariana Islands
                    //    * Puerto Rico
                    //    * Virgin Islands
                    //    * Otherwise, enter the applicable Country Code (see Appendix G).
                    reHeader.append(take(COUNTRY_CODE.toUpperCase().padRight(2, ' '), 2)) // Fixme
                    // Employment Code (219-219, 1)
                    //    Enter the appropriate employment code:
                    //        A = Agriculture                              Form 943
                    //        H = Household                                Schedule H
                    //        M = Military                                 Form 941
                    //        Q = Medicare Qualified Government Employment Form 941
                    //        X = Railroad                                 CT-1
                    //        F = Regular                                  Form 944
                    //        R = Regular (all others)                     Form 941
                    //    If the Tax Jurisdiction Code in position 220 of the RE Record is blank (domestic), reporting Employment
                    //        Code ‘Q’ (MQGE) is valid for tax year 1983 through the current tax year.
                    //    If the Tax Jurisdiction Code in position 220 of the RE Record is P, V, G, S, or N (not domestic),
                    //        reporting Employment Code ‘Q’ (MQGE) is valid for tax years 1986 through the current tax year.
                    //    Note: Railroad reporting is not applicable for Puerto Rico and territorial employers.
                    reHeader.append(take(EMPLOYMENT_CODE.toUpperCase().padRight(1, ' '), 1)) // Fixme
                    // Tax Jurisdiction Code (220-220, 1)
                    //    Enter the code that identifies the type of income tax withheld from the employee’s earnings.
                    //    Blank =                      W-2
                    //    V = Virgin Islands           W-2VI
                    //    G = Guam                     W-2GU
                    //    S = American Samoa           W-2AS
                    //    N = Northern Mariana Islands W-2CM
                    //    P = Puerto Rico              W-2PR/499R-2
                    reHeader.append(take(TAX_JURISDICTION_CODE.toUpperCase().padRight(1, ' '), 1)) // Fixme
                    // Third Party Sick Pay Indicator (221-221, 1)
                    reHeader.append(take(THIRD_PARTY_SICK_INDICATOR.toUpperCase().padRight(1, ' '), 1)) // Fixme
                    // Employer Contact Name (222-248, 27)
                    reHeader.append(take(EMPLOYER_CONTACT_NAME.toUpperCase().padRight(27, ' '), 2)) // Fixme
                    // EmployerContact Phone Number (249-263, 15) contact phone with numeric values only (including area code), left justify and blank fill
                    reHeader.append(take(EMPLOYER_CONTACT_PHONE.replaceAll("\\p{P}", "").padRight(15, ' '), 15)) // Remove Punctuation; Fixme
                    // EmployerContact Phone Extension (264-268, 5), left justify and blank fill
                    reHeader.append(take(EMPLOYER_CONTACT_PHONE_EXT.replaceAll("\\p{P}", "").padRight(5, ' '), 5)) // Remove Punctuation; Fixme
                    // Employer Contact Fax (489-498, 10) for US Only, includes area code
                    reHeader.append(take(EMPLOYER_CONTACT_FAX.replaceAll("\\p{P}", "").padRight(10, ' '), 10)) // Remove Punctuation; Fixme
                    // EmployerContact E-Mail Internet (446-485, 40) Cannot be blank, can be mixed case
                    reHeader.append(take(EMPLOYER_CONTACT_EMAIL.padRight(40, ' '), 40)) // Fixme
                    // Blank
                    reHeader.append("".padRight(194, ' '))

                }


            ]]></script>
        </actions>
    </service>
    <service verb="get" noun="UsaIrs1099MiscFormData">
        <in-parameters>
            <parameter name="payerPartyId" required="true"/>
            <parameter name="recipientPartyId" required="true"/>
            <parameter name="rents" type="BigDecimal"/>
            <parameter name="royalties" type="BigDecimal"/>
            <parameter name="otherIncome" type="BigDecimal"/>
            <parameter name="medicalAndHealthCarePayments" type="BigDecimal"/>
            <parameter name="nonemployeeCompensation" type="BigDecimal"/>
            <parameter name="cropInsuranceProceeds" type="BigDecimal"/>
            <parameter name="grossProceedsToAttorney" type="BigDecimal"/>
        </in-parameters>
        <out-parameters>
            <parameter name="formMap" type="Map">
                <parameter name="1099m_a"/><parameter name="1099m_b"/><parameter name="1099m_c"/>
                <parameter name="1099m_d1"/><parameter name="1099m_d2"/><parameter name="1099m_d3"/>
                <parameter name="1099m_01"/><parameter name="1099m_02"/><parameter name="1099m_03"/>
                <parameter name="1099m_06"/><parameter name="1099m_07"/><parameter name="1099m_10"/>
                <parameter name="1099m_14"/>
            </parameter>
        </out-parameters>
        <actions>
            <service-call name="mantle.other.TaxServices.get#PayerTaxInfo" in-map="[partyId:payerPartyId]" out-map="payer"/>
            <service-call name="mantle.other.TaxServices.get#RecipientTaxInfo" in-map="[partyId:recipientPartyId]" out-map="recipient"/>

            <set field="formMap" from="[:]"/>

            <set field="formMap.'1099m_a'" value="${payer.name}\n${payer.addressString}\n${payer.phoneString}"/>
            <set field="formMap.'1099m_b'" from="payer.ein"/>
            <set field="formMap.'1099m_c'" from="recipient.ssn ?: recipient.ein"/>

            <set field="formMap.'1099m_d1'" value="${recipient.firstName?:''} ${recipient.lastName?:''} ${recipient.suffix?:''}"/>
            <set field="formMap.'1099m_d2'" from="recipient.homeStreetString"/>
            <set field="formMap.'1099m_d3'" from="recipient.homeCszString"/>

            <if condition="rents"><set field="formMap.'1099m_01'" from="ec.l10n.format(rents, '#,##0.00')"/></if>
            <if condition="royalties"><set field="formMap.'1099m_02'" from="ec.l10n.format(royalties, '#,##0.00')"/></if>
            <if condition="otherIncome"><set field="formMap.'1099m_03'" from="ec.l10n.format(otherIncome, '#,##0.00')"/></if>
            <if condition="medicalAndHealthCarePayments"><set field="formMap.'1099m_06'" from="ec.l10n.format(medicalAndHealthCarePayments, '#,##0.00')"/></if>
            <if condition="nonemployeeCompensation"><set field="formMap.'1099m_07'" from="ec.l10n.format(nonemployeeCompensation, '#,##0.00')"/></if>
            <if condition="cropInsuranceProceeds"><set field="formMap.'1099m_10'" from="ec.l10n.format(cropInsuranceProceeds, '#,##0.00')"/></if>
            <if condition="grossProceedsToAttorney"><set field="formMap.'1099m_14'" from="ec.l10n.format(grossProceedsToAttorney, '#,##0.00')"/></if>
        </actions>
    </service>
    <service verb="get" noun="RecipientTaxInfo">
        <in-parameters><parameter name="partyId"/></in-parameters>
        <out-parameters>
            <parameter name="firstName"/><parameter name="lastName"/><parameter name="suffix"/>
            <parameter name="ssn"/><parameter name="ein"/>
            <parameter name="homeContactInfo" type="Map"/>
            <parameter name="homeStreetString"/><parameter name="homeCszString"/><parameter name="homeString"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail"/>
            <set field="firstName" from="partyDetail.organizationName ? partyDetail.organizationName : partyDetail.firstName + (partyDetail.middleName ? ' ' + partyDetail.middleName : '')"/>
            <set field="lastName" from="partyDetail.lastName ?: ''"/>
            <set field="suffix" from="partyDetail.suffix"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="ssnPi">
                <field-map field-name="partyId"/><field-map field-name="partyIdTypeEnumId" value="PtidSsn"/></entity-find-one>
            <set field="ssn" from="ssnPi?.idValue"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="einPi">
                <field-map field-name="partyId"/><field-map field-name="partyIdTypeEnumId" value="PtidFein"/></entity-find-one>
            <set field="ein" from="einPi?.idValue"/>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="homeContactInfo"
                    in-map="[partyId:partyId, postalContactMechPurposeId:'PostalPayment']"/>
            <script>homeStreetString = """${homeContactInfo?.postalAddress?.address1 ? homeContactInfo.postalAddress.address1 + (homeContactInfo.postalAddress.unitNumber ? ' #' + homeContactInfo.postalAddress.unitNumber : '') : ''}${homeContactInfo?.postalAddress?.address2 ? '\n' + homeContactInfo.postalAddress.address2 : ''}"""</script>
            <script>homeCszString = """${homeContactInfo?.postalAddress ? (homeContactInfo.postalAddress.city ?: '') + (homeContactInfo.postalAddressStateGeo?.geoCodeAlpha2 ? ', ' + homeContactInfo.postalAddressStateGeo.geoCodeAlpha2 : '') + ' ' + (homeContactInfo.postalAddress.postalCode ?: '') + (homeContactInfo.postalAddress.postalCodeExt ? '-' + homeContactInfo.postalAddress.postalCodeExt : '') + (homeContactInfo.postalAddressCountryGeo?.geoCodeAlpha3 ? ' ' + homeContactInfo.postalAddressCountryGeo.geoCodeAlpha3 : '') : ''}"""</script>
            <script>homeString = """${homeStreetString}\n${homeCszString}"""</script>
        </actions>
    </service>
    <service verb="get" noun="PayerTaxInfo">
        <in-parameters><parameter name="partyId"/></in-parameters>
        <out-parameters>
            <parameter name="name"/><parameter name="ein"/>
            <parameter name="contactInfo" type="Map"/><parameter name="addressString"/><parameter name="phoneString"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail"/>
            <set field="name" value="${partyDetail.organizationName?:''}${partyDetail.firstName?:''}${partyDetail.lastName ? ' ' + partyDetail.lastName : ''}"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="einPi">
                <field-map field-name="partyId"/><field-map field-name="partyIdTypeEnumId" value="PtidFein"/></entity-find-one>
            <set field="ein" from="einPi?.idValue"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="einPi">
                <field-map field-name="partyId"/><field-map field-name="partyIdTypeEnumId" value="PtidFuid"/></entity-find-one>
            <set field="uid" from="einPi?.idValue"/>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="contactInfo"
                    in-map="[partyId:partyId, postalContactMechPurposeId:'PostalTax', telecomContactMechPurposeId:'PhoneTax']"/>
            <script>addressString = """${contactInfo?.postalAddress?.address1 ? contactInfo.postalAddress.address1 + (contactInfo.postalAddress.unitNumber ? ' #' + contactInfo.postalAddress.unitNumber : '') + '\n' : ''}${contactInfo?.postalAddress?.address2 ? contactInfo.postalAddress.address2 + '\n' : ''}${contactInfo?.postalAddress ? (contactInfo.postalAddress.city ?: '') + (contactInfo.postalAddressStateGeo?.geoCodeAlpha2 ? ', ' + contactInfo.postalAddressStateGeo.geoCodeAlpha2 : '') + ' ' + (contactInfo.postalAddress.postalCode ?: '') + (contactInfo.postalAddress.postalCodeExt ? '-' + contactInfo.postalAddress.postalCodeExt : '') + (contactInfo.postalAddressCountryGeo?.geoCodeAlpha3 ? ' ' + contactInfo.postalAddressCountryGeo.geoCodeAlpha3 : '') : ''}"""</script>
            <script>phoneString = """${contactInfo?.telecomNumber ? (contactInfo.telecomNumber.countryCode ? contactInfo.telecomNumber.countryCode + '-' : '') + (contactInfo.telecomNumber.areaCode ? contactInfo.telecomNumber.areaCode + '-' : '') + (contactInfo.telecomNumber.contactNumber ?: '') : ''}"""</script>
        </actions>
    </service>
</services>
