<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="get" noun="TimePeriodEmployments">
        <in-parameters>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="ignoreType" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="employmentList" type="List"/>
            <parameter name="timePeriod" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
            <!-- convert from plain date range to date/time range; use parseTimestamp to be locale sensitive -->
            <set field="fromTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.fromDate} 00:00:00.000&quot;, '')"/>
            <set field="thruTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.thruDate} 23:59:59.999&quot;, '')"/>
            <entity-find entity-name="mantle.humanres.employment.EmploymentFromDetail" list="employmentList">
                <econdition field-name="toPartyId" from="timePeriod.partyId"/>
                <econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId" ignore="ignoreType"/>
                <econdition field-name="fromDate" operator="less-equals" from="thruTimestamp" or-null="true"/>
                <econdition field-name="thruDate" operator="greater-equals" from="fromTimestamp" or-null="true"/>
                <order-by field-name="pseudoId"/>
            </entity-find>
        </actions>
    </service>

    <!-- ========== Payroll Processing Services ========== -->

    <service verb="process" noun="TimePeriodPay" transaction-timeout="600" semaphore="fail" semaphore-parameter="timePeriodId">
        <in-parameters>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="payDate" type="Date"><description>Defaults to TimePeriod.thruDate</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceIdByPartyRelationshipId" type="Map"/>
            <parameter name="payDate" type="Date"/>
            <parameter name="totalPayAmount" type="BigDecimal"/>
            <parameter name="totalNetPayAmount" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <!-- lock the TimePeriod, will close later -->
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod" for-update="true"/>

            <if condition="timePeriod.isClosed == 'Y'">
                <message error="true">Not processing pay for period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}, already closed.</message></if>
            <if condition="ec.user.nowTimestamp.before(timePeriod.thruDate)">
                <message error="true">Not closing period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}, period has not ended (ends on ${timePeriod.thruDate}).</message></if>

            <!-- get all relevant employments -->
            <service-call name="mantle.humanres.PayrollServices.get#TimePeriodEmployments" in-map="context" out-map="context"/>
            <if condition="!payDate"><set field="payDate" from="timePeriod.thruDate"/></if>

            <!-- process pay for each employment -->
            <set field="invoiceIdByPartyRelationshipId" from="[:]"/>
            <set field="totalPayAmount" from="0"/>
            <set field="totalNetPayAmount" from="0"/>
            <set field="totalAmountByPayrollAdjustmentId" from="[:]"/>
            <set field="garnishAdjustmentListByPartyId" from="[:]"/>
            <iterate list="employmentList" entry="employment">
                <service-call name="mantle.humanres.PayrollServices.process#EmploymentPay" out-map="payOut" out-map-add-to-existing="false"
                        in-map="[partyRelationshipId:employment.partyRelationshipId, timePeriodId:timePeriodId]"/>
                <if condition="!payOut.invoiceId"><continue/></if>

                <script>invoiceIdByPartyRelationshipId.put(employment.partyRelationshipId, payOut.invoiceId)</script>
                <set field="totalPayAmount" from="totalPayAmount + payOut.payAmount"/>
                <set field="totalNetPayAmount" from="totalNetPayAmount + payOut.netPayAmount"/>

                <!-- TODO: right now assumes currency the same for all employees (from EmploymentSalary and RateAmount),
                    to support multiple currencies will need more than one invoice or conversion to currency of TaxAuthority -->
                <set field="currencyUomId" from="payOut.currencyUomId"/>

                <!-- calculate the total amount across all employees for each adjustment (for invoice from tax authority to employer) -->
                <iterate list="payOut.amountByPayrollAdjustmentId" entry="adjAmount" key="payrollAdjustmentId">
                    <script>addToBigDecimalInMap(payrollAdjustmentId, adjAmount, totalAmountByPayrollAdjustmentId)</script>
                </iterate>
                <!-- pull out adjustments with garnishPartyId, add to garnishAdjustmentListByPartyId -->
                <iterate list="payOut.adjustmentList" entry="adjustment"><if condition="adjustment.payrollAdjustment.garnishPartyId">
                    <script>addToListInMap(adjustment.payrollAdjustment.garnishPartyId, adjustment, garnishAdjustmentListByPartyId)</script>
                </if></iterate>
            </iterate>

            <!-- create tax liability invoices (from tax authority to employer) as applicable -->
            <set field="amountByAdjustmentIdByTaxAuthorityId" from="[:]"/>
            <iterate list="totalAmountByPayrollAdjustmentId" entry="totalAmount" key="payrollAdjustmentId">
                <entity-find-one entity-name="mantle.humanres.employment.PayrollAdjustment" value-field="payrollAdjustment"/>
                <if condition="!payrollAdjustment.taxAuthorityId"><continue/></if>
                <script>addToMapInMap(payrollAdjustment.taxAuthorityId, payrollAdjustmentId, totalAmount, amountByAdjustmentIdByTaxAuthorityId)</script>
            </iterate>
            <iterate list="amountByAdjustmentIdByTaxAuthorityId" entry="amountByAdjustmentId" key="taxAuthorityId">
                <entity-find-one entity-name="mantle.other.tax.TaxAuthority" value-field="taxAuthority">
                    <field-map field-name="taxAuthorityId"/></entity-find-one>

                <!-- create Invoice -->
                <service-call name="create#mantle.account.invoice.Invoice" out-map="invoiceOut" out-map-add-to-existing="false"
                        in-map="[invoiceTypeEnumId:'InvoiceTax', fromPartyId:taxAuthority.taxAuthPartyId,
                            toPartyId:timePeriod.partyId, statusId:'InvoiceReceived', invoiceDate:payDate,
                            currencyUomId:currencyUomId, timePeriodId:timePeriodId]"/>
                <set field="taxInvoiceId" from="invoiceOut.invoiceId"/>

                <iterate list="amountByAdjustmentId" entry="totalAmount" key="payrollAdjustmentId">
                    <entity-find-one entity-name="mantle.humanres.employment.PayrollAdjustment" value-field="payrollAdjustment"/>

                    <!-- create InvoiceItem records for each adjustment -->
                    <service-call name="create#mantle.account.invoice.InvoiceItem"
                            in-map="[invoiceId:taxInvoiceId, itemTypeEnumId:payrollAdjustment.itemTypeEnumId,
                                amount:totalAmount, quantity:1, description:payrollAdjustment.description,
                                taxAuthorityId:taxAuthorityId, payrollAdjustmentId:payrollAdjustmentId]"/>
                </iterate>
            </iterate>

            <!-- create garnishment payable invoices -->
            <iterate list="garnishAdjustmentListByPartyId" entry="garnishAdjustmentList" key="garnishPartyId">
                <!-- calc dueDate with lowest garnishDueDays -->
                <set field="garnishDueDays" from="14L"/>
                <iterate list="garnishAdjustmentList" entry="garnishAdjustment">
                    <if condition="garnishAdjustment.payrollAdjustment.garnishDueDays">
                        <if condition="garnishAdjustment.payrollAdjustment.garnishDueDays &lt; garnishDueDays">
                            <set field="garnishDueDays" from="garnishAdjustment.payrollAdjustment.garnishDueDays"/></if>
                    </if>
                </iterate>
                <script>
                    Calendar dueDateCal = ec.user.getCalendarSafe()
                    dueDateCal.setTime(payDate)
                    dueDateCal.add(Calendar.DAY_OF_MONTH, garnishDueDays as int)
                    dueDate = new java.sql.Timestamp(dueDateCal.getTimeInMillis())
                </script>

                <!-- create the invoice -->
                <service-call name="create#mantle.account.invoice.Invoice" out-map="invoiceOut" out-map-add-to-existing="false"
                        in-map="[invoiceTypeEnumId:'InvoiceGarnishment', fromPartyId:garnishPartyId,
                            toPartyId:timePeriod.partyId, statusId:'InvoiceReceived', invoiceDate:payDate, dueDate:dueDate,
                            currencyUomId:currencyUomId, timePeriodId:timePeriodId]"/>
                <set field="garnishInvoiceId" from="invoiceOut.invoiceId"/>
                <!-- create the invoice items, one for each garnishAdjustment -->
                <iterate list="garnishAdjustmentList" entry="garnishAdjustment">
                    <set field="payrollAdjustment" from="garnishAdjustment.payrollAdjustment"/>

                    <!-- make description, lookup PartyDetail, SSN PartyIdentification -->
                    <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail">
                        <field-map field-name="partyId" from="garnishAdjustment.employment.fromPartyId"/></entity-find-one>
                    <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partySsn">
                        <field-map field-name="partyId" from="garnishAdjustment.employment.fromPartyId"/>
                        <field-map field-name="partyIdTypeEnumId" value="PtidSsn"/>
                    </entity-find-one>
                    <set field="description" value="${payrollAdjustment.description} for ${partyDetail.firstName?:''} ${partyDetail.lastName?:''}${partyDetail.organizationName?:''} SSN ${partySsn?.idValue ?: 'N/A'} Case ${payrollAdjustment.garnishCaseNumber ?: 'N/A'}"/>

                    <service-call name="create#mantle.account.invoice.InvoiceItem"
                            in-map="[invoiceId:garnishInvoiceId, itemTypeEnumId:payrollAdjustment.itemTypeEnumId,
                                amount:-garnishAdjustment.amount, quantity:1, description:description,
                                payrollAdjustmentId:garnishAdjustment.payrollAdjustmentId]"/>
                </iterate>
            </iterate>

            <!-- close the TimePeriod -->
            <set field="timePeriod.isClosed" value="Y"/>
            <entity-update value-field="timePeriod"/>

            <message>Processed pay for period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}: ${employmentList.size()} employees, gross pay total: ${totalPayAmount}, net pay total: ${totalNetPayAmount}</message>
        </actions>
    </service>
    <service verb="approve" noun="PeriodInvoices">
        <in-parameters><parameter name="timePeriodId" required="true"/></in-parameters>
        <actions>
            <entity-find entity-name="mantle.account.invoice.Invoice" list="invoiceList">
                <econdition field-name="timePeriodId"/>
                <econdition field-name="invoiceTypeEnumId" value="InvoicePayroll"/>
                <econdition field-name="statusId" value="InvoiceReceived"/>
            </entity-find>
            <iterate list="invoiceList" entry="invoice">
                <service-call name="update#mantle.account.invoice.Invoice"
                        in-map="[invoiceId:invoice.invoiceId, statusId:'InvoiceApproved']"/>
            </iterate>
        </actions>
    </service>
    <service verb="create" noun="PeriodPayments">
        <in-parameters>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="statusId" default-value="PmntAuthorized"/>
            <parameter name="paymentInstrumentEnumId" default-value="PiCompanyCheck"/>
            <parameter name="paymentMethodId"/>
            <parameter name="effectiveDate" type="Timestamp" default="ec.user.nowTimestamp"/>
        </in-parameters>
        <actions>
            <!-- find the PmpPayroll purpose PaymentMethod -->
            <if condition="!paymentMethodId">
                <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
                <entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList">
                    <date-filter/><econdition field-name="ownerPartyId" from="timePeriod.partyId"/>
                    <econdition field-name="purposeEnumId" value="PmpPayroll"/>
                    <!-- constrain by a paymentMethodTypeEnumId corresponding to the paymentInstrumentEnumId? -->
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <if condition="!paymentMethodList"><entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList">
                    <date-filter/><econdition field-name="ownerPartyId" from="timePeriod.partyId"/>
                    <econdition field-name="purposeEnumId" value="PmpGeneral"/><order-by field-name="-fromDate"/></entity-find></if>
                <if condition="paymentMethodList"><set field="paymentMethodId" from="paymentMethodList[0].paymentMethodId"/></if>
            </if>

            <entity-find entity-name="mantle.account.invoice.Invoice" list="invoiceList">
                <econdition field-name="timePeriodId"/>
                <econdition field-name="invoiceTypeEnumId" value="InvoicePayroll"/>
                <econdition field-name="statusId" value="InvoiceApproved"/>
            </entity-find>
            <iterate list="invoiceList" entry="invoice">
                <!-- if paymentInstrumentEnumId is PiAch look for employee's BankAccount -->
                <set field="toPaymentMethodId" from="null"/>
                <if condition="paymentInstrumentEnumId == 'PiAch'">
                    <entity-find entity-name="mantle.account.method.PaymentMethod" list="toPaymentMethodList">
                        <date-filter/>
                        <econdition field-name="ownerPartyId" from="invoice.fromPartyId"/>
                        <econdition field-name="purposeEnumId" value="PmpPayroll"/>
                        <econdition field-name="paymentMethodTypeEnumId" value="PmtBankAccount"/>
                        <order-by field-name="-fromDate"/>
                    </entity-find>
                    <if condition="toPaymentMethodList">
                        <set field="toPaymentMethodId" from="toPaymentMethodList[0].paymentMethodId"/></if>
                </if>
                <!-- get the Employment.distGroupEnumId if set, using invoice.partyRelationshipId -->
                <set field="distGroupEnumId" from="null"/>
                <if condition="invoice.partyRelationshipId">
                    <entity-find-one entity-name="mantle.humanres.employment.Employment" value-field="invEmployment">
                        <field-map field-name="partyRelationshipId" from="invoice.partyRelationshipId"/></entity-find-one>
                    <if condition="invEmployment?.distGroupEnumId">
                        <set field="distGroupEnumId" from="invEmployment.distGroupEnumId"/></if>
                </if>

                <service-call name="mantle.account.PaymentServices.create#InvoicePayment" out-map="paymentOut"
                    in-map="context + [invoiceId:invoice.invoiceId, partyRelationshipId:invoice.partyRelationshipId]"/>
            </iterate>
        </actions>
    </service>

    <service verb="process" noun="EmploymentPay">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="payDate" type="Date"><description>Defaults to TimePeriod.thruDate</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/>
            <parameter name="payDate" type="Date"/>
            <parameter name="payAmount" type="BigDecimal"/>
            <parameter name="netPayAmount" type="BigDecimal"/>
            <parameter name="currencyUomId"/>

            <parameter name="adjustmentList" type="List"/>
            <parameter name="amountByPayrollAdjustmentId" type="Map"/>
        </out-parameters>
        <actions>
            <!-- make sure there is no EmploymentPayHistory record for partyRelationshipId and timePeriodId -->
            <entity-find entity-name="mantle.humanres.employment.EmploymentPayHistory" list="existingPayHistoryList">
                <econdition field-name="partyRelationshipId"/><econdition field-name="timePeriodId"/></entity-find>
            <if condition="existingPayHistoryList"><return message="Employment pay already processed for employment ${partyRelationshipId}, time period ${timePeriodId}"/></if>

            <!-- get the pay detail data; note that this sets default payDate if not passed in -->
            <service-call name="mantle.humanres.PayrollServices.get#EmploymentPayDetail" in-map="context" out-map="context"/>
            <if condition="!payAmount"><return message="Employee has no pay for employment ${partyRelationshipId}, time period ${timePeriodId}"/></if>

            <!-- create Invoice -->
            <service-call name="create#mantle.account.invoice.Invoice" out-map="context"
                    in-map="[invoiceTypeEnumId:'InvoicePayroll', fromPartyId:employment.fromPartyId, toPartyId:employment.toPartyId,
                        statusId:'InvoiceReceived', invoiceDate:payDate, currencyUomId:currencyUomId,
                        partyRelationshipId:partyRelationshipId, timePeriodId:timePeriodId]"/>

            <!-- create InvoiceItem for payAmount -->
            <service-call name="create#mantle.account.invoice.InvoiceItem" out-map="payIiOut"
                    in-map="[invoiceId:invoiceId, amount:payAmount, quantity:1,
                        itemTypeEnumId:(emplPosition.salaryFlag == 'Y' ? 'ItemSalary' : 'ItemHourlyEarnings'),
                        description:ec.resource.expand('PayrollInvoicePayDescription', '', [emplPosition:emplPosition, timePeriod:timePeriod])]"/>

            <!-- create InvoiceItem records for each adjustmentList element -->
            <set field="amountByPayrollAdjustmentId" from="[:]"/>
            <iterate list="adjustmentList" entry="adjustment">
                <!-- only add to employee invoice if not employer paid -->
                <if condition="adjustment.payrollAdjustment.isEmployerPaid != 'Y'">
                    <service-call name="create#mantle.account.invoice.InvoiceItem"
                            in-map="[invoiceId:invoiceId, itemTypeEnumId:adjustment.payrollAdjustment.itemTypeEnumId,
                                amount:adjustment.amount, quantity:1, description:adjustment.payrollAdjustment.description,
                                taxAuthorityId:adjustment.payrollAdjustment.taxAuthorityId,
                                payrollAdjustmentId:adjustment.payrollAdjustmentId]"/>
                </if>
                <!-- add the amount for the adjustment, negated here so we get a positive total -->
                <script>addToBigDecimalInMap(adjustment.payrollAdjustmentId, -adjustment.amount, amountByPayrollAdjustmentId)</script>
            </iterate>

            <!-- as a validation calc total for Invoice and compare with netPayAmount -->
            <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="totalOut"/>
            <if condition="netPayAmount != totalOut.invoiceTotal">
                <return error="true" message="For employment [${partyRelationshipId}] invoice total [${totalOut.invoiceTotal}] did not match net pay [${netPayAmount}]"/></if>

            <!-- create EmploymentPayHistory and EmploymentPayDetail records -->
            <service-call name="create#mantle.humanres.employment.EmploymentPayHistory"
                    in-map="[partyRelationshipId:partyRelationshipId, payDate:payDate, timePeriodId:timePeriodId,
                        invoiceId:invoiceId, internalPayroll:'Y', payAmount:payAmount, taxablePayAmount:taxablePayAmount,
                        socialTaxablePayAmount:socialTaxablePayAmount, medicalTaxablePayAmount:medicalTaxablePayAmount,
                        netPayAmount:netPayAmount, disposablePayAmount:disposablePayAmount, taxableYtdIncome:taxableYtdIncome,
                        socialTaxableYtdIncome:socialTaxableYtdIncome, medicalTaxableYtdIncome:medicalTaxableYtdIncome,
                        currencyUomId:currencyUomId]"/>
            <iterate list="adjustmentList" entry="adjustment">
                <!-- add records for all adjustments, including employer paid (this is the only detail record we have of employer paid) -->
                <service-call name="create#mantle.humanres.employment.EmploymentPayDetail"
                        in-map="[partyRelationshipId:partyRelationshipId, payDate:payDate,
                            payrollAdjustmentId:adjustment.payrollAdjustmentId, amount:adjustment.amount,
                            isEmployerPaid:adjustment.payrollAdjustment.isEmployerPaid,
                            taxAuthorityId:adjustment.payrollAdjustment.taxAuthorityId,
                            garnishPartyId:adjustment.payrollAdjustment.garnishPartyId,
                            garnishCaseNumber:adjustment.payrollAdjustment.garnishCaseNumber]"/>
            </iterate>

            <!-- set TimeEntry.vendorInvoiceId on all in timeEntryList -->
            <iterate list="timeEntryList" entry="timeEntry">
                <set field="timeEntry.vendorInvoiceId" from="invoiceId"/>
                <entity-update value-field="timeEntry"/><!-- do direct update, was selected with for-update -->
            </iterate>
        </actions>
    </service>

    <!-- ========== Payroll Calculation Services ========== -->

    <service verb="get" noun="EmploymentPayAmount">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="timePeriodId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="payAmount" type="BigDecimal"/>
            <parameter name="currencyUomId"/>
            <parameter name="salaryFlag"/>
            <parameter name="timeEntryList" type="List"/>

            <parameter name="employment" type="Map"/>
            <parameter name="emplPosition" type="Map"/>
            <parameter name="timePeriod" type="Map"/>
            <parameter name="fromTimestamp" type="Timestamp"/>
            <parameter name="thruTimestamp" type="Timestamp"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.humanres.employment.EmploymentAndRelationship" value-field="employment"/>
            <entity-find-one entity-name="mantle.humanres.position.EmplPosition" value-field="emplPosition">
                <field-map field-name="emplPositionId" from="employment.emplPositionId"/></entity-find-one>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="fromDetail">
                <field-map field-name="partyId" from="employment.fromPartyId"/></entity-find-one>

            <set field="salaryFlag" from="emplPosition.salaryFlag ?: 'N'"/>
            <set field="payAmount" from="0"/>

            <if condition="employment.timePeriodTypeId != timePeriod.timePeriodTypeId">
                <return message="Employee ${ec.resource.expand('PartyNameTemplate', '', fromDetail)} is not paid in this type of period"/></if>

            <set field="fromTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.fromDate} 00:00:00.000&quot;, '')"/>
            <set field="thruTimestamp" from="ec.l10n.parseTimestamp(&quot;${timePeriod.thruDate} 23:59:59.999&quot;, '')"/>

            <if condition="employment.fromDate != null &amp;&amp; employment.fromDate &gt; thruTimestamp">
                <return message="Employee ${ec.resource.expand('PartyNameTemplate', '', fromDetail)} is not yet employed"/></if>
            <if condition="employment.thruDate != null &amp;&amp; employment.thruDate &lt; fromTimestamp">
                <return message="Employee ${ec.resource.expand('PartyNameTemplate', '', fromDetail)} is no longer employed"/></if>

            <if condition="salaryFlag == 'Y'">
                <then>
                    <!-- NOTE: if salary changes mid-period, pro-rate the rate by applicable time? currently uses salary on period thruDate -->
                    <entity-find entity-name="mantle.humanres.employment.EmploymentSalary" list="employmentSalaryList">
                        <date-filter valid-date="thruTimestamp"/>
                        <econdition field-name="partyRelationshipId"/>
                        <econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId"/>
                        <order-by field-name="-fromDate"/><!-- if more than one get most recent -->
                    </entity-find>

                    <if condition="!employmentSalaryList">
                        <return error="true" message="No salary found for salaried employee ${ec.resource.expand('PartyNameTemplate', '', fromDetail)}"/></if>
                    <set field="employmentSalary" from="employmentSalaryList[0]"/>

                    <set field="payAmount"  from="employmentSalary.amount"/>
                    <set field="currencyUomId" from="employmentSalary.currencyUomId"/>

                    <!-- handle partial period for salary (first and last, ie by from and thru) -->
                    <if condition="employment.fromDate != null &amp;&amp; employment.fromDate &gt; fromTimestamp">
                        <set field="partialFrom" from="employment.fromDate"/></if>
                    <if condition="employment.thruDate != null &amp;&amp; employment.thruDate &lt; thruTimestamp">
                        <set field="partialThru" from="employment.thruDate"/></if>
                    <if condition="partialFrom || partialThru">
                        <if condition="partialFrom"><set field="partialFromDate" from="new java.sql.Date(partialFrom.time)"/>
                            <else><set field="partialFromDate" from="timePeriod.fromDate"/></else></if>
                        <if condition="partialThru"><set field="partialThruDate" from="new java.sql.Date(partialThru.time)"/>
                            <else><set field="partialThruDate" from="timePeriod.thruDate"/></else></if>
                        <!-- TODO: this is messy, consider working days, etc? -->
                        <!-- for now do a simple ratio of milliseconds -->
                        <set field="partialTime" from="partialThru.time - partialFrom.time"/>
                        <set field="periodTime" from="timePeriod.thruDate.time - timePeriod.fromDate.time"/>
                        <set field="payAmount" from="(payAmount * (partialTime/periodTime)).setScale(2, BigDecimal.ROUND_HALF_UP)"/>
                    </if>
                </then>
                <else>
                    <entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList" for-update="true">
                        <econdition field-name="partyId" from="employment.fromPartyId"/>
                        <econdition field-name="clientPartyId" from="employment.toPartyId"/>
                        <econdition field-name="thruDate" operator="greater-equals" from="fromTimestamp"/>
                        <econdition field-name="thruDate" operator="less-equals" from="thruTimestamp"/>
                    </entity-find>
                    <iterate list="timeEntryList" entry="timeEntry">
                        <!-- NOTE: this service gets the higher of hourly and piece amounts -->
                        <service-call name="mantle.work.TimeServices.get#TimeEntryAmount" out-map="getTeaOut"
                                in-map="[timeEntryId:timeEntry.timeEntryId, timeEntry:timeEntry, ratePurposeEnumId:ratePurposeEnumId]"/>
                        <set field="payAmount" from="payAmount + getTeaOut.amountTotal"/>
                        <set field="currencyUomId" from="getTeaOut.currencyUomId"/>
                    </iterate>
                </else>
            </if>
        </actions>
    </service>

    <service verb="get" noun="TimePeriodTotalPayAmount">
        <in-parameters><parameter name="timePeriodId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="payAmountByCurrencyUomId" type="Map"/>
        </out-parameters>
        <actions>
            <!-- find all employees active in the time period -->
            <service-call name="mantle.humanres.PayrollServices.get#TimePeriodEmployments" in-map="context" out-map="context"/>

            <!-- go through employmentList and get/calc amount for each, add to total -->
            <set field="payAmountByCurrencyUomId" from="[:]"/>
            <iterate list="employmentList" entry="employment">
                <service-call name="mantle.humanres.PayrollServices.get#EmploymentPayAmount" out-map="payOut"
                        in-map="[timePeriodId:timePeriodId, partyRelationshipId:employment.partyRelationshipId]"/>
                <script>addToBigDecimalInMap(payOut.currencyUomId, payOut.payAmount, payAmountByCurrencyUomId)</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="EmploymentPayDetail">
        <in-parameters>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="payDate" type="Date"><description>Defaults to TimePeriod.thruDate</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="payAmount" type="BigDecimal"/>
            <parameter name="currencyUomId"/>
            <parameter name="salaryFlag"/>
            <parameter name="timeEntryList" type="List"/>

            <parameter name="employment" type="Map"/>
            <parameter name="homePostalAddress" type="Map"/>
            <parameter name="emplPosition" type="Map"/>
            <parameter name="timePeriod" type="Map"/>
            <parameter name="payDate" type="Date"/>

            <parameter name="adjustmentList" type="List">
                <description>List of Maps with out parameters from calculate#PayrollAdjustment</description></parameter>
            <parameter name="netPayAmount" type="BigDecimal"/>

            <parameter name="taxablePayAmount" type="BigDecimal"/>
            <parameter name="socialTaxablePayAmount" type="BigDecimal"/>
            <parameter name="medicalTaxablePayAmount" type="BigDecimal"/>
            <parameter name="disposablePayAmount" type="BigDecimal"/>
            <parameter name="taxableYtdIncome" type="BigDecimal"/>
            <parameter name="socialTaxableYtdIncome" type="BigDecimal"/>
            <parameter name="medicalTaxableYtdIncome" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <!-- get the pay amount and employment, emplPosition, timePeriod, fromTimestamp, thruTimestamp -->
            <service-call name="mantle.humanres.PayrollServices.get#EmploymentPayAmount" in-map="context" out-map="context"/>

            <if condition="!payDate"><set field="payDate" from="timePeriod.thruDate"/></if>
            <set field="payTimestamp" from="ec.l10n.parseTimestamp(&quot;${payDate} 12:00:00.000&quot;, '')"/>

            <!-- set initial taxablePayAmount, socialTaxablePayAmount, medicalTaxablePayAmount -->
            <set field="taxablePayAmount" from="payAmount"/>
            <set field="socialTaxablePayAmount" from="payAmount"/>
            <set field="medicalTaxablePayAmount" from="payAmount"/>

            <!-- calc taxableYtdIncome, socialTaxableYtdIncome, medicalTaxableYtdIncome -->
            <set field="taxableYtdIncome" from="0"/>
            <set field="socialTaxableYtdIncome" from="0"/>
            <set field="medicalTaxableYtdIncome" from="0"/>
            <set field="thisYearList" from="ec.user.getPeriodRange('year', '0')"/>
            <set field="yearStart" from="new java.sql.Date(thisYearList[0].time)"/>
            <set field="yearEnd" from="new java.sql.Date(thisYearList[1].time)"/>
            <entity-find entity-name="mantle.humanres.employment.EmploymentPayHistory" list="payHistoryList">
                <econdition field-name="partyRelationshipId"/>
                <econdition field-name="payDate" operator="greater-equals" from="yearStart"/>
                <econdition field-name="payDate" operator="less" from="yearEnd"/>
            </entity-find>
            <iterate list="payHistoryList" entry="payHistory">
                <set field="taxableYtdIncome" from="taxableYtdIncome + payHistory.taxablePayAmount"/>
                <set field="socialTaxableYtdIncome" from="socialTaxableYtdIncome + payHistory.socialTaxablePayAmount"/>
                <set field="medicalTaxableYtdIncome" from="medicalTaxableYtdIncome + payHistory.medicalTaxablePayAmount"/>
            </iterate>

            <!-- get homePostalAddress -->
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="employeeHomeContactInfo"
                    in-map="[partyId:employment.toPartyId, postalContactMechId:employment.taxHomeContactMechId,
                        postalContactMechPurposeId:'PostalHome']"/>
            <set field="homePostalAddress" from="employeeHomeContactInfo.postalAddress"/>

            <!-- calculate the adjustments -->
            <set field="adjustmentList" from="[]"/>

            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustment" list="allPayrollAdjustmentList">
                <date-filter valid-date="payTimestamp"/>
                <econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId" or-null="true"/>
            </entity-find>

            <!-- calculate global and employee adjustments (deductions, etc) - taxable -->
            <set field="partyRelCondition" from="ec.entity.conditionFactory.makeCondition(
                [[partyRelationshipId:null], [partyRelationshipId:partyRelationshipId]], 'or', '=', null)"/>
            <set field="taxableCondition" from="ec.entity.conditionFactory.makeCondition(
                [partyRelCondition, [isTaxable:'Y', isSocialTaxable:'Y', isMedicalTaxable:'Y']], 'and', '=', 'or')"/>
            <script>dedPayrollAdjustmentList = allPayrollAdjustmentList.cloneList().filterByCondition(taxableCondition, true)</script>

            <iterate list="dedPayrollAdjustmentList" entry="payrollAdjustment">
                <set field="calcOut" from="null"/>
                <service-call name="mantle.humanres.PayrollServices.calculate#PayrollAdjustment" out-map="calcOut"
                    in-map="[payrollAdjustmentId:payrollAdjustment.payrollAdjustmentId, payrollAdjustment:payrollAdjustment,
                        partyRelationshipId:partyRelationshipId, employment:employment,
                        timePeriodTypeId:timePeriod.timePeriodTypeId, payTimestamp:payTimestamp,
                        payAmount:payAmount, taxablePayAmount:taxablePayAmount,
                        socialTaxablePayAmount:socialTaxablePayAmount, medicalTaxablePayAmount:medicalTaxablePayAmount,
                        taxableYtdIncome:taxableYtdIncome, socialTaxableYtdIncome:socialTaxableYtdIncome,
                        medicalTaxableYtdIncome:medicalTaxableYtdIncome,
                        homePostalAddress:homePostalAddress]"/>
                <if condition="!calcOut.adjustmentApplies"><continue/></if>
                <script>adjustmentList.add(calcOut)</script>

                <!-- update taxablePayAmount, socialTaxablePayAmount, medicalTaxablePayAmount -->
                <if condition="payrollAdjustment.isTaxable == 'Y' &amp;&amp; payrollAdjustment.isEmployerPaid != 'Y'">
                    <set field="taxablePayAmount" from="taxablePayAmount + calcOut.amount"/></if>
                <if condition="payrollAdjustment.isSocialTaxable == 'Y' &amp;&amp; payrollAdjustment.isEmployerPaid != 'Y'">
                    <set field="socialTaxablePayAmount" from="socialTaxablePayAmount + calcOut.amount"/></if>
                <if condition="payrollAdjustment.isMedicalTaxable == 'Y' &amp;&amp; payrollAdjustment.isEmployerPaid != 'Y'">
                    <set field="medicalTaxablePayAmount" from="medicalTaxablePayAmount + calcOut.amount"/></if>
            </iterate>

            <!-- update taxableYtdIncome, socialTaxableYtdIncome, medicalTaxableYtdIncome -->
            <set field="taxableYtdIncome" from="taxableYtdIncome + taxablePayAmount"/>
            <set field="socialTaxableYtdIncome" from="socialTaxableYtdIncome + socialTaxablePayAmount"/>
            <set field="medicalTaxableYtdIncome" from="medicalTaxableYtdIncome + medicalTaxablePayAmount"/>

            <!-- calculate global and employee adjustments (deductions, etc) - not taxable -->
            <script>otherPayrollAdjustmentList = allPayrollAdjustmentList.cloneList().filterByCondition(partyRelCondition, true)
                    .removeByAnd([isTaxable:'Y']).removeByAnd([isSocialTaxable:'Y']).removeByAnd([isMedicalTaxable:'Y'])</script>

            <iterate list="otherPayrollAdjustmentList" entry="payrollAdjustment">
                <set field="calcOut" from="null"/>
                <service-call name="mantle.humanres.PayrollServices.calculate#PayrollAdjustment" out-map="calcOut"
                    in-map="[payrollAdjustmentId:payrollAdjustment.payrollAdjustmentId, payrollAdjustment:payrollAdjustment,
                        partyRelationshipId:partyRelationshipId, employment:employment,
                        timePeriodTypeId:timePeriod.timePeriodTypeId, payTimestamp:payTimestamp,
                        payAmount:payAmount, taxablePayAmount:taxablePayAmount,
                        socialTaxablePayAmount:socialTaxablePayAmount, medicalTaxablePayAmount:medicalTaxablePayAmount,
                        taxableYtdIncome:taxableYtdIncome, socialTaxableYtdIncome:socialTaxableYtdIncome,
                        medicalTaxableYtdIncome:medicalTaxableYtdIncome,
                        homePostalAddress:homePostalAddress]"/>
                <if condition="!calcOut.adjustmentApplies"><continue/></if>
                <script>adjustmentList.add(calcOut)</script>
            </iterate>

            <!-- calculate disposablePayAmount -->
            <set field="disposablePayAmount" from="payAmount"/>
            <iterate list="adjustmentList" entry="adjustment">
                <if condition="adjustment.payrollAdjustment.deductFromDisposable == 'Y' &amp;&amp; payrollAdjustment.isEmployerPaid != 'Y'">
                    <set field="disposablePayAmount" from="disposablePayAmount + adjustment.amount"/></if>
            </iterate>

            <!-- find applicable garnish minimum wage -->
            <entity-find entity-name="mantle.humanres.employment.PayrollGarnishMinWage" list="garnishMinWageList">
                <date-filter/><econdition field-name="stateOrCountryGeoId" from="homePostalAddress.stateProvinceGeoId"/>
                <econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId"/>
            </entity-find>
            <if condition="!garnishMinWageList">
                <entity-find entity-name="mantle.humanres.employment.PayrollGarnishMinWage" list="garnishMinWageList">
                    <date-filter/><econdition field-name="stateOrCountryGeoId" from="homePostalAddress.countryGeoId"/>
                    <econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId"/>
                </entity-find>
            </if>
            <if condition="garnishMinWageList"><set field="garnishMinWage" from="garnishMinWageList[0]"/></if>

            <!-- adjust garnishments for disposable income limit (using garnishDisposablePercent, garnishPriority) -->
            <set field="disposableRemaining" from="disposablePayAmount"/>
            <order-map-list list="adjustmentList"><order-by field-name="garnishPriority"/></order-map-list>
            <iterate list="adjustmentList" entry="adjustment">
                <if condition="!adjustment.payrollAdjustment.garnishPartyId"><continue/></if>

                <if condition="adjustment.payrollAdjustment.garnishDisposablePercent">
                    <then><set field="garnishDisposableRatio" from="adjustment.payrollAdjustment.garnishDisposablePercent / 100"/></then>
                    <else><set field="garnishDisposableRatio" from="0.25"/><!-- this is a good default for the USA, not necessarily for other places --></else>
                </if>
                <!-- calculate max amount from garnishMinWage (if applicable) or garnishDisposableRatio -->
                <set field="deductionAmount" from="-adjustment.amount"/><!-- negate it so the code is easier to read -->
                <if condition="adjustment.payrollAdjustment.garnishMinWageApplies == 'Y' &amp;&amp; garnishMinWage">
                    <then>
                        <if condition="disposableRemaining &lt;= garnishMinWage.rangeLow">
                            <then><!-- do nothing, leave deductionAmount as-is --></then>
                            <else-if condition="disposableRemaining &gt; garnishMinWage.rangeLow &amp;&amp; disposableRemaining &lt; garnishMinWage.rangeHigh">
                                <set field="deductionAmount" from="disposableRemaining - garnishMinWage.rangeLow"/>
                            </else-if>
                            <else>
                                <set field="maxDedAmount" from="disposablePayAmount * garnishDisposableRatio"/>
                                <set field="deductionAmount" from="deductionAmount &gt; maxDedAmount ? maxDedAmount : deductionAmount"/>
                            </else>
                        </if>
                    </then>
                    <else>
                        <set field="maxDedAmount" from="disposablePayAmount * garnishDisposableRatio"/>
                        <set field="deductionAmount" from="deductionAmount &gt; maxDedAmount ? maxDedAmount : deductionAmount"/>
                    </else>
                </if>

                <!-- ROUND_HALF_DOWN here so the deduction amount is never more than the percentage limit -->
                <set field="deductionAmount" from="deductionAmount.setScale(2, BigDecimal.ROUND_HALF_DOWN)"/>
                <set field="adjustment.amount" from="-deductionAmount"/>
                <set field="disposableRemaining" from="disposableRemaining - deductionAmount"/>
            </iterate>

            <!-- calculate netPayAmount -->
            <set field="netPayAmount" from="payAmount"/>
            <iterate list="adjustmentList" entry="adjustment">
                <if condition="adjustment.payrollAdjustment.isEmployerPaid != 'Y'">
                    <set field="netPayAmount" from="netPayAmount + adjustment.amount"/></if>
            </iterate>

            <!-- <log message="===== payAmount=${payAmount}, netPayAmount=${netPayAmount}, adjustmentList:\n${adjustmentList}"/> -->
        </actions>
    </service>
    <service verb="calculate" noun="PayrollAdjustment">
        <in-parameters>
            <parameter name="payrollAdjustmentId" required="true"/>
            <parameter name="payrollAdjustment" type="Map"/>
            <parameter name="partyRelationshipId" required="true"/>
            <parameter name="employment" type="Map"/>
            <parameter name="emplPosition" type="Map"/>

            <parameter name="timePeriodTypeId" required="true"/>
            <parameter name="payTimestamp" type="Timestamp"/>

            <parameter name="payAmount" type="BigDecimal" required="true"/>
            <parameter name="taxablePayAmount" type="BigDecimal" required="true"/>
            <parameter name="socialTaxablePayAmount" type="BigDecimal" required="true"/>
            <parameter name="medicalTaxablePayAmount" type="BigDecimal" required="true"/>
            <parameter name="taxableYtdIncome" type="BigDecimal" required="true"/>
            <parameter name="socialTaxableYtdIncome" type="BigDecimal" required="true"/>
            <parameter name="medicalTaxableYtdIncome" type="BigDecimal" required="true"/>

            <parameter name="homePostalAddress" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="adjustmentApplies" type="Boolean"/>

            <parameter name="payrollAdjustmentId" required="true"/>
            <parameter name="payrollAdjustment" type="Map"/>
            <parameter name="employment" type="Map"/>
            <parameter name="emplPosition" type="Map"/>
            <parameter name="garnishPriority" type="Long"/>

            <parameter name="amount" type="BigDecimal"/>
            <parameter name="basisPayAmount" type="BigDecimal"/>
            <parameter name="stdDeductionAmount" type="BigDecimal"/>
            <parameter name="allowanceDeductionAmount" type="BigDecimal"/>
            <parameter name="allowanceExemptionAmount" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <set field="adjustmentApplies" from="false"/>

            <set field="amount" from="0"/>
            <set field="stdDeductionAmount" from="0"/>
            <set field="allowanceDeductionAmount" from="0"/>
            <set field="allowanceExemptionAmount" from="0"/>

            <if condition="payrollAdjustment == null">
                <entity-find-one entity-name="mantle.humanres.employment.PayrollAdjustment" value-field="payrollAdjustment" cache="true"/></if>
            <set field="garnishPriority" from="payrollAdjustment.garnishPriority"/>
            <if condition="employment == null">
                <entity-find-one entity-name="mantle.humanres.employment.EmploymentAndRelationship" value-field="employment"/></if>
            <if condition="emplPosition == null">
                <entity-find-one entity-name="mantle.humanres.position.EmplPosition" value-field="emplPosition">
                    <field-map field-name="emplPositionId" from="employment.emplPositionId"/></entity-find-one>
            </if>

            <!-- see if the employee is exempt from this adjustment -->
            <entity-find-one entity-name="mantle.humanres.employment.PayrollAdjustmentExempt" value-field="paExempt" cache="true">
                <field-map field-name="payrollAdjustmentId"/><field-map field-name="taxExemptEnumId" from="emplPosition.taxExemptEnumId"/></entity-find-one>
            <if condition="paExempt != null">
                <return/><!-- adjustmentApplies already set to false so adjustment won't be added by caller -->
            </if>

            <if condition="payrollAdjustment.isTax == 'Y'"><then>
                <set field="basisPayAmount" from="taxablePayAmount"/>
                <set field="ytdIncome" from="taxableYtdIncome"/>
            </then><else-if condition="payrollAdjustment.isSocialTax == 'Y'">
                <set field="basisPayAmount" from="socialTaxablePayAmount"/>
                <set field="ytdIncome" from="socialTaxableYtdIncome"/>
            </else-if><else-if condition="payrollAdjustment.isMedicalTax == 'Y'">
                <set field="basisPayAmount" from="medicalTaxablePayAmount"/>
                <set field="ytdIncome" from="medicalTaxableYtdIncome"/>
            </else-if><else>
                <set field="basisPayAmount" from="payAmount"/>
                <set field="ytdIncome" from="payAmount"/>
            </else></if>

            <!-- check state and federal filing status constraints, if any; if there are but none match skip the PayrollAdjustment -->
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentFedStts" list="fedSttsList" cache="true">
                <econdition field-name="payrollAdjustmentId"/></entity-find>
            <if condition="fedSttsList &amp;&amp; employment.taxFederalStatusEnumId">
                <filter-map-list list="fedSttsList" to-list="filteredFedSttsList">
                    <field-map field-name="taxFederalStatusEnumId" from="employment.taxFederalStatusEnumId"/></filter-map-list>
                <if condition="!filteredFedSttsList"><return/></if>
            </if>
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentStateStts" list="stateSttsList" cache="true">
                <econdition field-name="payrollAdjustmentId"/></entity-find>
            <if condition="stateSttsList &amp;&amp; employment.taxStateStatusEnumId">
                <filter-map-list list="stateSttsList" to-list="filteredStateSttsList">
                    <field-map field-name="taxStateStatusEnumId" from="employment.taxStateStatusEnumId"/></filter-map-list>
                <if condition="!filteredStateSttsList"><return/></if>
            </if>

            <if condition="payrollAdjustment.isTax == 'Y' || payrollAdjustment.isSocialTax == 'Y' || payrollAdjustment.isMedicalTax == 'Y'">
                <entity-find-one entity-name="mantle.other.tax.TaxAuthority" value-field="taxAuthority" cache="true">
                    <field-map field-name="taxAuthorityId" from="payrollAdjustment.taxAuthorityId"/></entity-find-one>

                <!-- see if employee home is in jurisdiction, if not skip this adjustment (return); also set applicable taxAllowances -->
                <if condition="taxAuthority.taxAuthorityTypeEnumId == 'TatFederal'"><then>
                    <if condition="homePostalAddress.countryGeoId != taxAuthority.taxAuthGeoId"><return/></if>
                    <set field="taxAllowances" from="employment.taxFederalAllowances"/>
                </then><else-if condition="taxAuthority.taxAuthorityTypeEnumId == 'TatState'">
                    <if condition="homePostalAddress.stateProvinceGeoId != taxAuthority.taxAuthGeoId"><return/></if>
                    <set field="taxAllowances" from="employment.taxStateAllowances"/>
                </else-if><else>
                    <set field="taxAllowances" from="0"/>
                </else></if>

                <!-- Find applicable PayrollStdDeduction, subtract from basisPayAmount -->
                <if condition="payrollAdjustment.applyStdDeduction == 'Y'">
                    <entity-find entity-name="mantle.humanres.employment.PayrollStdDeduction" list="stdDeductionList">
                        <date-filter valid-date="payTimestamp"/>
                        <econdition field-name="taxAuthorityId" from="payrollAdjustment.taxAuthorityId"/>
                        <econdition field-name="timePeriodTypeId"/>
                        <econdition field-name="taxFederalStatusEnumId" from="employment.taxFederalStatusEnumId"
                                ignore="taxAuthority.taxAuthorityTypeEnumId != 'TatFederal'"/>
                        <econdition field-name="taxStateStatusEnumId" from="employment.taxStateStatusEnumId"
                                ignore="taxAuthority.taxAuthorityTypeEnumId != 'TatState'"/>
                        <econdition field-name="minAllowances" operator="less-equals" from="taxAllowances" or-null="true"/>
                        <econdition field-name="maxAllowances" operator="greater-equals" from="taxAllowances" or-null="true"/>
                    </entity-find>
                    <if condition="stdDeductionList">
                        <set field="stdDeduction" from="stdDeductionList[0]"/>
                        <set field="stdDeductionAmount" from="stdDeduction.amount"/>
                        <set field="basisPayAmount" from="basisPayAmount - stdDeductionAmount"/>
                    </if>
                </if>

                <!-- Find applicable PayrollAllowance Deductions, multiply by (taxFederalAllowances or taxStateAllowances)
                    subtract from basisPayAmount -->
                <if condition="payrollAdjustment.applyAllowanceDeduction == 'Y' &amp;&amp; taxAllowances">
                    <entity-find entity-name="mantle.humanres.employment.PayrollAllowance" list="allowanceList">
                        <date-filter valid-date="payTimestamp"/>
                        <econdition field-name="taxAuthorityId" from="payrollAdjustment.taxAuthorityId"/>
                        <econdition field-name="timePeriodTypeId"/>
                        <econdition field-name="amountTypeEnumId" value="PaatDeduction"/>
                    </entity-find>
                    <if condition="allowanceList">
                        <set field="allowance" from="allowanceList[0]"/>
                        <set field="allowanceDeductionAmount" from="allowance.amount * taxAllowances"/>
                        <set field="basisPayAmount" from="basisPayAmount - allowanceDeductionAmount"/>
                        <if condition="basisPayAmount &lt; 0"><set field="basisPayAmount" from="0"/></if>
                    </if>
                </if>
            </if>

            <!-- Find the applicable PayrollAdjustmentDetail record -->
            <entity-find entity-name="mantle.humanres.employment.PayrollAdjustmentDetail" list="payrollAdjustmentDetailList">
                <econdition field-name="payrollAdjustmentId"/>
                <econdition field-name="ytdMin" operator="less-equals" from="ytdIncome" or-null="true"/>
                <econdition field-name="ytdMax" operator="greater" from="ytdIncome" or-null="true"/>
                <econdition field-name="periodMin" operator="less-equals" from="basisPayAmount" or-null="true"/>
                <econdition field-name="periodMax" operator="greater" from="basisPayAmount" or-null="true"/>
                <order-by field-name="-percentage,-flatAmount"/><!-- should always be one record, but just in case take the highest -->
            </entity-find>

            <!-- <log message="====== ytdIncome=${ytdIncome}, basisPayAmount=${basisPayAmount}, payrollAdjustmentDetailList:\n${payrollAdjustmentDetailList}"/> -->

            <!-- calculate adjustment amount -->
            <if condition="payrollAdjustmentDetailList">
                <set field="adjustmentDetail" from="payrollAdjustmentDetailList[0]"/>

                <set field="percentageBasis" from="basisPayAmount"/>
                <if condition="adjustmentDetail.percAfterYtdMin == 'Y'">
                    <set field="percentageBasis" from="percentageBasis - adjustmentDetail.ytdMin"/></if>
                <if condition="adjustmentDetail.percAfterPeriodMin == 'Y'">
                    <set field="percentageBasis" from="percentageBasis - adjustmentDetail.periodMin"/></if>
                <set field="amount" from="(adjustmentDetail.flatAmount ?: 0) + (((adjustmentDetail.percentage ?: 0) / 100) * percentageBasis)" type="BigDecimal"/>
                <set field="amount" from="amount.setScale(2, BigDecimal.ROUND_HALF_UP)"/>
                <!-- <log message="=== pre-exemption amount=${amount}"/> -->

                <set field="adjustmentApplies" from="true"/>
            </if>

            <!-- Find applicable PayrollAllowance Exemptions, multiply by (taxFederalAllowances or taxStateAllowances)
                subtract from adjustment amount, make sure amount is at least zero -->
            <if condition="payrollAdjustment.applyAllowanceExemption == 'Y' &amp;&amp; taxAllowances">
                <entity-find entity-name="mantle.humanres.employment.PayrollAllowance" list="allowanceExmList">
                    <date-filter valid-date="payTimestamp"/>
                    <econdition field-name="taxAuthorityId" from="payrollAdjustment.taxAuthorityId"/>
                    <econdition field-name="timePeriodTypeId"/>
                    <econdition field-name="amountTypeEnumId" value="PaatExemption"/>
                </entity-find>
                <if condition="allowanceExmList">
                    <set field="allowance" from="allowanceExmList[0]"/>
                    <set field="allowanceExemptionAmount" from="allowance.amount * taxAllowances"/>
                    <!-- for all taxes amount will be negative (so we have a negative adjustment) but exemption amount
                        will be positive so ADD instead of subtract -->
                    <set field="amount" from="amount + allowanceExemptionAmount"/>
                    <if condition="amount &gt; 0"><set field="amount" from="0"/></if>
                </if>
            </if>
        </actions>
    </service>

    <!-- ========== Payroll Tax Reporting Services ========== -->

    <service verb="get" noun="EmploymentWageAndTaxInfo">
        <in-parameters>
            <parameter name="timePeriodId" required="true"><description>Should be a period for a Tax Year/Quarter/etc</description></parameter>
            <parameter name="partyRelationshipId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="timePeriod" type="Map"/>
            <parameter name="employment" type="Map"/>

            <parameter name="employeeFirstName"/>
            <parameter name="employeeMiddleName"/>
            <parameter name="employeeLastName"/>
            <parameter name="employeeSuffix"/>
            <parameter name="employeeSsn"/>
            <parameter name="employeeHomeContactInfo" type="Map"/>
            <parameter name="employeeHomeStreetString"/>
            <parameter name="employeeHomeCszString"/>
            <parameter name="employeeHomeString"/>

            <parameter name="employerName"/>
            <parameter name="employerEin"/>
            <parameter name="employerContactInfo" type="Map"/>
            <parameter name="employerAddressString"/>
            <parameter name="employerPhoneString"/>

            <parameter name="taxablePayAmount" type="BigDecimal"/>
            <parameter name="socialTaxablePayAmount" type="BigDecimal"/>
            <parameter name="medicalTaxablePayAmount" type="BigDecimal"/>
            <parameter name="currencyUomId"/>
            <parameter name="hasAnyPay" type="Boolean"/>

            <parameter name="wageAndTaxInfoByTaxAuthorityId" type="Map"> <description>contains Map with: taxAuthority,
                taxAuthorityGeo, incomeTaxWithheldAmount, socialTaxWithheldAmount, medicalTaxWithheldAmount</description></parameter>

            <parameter name="federalTaxAuthorityIdList" type="List"/>
            <parameter name="stateTaxAuthorityIdList" type="List"/>
            <parameter name="localTaxAuthorityIdList" type="List"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod"/>
            <entity-find-one entity-name="mantle.humanres.employment.EmploymentAndRelationship" value-field="employment"/>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="employeeDetail">
                <field-map field-name="partyId" from="employment?.fromPartyId"/></entity-find-one>
            <set field="employeeFirstName" from="employment?.taxName ?: employeeDetail?.firstName"/>
            <!-- Use the tax middle name if either taxName or taxMiddleName is specified to allow middle name to be blank
                 if is specified on their employee detail record, but is not on their SS Card/ID Card. -->
            <set field="employeeMiddleName" from="employment?.taxName || employment?.taxMiddleName ?: employeeDetail?.middleName"/>
            <set field="employeeLastName" from="employment?.taxLastName ?: employeeDetail?.lastName"/>
            <set field="employeeSuffix" from="employment?.taxNameSuffix ?: employeeDetail?.suffix"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="employeeSsnPi">
                <field-map field-name="partyId" from="employment.fromPartyId"/>
                <field-map field-name="partyIdTypeEnumId" value="PtidSsn"/>
            </entity-find-one>
            <set field="employeeSsn" from="employeeSsnPi?.idValue"/>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="employeeHomeContactInfo"
                    in-map="[partyId:employment.toPartyId, postalContactMechId:employment.taxHomeContactMechId,
                        postalContactMechPurposeId:'PostalHome']"/>
            <!-- TODO: Shouldn't the unit number go along with address line 2? -->
            <script>employeeHomeStreetString = """${employeeHomeContactInfo?.postalAddress?.address1 ? employeeHomeContactInfo.postalAddress.address1 + (employeeHomeContactInfo.postalAddress.unitNumber ? ' #' + employeeHomeContactInfo.postalAddress.unitNumber : '') : ''}${employeeHomeContactInfo?.postalAddress?.address2 ? '\n' + employeeHomeContactInfo.postalAddress.address2 : ''}"""</script>
            <script>employeeHomeCszString = """${employeeHomeContactInfo?.postalAddress ? (employeeHomeContactInfo.postalAddress.city ?: '') + (employeeHomeContactInfo.postalAddressStateGeo?.geoCodeAlpha2 ? ', ' + employeeHomeContactInfo.postalAddressStateGeo.geoCodeAlpha2 : '') + ' ' + (employeeHomeContactInfo.postalAddress.postalCode ?: '') + (employeeHomeContactInfo.postalAddress.postalCodeExt ? '-' + employeeHomeContactInfo.postalAddress.postalCodeExt : '') + (employeeHomeContactInfo.postalAddressCountryGeo?.geoCodeAlpha3 ? ' ' + employeeHomeContactInfo.postalAddressCountryGeo.geoCodeAlpha3 : '') : ''}"""</script>
            <script>employeeHomeString = """${employeeHomeStreetString}\n${employeeHomeCszString}"""</script>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="employerDetail">
                <field-map field-name="partyId" from="employment.toPartyId"/></entity-find-one>
            <set field="employerName" value="${employerDetail.organizationName?:''}${employerDetail.firstName?:''}${employerDetail.lastName ? ' ' + employerDetail.lastName : ''}"/>
            <entity-find-one entity-name="mantle.party.PartyIdentification" value-field="employerEinPi">
                <field-map field-name="partyId" from="employment.toPartyId"/>
                <field-map field-name="partyIdTypeEnumId" value="PtidFein"/>
            </entity-find-one>
            <set field="employerEin" from="employerEinPi?.idValue"/>
            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="employerContactInfo"
                    in-map="[partyId:employment.toPartyId, postalContactMechPurposeId:'PostalTax',
                        telecomContactMechPurposeId:'PhoneTax']"/>
            <script>employerAddressString = """${employerContactInfo?.postalAddress?.address1 ? employerContactInfo.postalAddress.address1 + (employerContactInfo.postalAddress.unitNumber ? ' #' + employerContactInfo.postalAddress.unitNumber : '') + '\n' : ''}${employerContactInfo?.postalAddress?.address2 ? employerContactInfo.postalAddress.address2 + '\n' : ''}${employerContactInfo?.postalAddress ? (employerContactInfo.postalAddress.city ?: '') + (employerContactInfo.postalAddressStateGeo?.geoCodeAlpha2 ? ', ' + employerContactInfo.postalAddressStateGeo.geoCodeAlpha2 : '') + ' ' + (employerContactInfo.postalAddress.postalCode ?: '') + (employerContactInfo.postalAddress.postalCodeExt ? '-' + employerContactInfo.postalAddress.postalCodeExt : '') + (employerContactInfo.postalAddressCountryGeo?.geoCodeAlpha3 ? ' ' + employerContactInfo.postalAddressCountryGeo.geoCodeAlpha3 : '') : ''}"""</script>
            <script>employerPhoneString = """${employerContactInfo?.telecomNumber ? (employerContactInfo.telecomNumber.countryCode ? employerContactInfo.telecomNumber.countryCode + '-' : '') + (employerContactInfo.telecomNumber.areaCode ? employerContactInfo.telecomNumber.areaCode + '-' : '') + (employerContactInfo.telecomNumber.contactNumber ?: '') : ''}"""</script>

            <entity-find entity-name="mantle.humanres.employment.EmploymentPayHistory" list="payHistoryList">
                <econdition field-name="partyRelationshipId"/>
                <econdition field-name="payDate" operator="greater-equals" from="timePeriod.fromDate"/>
                <econdition field-name="payDate" operator="less-equals" from="timePeriod.thruDate"/>
                <econdition field-name="internalPayroll" value="Y"/>
            </entity-find>
            <set field="taxablePayAmount" from="0"/>
            <set field="socialTaxablePayAmount" from="0"/>
            <set field="medicalTaxablePayAmount" from="0"/>
            <iterate list="payHistoryList" entry="payHistory">
                <set field="taxablePayAmount" from="taxablePayAmount + payHistory.taxablePayAmount"/>
                <set field="socialTaxablePayAmount" from="socialTaxablePayAmount + payHistory.socialTaxablePayAmount"/>
                <set field="medicalTaxablePayAmount" from="medicalTaxablePayAmount + payHistory.medicalTaxablePayAmount"/>
                <set field="currencyUomId" from="payHistory.currencyUomId"/><!-- NOTE: assumes all have same currency -->
            </iterate>

            <set field="hasAnyPay" from="taxablePayAmount &gt; 0 || socialTaxablePayAmount &gt; 0 || medicalTaxablePayAmount &gt; 0"/>

            <entity-find entity-name="mantle.humanres.employment.EmploymentPayDetail" list="payDetailList">
                <econdition field-name="partyRelationshipId"/>
                <econdition field-name="payDate" operator="greater-equals" from="timePeriod.fromDate"/>
                <econdition field-name="payDate" operator="less-equals" from="timePeriod.thruDate"/>
                <econdition field-name="isEmployerPaid" operator="not-equals" value="Y" or-null="true"/>
            </entity-find>
            <set field="wageAndTaxInfoByTaxAuthorityId" from="[:]"/>
            <iterate list="payDetailList" entry="payDetail">
                <if condition="!payDetail.taxAuthorityId"><continue/></if>
                <set field="taxAuthorityId" from="payDetail.taxAuthorityId"/>
                <entity-find-one entity-name="mantle.humanres.employment.PayrollAdjustment" value-field="payrollAdjustment">
                    <field-map field-name="payrollAdjustmentId" from="payDetail.payrollAdjustmentId"/></entity-find-one>

                <set field="wageAndTaxInfo" from="wageAndTaxInfoByTaxAuthorityId.get(taxAuthorityId)"/>
                <if condition="!wageAndTaxInfo">
                    <entity-find-one entity-name="mantle.other.tax.TaxAuthority" value-field="taxAuthority"/>
                    <entity-find-one entity-name="moqui.basic.Geo" value-field="taxAuthorityGeo">
                        <field-map field-name="geoId" from="taxAuthority.taxAuthGeoId"/></entity-find-one>
                    <set field="wageAndTaxInfo" from="[taxAuthority:taxAuthority, taxAuthorityGeo:taxAuthorityGeo]"/>
                    <script>wageAndTaxInfoByTaxAuthorityId.put(taxAuthorityId, wageAndTaxInfo)</script>
                </if>
                <script>
                    if (payrollAdjustment.isTax == 'Y') {
                        addToBigDecimalInMap('incomeTaxWithheldAmount', -payDetail.amount, wageAndTaxInfo)
                    } else if (payrollAdjustment.isSocialTax == 'Y') {
                        addToBigDecimalInMap('socialTaxWithheldAmount', -payDetail.amount, wageAndTaxInfo)
                    } else if (payrollAdjustment.isMedicalTax == 'Y') {
                        addToBigDecimalInMap('medicalTaxWithheldAmount', -payDetail.amount, wageAndTaxInfo)
                    }
                </script>
            </iterate>

            <set field="federalTaxAuthorityIdList" from="[]"/>
            <set field="stateTaxAuthorityIdList" from="[]"/>
            <set field="localTaxAuthorityIdList" from="[]"/>
            <iterate list="wageAndTaxInfoByTaxAuthorityId" entry="wageAndTaxInfo" key="taxAuthorityId">
                <if condition="wageAndTaxInfo.taxAuthority.taxAuthorityTypeEnumId == 'TatFederal'">
                    <then><script>federalTaxAuthorityIdList.add(taxAuthorityId)</script></then>
                    <else-if condition="wageAndTaxInfo.taxAuthority.taxAuthorityTypeEnumId == 'TatState'">
                        <script>stateTaxAuthorityIdList.add(taxAuthorityId)</script></else-if>
                    <else-if condition="wageAndTaxInfo.taxAuthority.taxAuthorityTypeEnumId == 'TatLocal'">
                        <script>localTaxAuthorityIdList.add(taxAuthorityId)</script></else-if>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="PeriodWageAndTaxRecords">
        <in-parameters>
            <parameter name="timePeriodId" required="true"><description>Should be a period for a Tax Year/Quarter/etc</description></parameter>
            <parameter name="defaultTaxFormId" default-value="UsaIrsW2"/>
        </in-parameters>
        <actions>
            <!-- lock the TimePeriod, will close later -->
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod" for-update="true"/>

            <if condition="timePeriod.isClosed == 'Y'">
                <message error="true">Not creating wage and text records for period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}, already closed.</message></if>
            <!-- TODO: uncomment this, commented for testing only
            <if condition="ec.user.nowTimestamp.before(timePeriod.thruDate)">
                <message error="true">Not creating wage and text records or closing period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}, period has not ended (ends on ${timePeriod.thruDate}).</message></if>
            -->

            <service-call name="mantle.humanres.PayrollServices.get#TimePeriodEmployments"
                    in-map="[timePeriodId:timePeriodId, ignoreType:true]" out-map="context"/>

            <iterate list="employmentList" entry="employment">
                <entity-find-one entity-name="mantle.humanres.position.EmplPosition" value-field="emplPosition">
                    <field-map field-name="emplPositionId" from="employment.emplPositionId"/></entity-find-one>

                <set field="curTaxFormId" from="employment.taxFormId ?: emplPosition.taxFormId ?: defaultTaxFormId"/>
                <if condition="curTaxFormId == 'UsaIrs1099Misc'"><then>
                    <service-call name="mantle.humanres.PayrollServices.get#UsaIrs1099MiscFormData"
                            out-map="formOut" out-map-add-to-existing="false"
                            in-map="[timePeriodId:timePeriodId, partyRelationshipId:employment.partyRelationshipId]"/>
                </then><else-if condition="curTaxFormId == 'UsaIrsW2'">
                    <service-call name="mantle.humanres.PayrollServices.get#UsaIrsW2FormData"
                            out-map="formOut" out-map-add-to-existing="false"
                            in-map="[timePeriodId:timePeriodId, partyRelationshipId:employment.partyRelationshipId]"/>
                </else-if><else>
                    <message>Not creating wage and tax statement for employee ${employment.fromPartyId} employment ${employment.partyRelationshipId}, no tax form set</message>
                    <continue/>
                </else></if>

                <if condition="!formOut.hasAnyPay">
                    <message>Not creating wage and tax statement for employee ${employment.fromPartyId} employment ${employment.partyRelationshipId}, has no pay</message>
                    <continue/>
                </if>

                <!-- save FormResponse -->
                <service-call name="org.moqui.impl.ScreenServices.create#FormResponse" out-map="responseOut"
                        out-map-add-to-existing="false" in-map="[formId:formOut.formId, responseMap:formOut.formMap]"/>

                <!-- create TaxStatement record -->
                <service-call name="create#mantle.other.tax.TaxStatement"
                        in-map="[timePeriodId:timePeriodId, partyId:employment.fromPartyId,
                            partyRelationshipId:employment.partyRelationshipId, taxAuthorityId:formOut.federalTaxAuthorityId,
                            formId:formOut.formId, formResponseId:responseOut.formResponseId]"/>
            </iterate>

            <!-- close the TimePeriod -->
            <set field="timePeriod.isClosed" value="Y"/>
            <entity-update value-field="timePeriod"/>
        </actions>
    </service>

    <service verb="get" noun="UsaIrsW2FormData">
        <!-- NOTE: currently supports only one federal, state, and local tax authority; to support multiple states with
            different wage/etc amounts other payroll services/etc would also need to be changed -->
        <!-- NOTE: currently uses FEIN for Employer's state ID -->
        <!-- TODO: support multiple tax authorities at each level by making sure the state is related to
            federalTaxAuthorityId, and match local with state -->
        <implements service="mantle.humanres.PayrollServices.get#EmploymentWageAndTaxInfo"/>
        <in-parameters>
            <parameter name="federalTaxAuthorityId" default-value="UsaIrs"/>
            <parameter name="formId" default-value="UsaIrsW2"/>
        </in-parameters>
        <out-parameters>
            <parameter name="federalTaxAuthorityId"/>
            <parameter name="formId"/>
            <parameter name="formMap" type="Map">
                <parameter name="w2_a"/><parameter name="w2_b"/><parameter name="w2_c"/>
                <parameter name="w2_e1"/><parameter name="w2_e2"/><parameter name="w2_e3"/><parameter name="w2_f"/>
                <parameter name="w2_01"/><parameter name="w2_02"/><parameter name="w2_03"/><parameter name="w2_04"/>
                <parameter name="w2_05"/><parameter name="w2_06"/>
                <parameter name="w2_15as"/><parameter name="w2_15ae"/><parameter name="w2_16a"/><parameter name="w2_17a"/>
                <parameter name="w2_18a"/><parameter name="w2_19a"/><parameter name="w2_20a"/>
            </parameter>
        </out-parameters>
        <actions>
            <service-call name="mantle.humanres.PayrollServices.get#EmploymentWageAndTaxInfo" in-map="context" out-map="context"/>
            <set field="formMap" from="[:]"/>

            <set field="formMap.w2_a" from="employeeSsn"/>
            <set field="formMap.w2_b" from="employerEin"/>
            <set field="formMap.w2_c" value="${employerName}\n${employerAddressString}"/>
            <set field="formMap.w2_e1" from="employeeFirstName + (employeeMiddleName ? ' ' + employeeMiddleName : '')"/>
            <set field="formMap.w2_e2" from="employeeLastName"/>
            <set field="formMap.w2_e3" from="employeeSuffix"/>
            <set field="formMap.w2_f" from="employeeHomeString"/>

            <set field="formMap.w2_01" from="ec.l10n.format(taxablePayAmount, '#,##0.00')"/>
            <set field="formMap.w2_03" from="ec.l10n.format(socialTaxablePayAmount, '#,##0.00')"/>
            <set field="formMap.w2_05" from="ec.l10n.format(medicalTaxablePayAmount, '#,##0.00')"/>

            <set field="federalWageAndTaxInfo" from="wageAndTaxInfoByTaxAuthorityId.get(federalTaxAuthorityId)"/>
            <set field="formMap.w2_02" from="ec.l10n.format(federalWageAndTaxInfo?.incomeTaxWithheldAmount, '#,##0.00')"/>
            <set field="formMap.w2_04" from="ec.l10n.format(federalWageAndTaxInfo?.socialTaxWithheldAmount, '#,##0.00')"/>
            <set field="formMap.w2_06" from="ec.l10n.format(federalWageAndTaxInfo?.medicalTaxWithheldAmount, '#,##0.00')"/>

            <set field="stateTaxAuthorityId" from="stateTaxAuthorityIdList ? stateTaxAuthorityIdList[0] : 0"/>
            <set field="stateWageAndTaxInfo" from="wageAndTaxInfoByTaxAuthorityId.get(stateTaxAuthorityId)"/>
            <if condition="stateWageAndTaxInfo">
                <set field="formMap.w2_15as" from="stateWageAndTaxInfo.taxAuthorityGeo?.geoCodeAlpha2"/>
                <set field="formMap.w2_15ae" from="employerEin"/>
                <set field="formMap.w2_16a" from="ec.l10n.format(taxablePayAmount, '#,##0.00')"/>
                <set field="formMap.w2_17a" from="ec.l10n.format(stateWageAndTaxInfo.incomeTaxWithheldAmount, '#,##0.00')"/>
            </if>

            <set field="localTaxAuthorityId" from="localTaxAuthorityIdList ? localTaxAuthorityIdList[0] : 0"/>
            <set field="localWageAndTaxInfo" from="wageAndTaxInfoByTaxAuthorityId.get(localTaxAuthorityId)"/>
            <if condition="localWageAndTaxInfo">
                <set field="formMap.w2_18a" from="ec.l10n.format(taxablePayAmount, '#,##0.00')"/>
                <set field="formMap.w2_19a" from="ec.l10n.format(localWageAndTaxInfo.incomeTaxWithheldAmount, '#,##0.00')"/>
                <!-- TODO: this may need to be shortened to fit in printed form field -->
                <set field="formMap.w2_20a" from="localWageAndTaxInfo.taxAuthorityGeo.geoName"/>
            </if>
        </actions>
    </service>

    <service verb="generate" noun="Efw2File">
        <in-parameters>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="submitterPartyId" required="true"/>
            <parameter name="companyPartyId"/> <!-- Defaults to time period party -->
            <parameter name="agentPartyId"/> <!-- Defaults to no agent -->
            <parameter name="resubWfid" default=""/> <!-- If resubmission, the WFID issued by SSA -->
            <parameter name="preparerCode" default="L"/>
            <parameter name="terminatingBusiness" default="N"/>
        </in-parameters>
        <out-parameters>
            <parameter name="fileText"/>
        </out-parameters>
        <actions>
            <!--
                What character sets may I use?
                    * American Standard Code for Information Interchange-1 (ASCII-1) for BSO submitters.
                    * Extended Binary Coded Decimal Interchange Code (EBCDIC) or ASCII for EDT submitters.
                    * See Appendix D for character sets.
                Are there any restrictions concerning the number of records for an EFW2 file?
                    * If your organization files on behalf of multiple employers, include no more than 1 million RW Records
                        or 50,000 RE Records per submission.
                    * Following these guidelines will help to ensure that your wage data is processed in a timely manner.
                What is the length of each record?
                    * 512 bytes.
                What case letters must I use?
                    * Use alphabetic upper-case letters for all fields other than the “Contact E-Mail/Internet” field in the
                        RA Record and the “Employer Contact E-Mail/Internet” field in the RE Record (positions 446-485).
                    * For the "Contact E-Mail/Internet" field in the RA Record (positions 446 - 485) and in the
                        “Employer Contact E-Mail/Internet” RE Record (positions 279-318), use upper and/or lower case letters
                        as needed to show the exact electronic mail address.
                What rules do you have for alpha/numeric fields?
                    * Left justify and fill with blanks.
                    * Where the "field" shows "Blank," all positions must be blank, not zeros.
                What rules do you have for money fields?
                    * Must contain only numbers.
                    * No punctuation.
                    * No signed amounts (high order signed or low order signed).
                    * Include both dollars and cents with the decimal point assumed (example: $59.60 = 00000005960).
                    * Do not round to the nearest dollar (example: $5,500.99 = 00000550099).
                    * Right justify and zero fill to the left.
                    * Any money field that has no amount to be reported must be filled with zeros, not blanks.
                What rules do you have for reporting Wages, Tips, and Other Compensation and Income Tax Withheld?
                    * The tax jurisdiction code reported in position 220 of the RE Record tells SSA how to process the report.
                    * Note section 4.2.1 where US Territories and Protectorates have special places for Income:
                        - Puerto Rico (P)
                        - Virgin Islands (V)
                        - Guam (G)
                        - American Samoa (S)
                        - Northern Mariana Islands (N)
                What rules do you have for the format of the employee name?
                    * Enter the name exactly as shown on the individual's Social Security card.
                    * Must be submitted in the individual name fields:
                        - Employee First Name
                        - Employee Middle Name or Initial (if shown on Social Security card)
                        - Employee Last Name
                        - Suffix (if shown on Social Security card)
                    * Do not include any titles.
                What rules do you have for the Social Security Number (SSN)?
                    * Use the number shown on the original/replacement SSN card.
                    * Only numeric characters.
                    * Omit hyphens.
                    * May not begin with a 666 or 9.
                    * If there is no SSN available for the employee, enter zeros (0) in positions 3 - 11 of the RW Record, and
                        have your employee call 1-800-772-1213 or visit their local Social Security office to obtain an SSN.
            -->

            <!-- Create RA Submitter Record (Required) -->
            <!-- Loop Across Employers (Time Periods are per employer; there will only be one employer) -->
            <!-- Create RE Employer Record (Required) -->
            <!-- Loop Across Employees -->
            <!-- Create RW Employee Wage Record (Required) -->
            <!-- Create RO Employee Wage Record (Optional) -->
            <!-- Create RS State Wage Record (Optional) -->
            <!-- Create RT Total Record (Required) -->
            <!-- Create RU Total Record (Optional) -->
            <!-- Create RV State Total Record (Optional) -->
            <!-- Create RF Final Record (Required) -->

            <service-call name="mantle.other.TaxServices.get#PayerTaxInfo" in-map="[partyId:submitterPartyId]" out-map="submitter"/>
            <if condition="submitter == null"><return error="true" message="Submitter is required."/></if>

            <!-- Agents are optional, and are defined per employer, but this only uses one -->
            <service-call name="mantle.other.TaxServices.get#PayerTaxInfo" in-map="[partyId:agentPartyId]" out-map="agent"/>

            <!-- get employmentList and timePeriod -->
            <service-call name="mantle.humanres.PayrollServices.get#TimePeriodEmployments"
                          in-map="[timePeriodId:timePeriodId, ignoreType:true]" out-map="context"/>
            <if condition="!timePeriod"><return error="true" message="Time period is invalid"/></if>
            <if condition="!employmentList"><return error="true" message="No employements found for time period"/></if>

            <!-- EFW2 supports multiple employers even though time periods only encompass one -->
            <!-- If a company is passed in, use it; otherwise use the party from the time period -->
            <service-call name="mantle.other.TaxServices.get#PayerTaxInfo" in-map="[partyId:companyPartyId?:timePeriod?.partyId]" out-map="company"/>
            <set field="employerList" from="[company]"/>


            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityValue
                ExecutionContext ec = context.ec

                List<StringBuilder> lines = []

                ////////////////////////////////////////////////////////////////////////////////
                // RA Submitter Record (Required)
                ////////////////////////////////////////////////////////////////////////////////
                StringBuilder raHeader = new StringBuilder(512)
                // Record Identifier (1-2, 2)
                raHeader.append("RA")

                // Submitter's Employer Identification Number (EIN) (3-11, 9)
                raHeader.append(submitter?.ein?.replaceAll("\\p{P}", "")?.padLeft(9, '0')?.take(9)) // Remove all punctuation

                // User Identification (User ID) (12-10, 8)
                raHeader.append(submitter?.uid?.toUpperCase()?.padRight(8, ' ')?.take(8))

                // Software Vendor Code (20-13, 4)
                String softwareVendorCode = ec.user.getPreference('org.nactp.software.vendor.id') ?: ""
                raHeader.append(softwareVendorCode.padRight(4, ' ')?.take(4))

                // Blank (24-28, 5)
                raHeader.append("".padRight(5, ' '))

                // Resub Indicator (29-29, 1) // 1 if being resubmitted, otherwise 0
                raHeader.append(resubWfid.trim().empty() ? "0" : "1")

                // Resub Wage File Identifier (WFID) (30-35, 6)
                raHeader.append(resubWfid?.toUpperCase()?.padRight(6, ' ')?.take(6))

                // Software Code (36-37, 2)
                raHeader.append(softwareVendorCode.empty() ? "98" : "99")

                //******************************************************************************
                // Company
                //******************************************************************************
                // Company Name (38-94, 57)
                raHeader.append(company?.name?.toUpperCase()?.padRight(57, ' ')?.take(57))

                // Location Address (95-116, 22) (Attention, Suite, Room Number, etc.)
                String cmpAddress2 = company?.contactInfo?.postalAddress?.address2 ?: ''
                String cmpUnit = company?.contactInfo?.postalAddress?.unit ? '#' + company?.contactInfo?.postalAddress?.address2 : ''
                String cmpLocAddress = cmpAddress2 ? (cmpUnit ? (cmpAddress2 + ' ' + cmpUnit) : cmpAddress2) : cmpUnit
                raHeader.append(cmpLocAddress.padRight(22, ' ')?.take(22))

                // Delivery Address (117-138, 22) (Street Number and Name or PO Box)
                raHeader.append(company?.contactInfo?.postalAddress?.address1?.toUpperCase()?.padRight(22, ' ')?.take(22))

                // City (139-160, 22)
                raHeader.append(company?.contactInfo?.postalAddress?.city?.toUpperCase()?.padRight(22, ' ')?.take(22))

                // State Abbreviation (161-162, 2) Foreign Addresses fill with blanks
                Boolean cmpHasUsAddress = company?.contactInfo?.postalAddressCountryGeo?.geoId == 'USA'
                raHeader.append((cmpHasUsAddress ? company?.contactInfo?.postalAddressStateGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(2, ' ')?.take(2))

                // Zip Code (163-167, 5) For a foreign address, fill with blanks
                raHeader.append((cmpHasUsAddress ? company?.contactInfo?.postalCode : '')?.toUpperCase()?.padRight(5, ' ')?.take(5))

                // Zip Code Extension (168-171, 4) If not applicable, fill with blanks
                raHeader.append((cmpHasUsAddress ? company?.contactInfo?.postalCodeExt : '')?.toUpperCase()?.padRight(4, ' ')?.take(4))

                // Blank (172-176, 5)
                raHeader.append("".padRight(5, ' '))

                // Foreign State/Province (177-199, 23) If applicable, otherwise blank
                raHeader.append((!cmpHasUsAddress ? company?.contactInfo?.postalAddressStateGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(23, ' ')?.take(23))

                // Foreign Postal Code (200-214, 15)
                raHeader.append((!cmpHasUsAddress ? company?.contactInfo?.postalCode : '')?.toUpperCase()?.padRight(15, ' ')?.take(15))

                // Country Code (215-216, 2) If one of the following, fill with blanks:
                    // * One of the 50 States of the U.S.A.
                    // * District of Columbia
                    // * Military Post Office (MPO)
                    // * American Samoa
                    // * Guam
                    // * Northern Mariana Islands
                    // * Puerto Rico
                    // * Virgin Islands
                    // * Otherwise, enter the applicable Country Code (see Appendix G).
                raHeader.append((!cmpHasUsAddress ? company?.contactInfo?.postalAddressCountryGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(2, ' ')?.take(2))

                //******************************************************************************
                // Submitter
                //******************************************************************************
                // Submitter Name (217-273, 57)
                raHeader.append(submitter?.name?.toUpperCase()?.padRight(57, ' ')?.take(2))

                // Location Address (274-295, 22) (Attention, Suite, Room Number, etc.)
                String subAddress2 = submitter?.contactInfo?.postalAddress?.address2 ?: ''
                String subUnit = submitter?.contactInfo?.postalAddress?.unit ? '#' + submitter?.contactInfo?.postalAddress?.address2 : ''
                String subLocAddress = subAddress2 ? (subUnit ? (subAddress2 + ' ' + subUnit) : subAddress2) : subUnit
                raHeader.append(subLocAddress?.toUpperCase()?.padRight(22, ' ')?.take(22))

                // Delivery Address (296-317, 22) (Street Number and Name or PO Box)
                raHeader.append(submitter?.contactInfo?.postalAddress?.address1?.toUpperCase()?.padRight(22, ' ')?.take(22))

                // City (318-339, 22)
                raHeader.append(submitter?.contactInfo?.postalAddress?.city?.toUpperCase()?.padRight(22, ' ')?.take(22))

                // State Abbreviation (340-341, 2) Foreign Addresses fill with blanks
                Boolean subHasUsAddress = submitter?.contactInfo?.postalAddressCountryGeo?.geoId == 'USA'
                raHeader.append((subHasUsAddress ? submitter?.contactInfo?.postalAddressStateGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(2, ' ')?.take(2))

                // Zip Code (342-346, 5) For a foreign address, fill with blanks
                raHeader.append((subHasUsAddress ? submitter?.contactInfo?.postalCode : '')?.toUpperCase()?.padRight(5, ' ')?.take(5))

                // Zip Code Extension (347-350, 4) If not applicable, fill with blanks
                raHeader.append((subHasUsAddress ? submitter?.contactInfo?.postalCodeExt : '')?.toUpperCase()?.padRight(4, ' ')?.take(4))

                // Blank (351-355, 5)
                raHeader.append("".padRight(5, ' '))
                // Foreign State/Province (356-378, 23) If applicable, otherwise blank
                raHeader.append((!subHasUsAddress ? submitter?.contactInfo?.postalAddressStateGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(23, ' ')?.take(23))

                // Foreign Postal Code (379-393, 15)
                raHeader.append((!subHasUsAddress ? submitter?.contactInfo?.postalCode : '')?.toUpperCase()?.padRight(15, ' ')?.take(15))

                // Country Code (394-395, 2) If one of the following, fill with blanks:
                    // * One of the 50 States of the U.S.A.
                    // * District of Columbia
                    // * Military Post Office (MPO)
                    // * American Samoa
                    // * Guam
                    // * Northern Mariana Islands
                    // * Puerto Rico
                    // * Virgin Islands
                    // * Otherwise, enter the applicable Country Code (see Appendix G).
                raHeader.append((!subHasUsAddress ? submitter?.contactInfo?.postalAddressCountryGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(2, ' ')?.take(2))

                // Contact Name (396-422, 27) Submitter Contact Name
                raHeader.append(submitter?.contactInfo?.toName?.toUpperCase()?.padRight(27, ' ')?.take(2))

                // Contact Phone Number (423-437, 15) contact phone with numeric values only (including area code) left justify and blank fill
                raHeader.append(submitter?.phoneString?.replaceAll("\\p{P}", "")?.padRight(15, ' ')?.take(15))

                // Contact Phone Extension (438-442, 5), left justify and blank fill
                raHeader.append(submitter?.contactInfo?.telecomExtension?.replaceAll("\\p{P}", "")?.padRight(5, ' ')?.take(5))

                // Blank (443-445, 3)
                raHeader.append("".padRight(3, ' '))

                // Contact E-Mail Internet (446-485, 40) Cannot be blank, can be mixed case
                raHeader.append(submitter?.contactInfo?.postalAddressStateGeo?.emailAddress?.padRight(40, ' ')?.take(40))

                // Blank (486-488, 3)
                raHeader.append("".padRight(3, ' '))

                // Contact Fax (489-498, 10) for US Only, includes area code
                raHeader.append(submitter?.faxString.replaceAll("\\p{P}", "")?.padRight(10, ' ')?.take(10))

                // Blank (499-499, 1)
                raHeader.append("".padRight(1, ' '))

                // Preparer Code (500-500, 1)
                // Enter one of the following codes to indicate who prepared this file:
                //     * A (Accounting Firm)
                //     * L (Self-Prepared)
                //     * S (Service Bureau)
                //     * P (Parent Company)
                //     * O (Other)
                // Note: If more than one code applies, use the code that best describes who prepared this file.
                raHeader.append(preparerCode?.toUpperCase()?.padRight(1, ' ')?.take(1))

                // Blank (501-512, 12)
                raHeader.append("".padRight(12, ' '))

                lines.add(raHeader)

                // employerList is allowed to contain more than one employer, but will only contain the one for the time period
                for (Map employer in employerList) {
                    ////////////////////////////////////////////////////////////////////////////////
                    // RE Empolyer Record (Required)
                    ////////////////////////////////////////////////////////////////////////////////
                    StringBuilder reHeader = new StringBuilder(512)
                    // Record Identifier (1-2, 2)
                    reHeader.append("RE")
                    // Tax Year (3-6, 4)
                    reHeader.append(timePeriod?.periodNum?.replaceAll("\\p{P}", "")?.padLeft(4, '0')?.take(4))

                    // Agent Identifier Code (7-1, 1)
                    // NOTE: Review Section 2.1 - Agent Determination before entering a “1,” “2” or “3” in this field.
                    // If applicable, enter one of the following codes:
                    //    * "1" 2678 Agent (Approved by IRS)
                    //    * "2" Common Paymaster (A corporation that pays an employee who works for two or more related corporations at the same time.)
                    //    * "3" 3504 Agent
                    // Otherwise, fill with a blank.
                    // TODO: This is a per employer field, but uses a common agent since this only handles a single employer
                    reHeader.append((agent?.federalAgentIndicatorCode ?: '')?.toUpperCase()?.padRight(1, ' ')?.take(1))

                    // Employer/Agent Identification Number (EIN) (8-16, 9)
                    //    * Enter only numeric characters.
                    //    * Omit hyphens.
                    //    * Do not begin with 00, 07, 08, 09, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79 or 89.
                    //    * Enter the EIN under which tax payments were submitted to the IRS under Form 941, 943, 944, CT-1 or Schedule H.
                    //        - If employer tax payments were deposited under the EIN of the Agent, enter the EIN of the Agent.
                    //        - If employer tax payments were deposited under the EIN of the employer, enter the EIN of the employer.
                    //    * If you entered a “1”, “2” or “3” in the Agent Indicator Code field (position 7); enter the EIN of the Agent.
                    //    * See “Other EIN” (positions 31- 39) if taxes were deposited under more than one EIN during the year.
                    reHeader.append((agent ?: employer)?.ein?.replaceAll("\\p{P}", "")?.padLeft(9, '0')?.take(9)) // Removes all punctuation

                    // Agent for EIN (17-25, 9)
                    //    If you entered a "1" in the Agent Indicator Code field (position 7), enter the Employer’s EIN for which you
                    //    are an Agent.  Otherwise, fill with blanks
                    reHeader.append((agent ? employer?.ein : '')?.replaceAll("\\p{P}", "")?.padLeft(9, '0')?.take(9)) // Removes all punctuation

                    // Terminating Business Indicator(26-26, 1)
                    //     If this is the last tax year that W-2s will be filed under this EIN, enter "1."  Otherwise, enter "0" (zero).
                    reHeader.append(terminatingBusiness != 'Y' ? '0' : '1')

                    // Establishment Number (27-30, 4)
                    //     For multiple RE Records with the same EIN, you may use this field to assign a unique identifier for
                    //     each RE Record (i.e., store for factory locations or types of payroll). Enter any combination of
                    //     blanks, numbers, letters or keyboard characters.  Otherwise, fill with blanks.
                    reHeader.append(""?.toUpperCase()?.padRight(4, ' ')?.take(4)) // This would require a repeating RE section because of the same EIN if used

                    // Other EIN (31-39, 9)
                    //     For this tax year, if you submitted tax payments to the IRS under Form 941, 943, 944, CT-1 or Schedule H
                    //     or W-2 data to SSA, and you used an EIN different from the EIN in positions 8 - 16, enter the other EIN.
                    reHeader.append(""?.replaceAll("\\p{P}", "")?.padLeft(9, '0')?.take(9)) // Hard coded to no other EIN used during the year; There is no EIN history?

                    //******************************************************************************
                    // Employer
                    //******************************************************************************
                    // Employer Name (40-96, 57)
                    reHeader.append(employer?.name?.toUpperCase()?.padRight(57, ' ')?.take(57))

                    // Location Address (97-118, 22) (Attention, Suite, Room Number, etc.)
                    String emprAddress2 = company?.contactInfo?.postalAddress?.address2 ?: ''
                    String emprUnit = company?.contactInfo?.postalAddress?.unit ? '#' + employer?.contactInfo?.postalAddress?.address2 : ''
                    String emprLocAddress = emprAddress2 ? (emprUnit ? (emprAddress2 + ' ' + emprUnit) : emprAddress2) : emprUnit
                    reHeader.append(emprLocAddress?.toUpperCase()?.padRight(22, ' ')?.take(22))

                    // Delivery Address (119-140, 22) (Street Number and Name or PO Box)
                    reHeader.append(employer?.contactInfo?.postalAddress?.toUpperCase()?.padRight(22, ' ')?.take(22))

                    // City (141-162, 22)
                    reHeader.append(employer?.contactInfo?.postalAddress?.city?.toUpperCase()?.padRight(22, ' ')?.take(22))

                    // State Abbreviation (163-164, 2) Foreign Addresses fill with blanks
                    Boolean emprHasUsAddress = employer?.contactInfo?.postalAddressCountryGeo?.geoId == 'USA'
                    reHeader.append((emprHasUsAddress ? employer?.contactInfo?.postalAddressStateGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(2, ' ')?.take(2))

                    // Zip Code (165-169, 5) For a foreign address, fill with blanks
                    reHeader.append((emprHasUsAddress ? employer?.contactInfo?.postalCode : '')?.toUpperCase()?.padRight(5, ' ')?.take(5))

                    // Zip Code Extension (170-173, 4) If not applicable, fill with blanks
                    reHeader.append((emprHasUsAddress ? employer?.contactInfo?.postalCodeExt : '')?.toUpperCase()?.padRight(4, ' ')?.take(4))

                    // Kind of Employer (174-174, 1)
                    //    Enter the appropriate kind of employer:
                    //        F = Federal govt.
                    //            (Federal government entity or instrumentality)
                    //        S = State/local non-501c.
                    //            (State or local government or instrumentality (this includes cities, townships, counties,
                    //             special-purpose districts or other publicly-owned entities with governmental authority))
                    //        T = 501c non-govt.
                    //            (Non-governmental tax-exempt section 501(c) organization (types of 501(c) non-governmental
                    //             organizations include private foundations, public charities, social and recreation clubs and
                    //             veterans organizations))
                    //        Y = State/local 501c.
                    //             (State or local government or instrumentality where the employer received a determination
                    //              letter from the IRS indication that they are also a tax-exempt organization under section 501(c)(3))
                    //        N = None Apply
                    // Note: Leave blank if the Tax Jurisdiction Code in position 220 of the RE Record is P (Puerto Rico).
                    // TODO: Hard coded to non federal/state/local govt.
                    // TODO: Does not consider Puerto Rico
                    reHeader.append("N"?.toUpperCase()?.padRight(1, ' ')?.take(1)) // Hard Coded to None Apply

                    // Foreign State/Province (179-201, 23) If applicable, otherwise blank
                    reHeader.append((!emprHasUsAddress ? employer?.contactInfo?.postalAddressStateGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(23, ' ')?.take(23))

                    // Foreign Postal Code (202-216, 15)
                    reHeader.append((!emprHasUsAddress ? employer?.contactInfo?.postalCode : '')?.toUpperCase()?.padRight(15, ' ')?.take(15))

                    // Country Code (217-218, 2) If one of the following, fill with blanks:
                    //    * One of the 50 States of the U.S.A.
                    //    * District of Columbia
                    //    * Military Post Office (MPO)
                    //    * American Samoa
                    //    * Guam
                    //    * Northern Mariana Islands
                    //    * Puerto Rico
                    //    * Virgin Islands
                    //    * Otherwise, enter the applicable Country Code (see Appendix G).
                    reHeader.append((!emprHasUsAddress ? employer?.contactInfo?.postalAddressCountryGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(2, ' ')?.take(2))

                    // Employment Code (219-219, 1)
                    //    Enter the appropriate employment code:
                    //        A = Agriculture                              Form 943
                    //        H = Household                                Schedule H
                    //        M = Military                                 Form 941
                    //        Q = Medicare Qualified Government Employment Form 941
                    //        X = Railroad                                 CT-1
                    //        F = Regular                                  Form 944
                    //        R = Regular (all others)                     Form 941
                    //    If the Tax Jurisdiction Code in position 220 of the RE Record is blank (domestic), reporting Employment
                    //        Code ‘Q’ (MQGE) is valid for tax year 1983 through the current tax year.
                    //    If the Tax Jurisdiction Code in position 220 of the RE Record is P, V, G, S, or N (not domestic),
                    //        reporting Employment Code ‘Q’ (MQGE) is valid for tax years 1986 through the current tax year.
                    //    Note: Railroad reporting is not applicable for Puerto Rico and territorial employers.
                    reHeader.append(employer?.partyAcctgPreference?.employerClassification?.enumCode?.toUpperCase()?.padRight(1, ' ')?.take(1))

                    // Tax Jurisdiction Code (220-220, 1)
                    //    Enter the code that identifies the type of income tax withheld from the employee’s earnings.
                    //    Blank =                      W-2
                    //    V = Virgin Islands           W-2VI
                    //    G = Guam                     W-2GU
                    //    S = American Samoa           W-2AS
                    //    N = Northern Mariana Islands W-2CM
                    //    P = Puerto Rico              W-2PR/499R-2
                    // TODO: Does not consider/check for non W-2 alternatives
                    // TODO: If other W-2 alternatives are used, these likely need to be in their own RE record as would the employees
                    reHeader.append(""?.toUpperCase()?.padRight(1, ' ')?.take(1))

                    // Third Party Sick Pay Indicator (221-221, 1)
                    //    Enter “1” for a sick pay indicator.  Otherwise, enter "0" (zero).
                    // TODO: Third Party Sick Pay is ignored
                    reHeader.append("0"?.toUpperCase()?.padRight(1, ' ')?.take(1))

                    // Employer Contact Name (222-248, 27)
                    reHeader.append(employer?.contactInfo?.toName?.toUpperCase()?.padRight(27, ' ')?.take(2))

                    // EmployerContact Phone Number (249-263, 15) contact phone with numeric values only (including area code), left justify and blank fill
                    reHeader.append(employer?.phoneString?.replaceAll("\\p{P}", "")?.padRight(15, ' ')?.take(15))

                    // EmployerContact Phone Extension (264-268, 5), left justify and blank fill
                    reHeader.append(employer?.contactInfo?.telecomExtension?.replaceAll("\\p{P}", "")?.padRight(5, ' ')?.take(5))

                    // Employer Contact Fax (489-498, 10) for US Only, includes area code
                    reHeader.append(employer?.faxString?.replaceAll("\\p{P}", "")?.padRight(10, ' ')?.take(10))

                    // EmployerContact E-Mail Internet (446-485, 40) Cannot be blank, can be mixed case
                    reHeader.append(employer?.contactInfo?.postalAddressStateGeo?.emailAddress?.padRight(40, ' ')?.take(40))

                    // Blank (319-512, 194)
                    reHeader.append("".padRight(194, ' '))

                    lines.add(reHeader)

                    // For each employee
                    for (Map employment in employmentList) {
                        Map taxInfo = ec.service.sync().name("mantle.humanres.PayrollServices.get#EmploymentWageAndTaxInfo")
                                .parameters([timePeriodId:timePeriodId, partyRelationshipId:employment.partyRelationshipId]).call()
                        Map federalWageAndTaxInfo = taxInfo?.wageAndTaxInfoByTaxAuthorityId.get('UsaIrs')

                        ////////////////////////////////////////////////////////////////////////////////
                        // RW Employee Record (Required)
                        ////////////////////////////////////////////////////////////////////////////////
                        StringBuilder rwHeader = new StringBuilder(512)
                        // Record Identifier (1-2, 2)
                        rwHeader.append("RW")

                        // Social Security Number (SSN) (3-11, 9)
                        rwHeader.append(taxInfo?.employeeSsn?.replaceAll("\\p{P}", "")?.padLeft(9, '0')?.take(9))

                        // Employee First Name (12-26, 15)
                        //    Enter the employee's first name as shown on the Social Security card.
                        rwHeader.append(taxInfo?.employeeFirstName?.toUpperCase()?.padLeft(15, '0')?.take(15))

                        // Employee Middle Name (27-41, 15)
                        //    Enter the employee's middle name or initial as shown on the Social Security card.
                        rwHeader.append(taxInfo?.employeeMiddleName?.toUpperCase()?.padLeft(15, '0')?.take(15))

                        // Employee Last Name (42-61, 20)
                        //    Enter the employee's last name as shown on the Social Security card.
                        rwHeader.append(taxInfo?.employeeLastName?.toUpperCase()?.padLeft(20, '0')?.take(20))

                        // Employee Name Suffix (62-65, 4)
                        //    If applicable, enter the employee’s alphabetic suffix. For example: SR, JR
                        rwHeader.append(taxInfo?.employeeLastName?.replaceAll("\\p{P}", "")?.toUpperCase()?.padLeft(4, '0')?.take(4))

                        // Location Address (66-87, 22) (Attention, Suite, Room Number, etc.)
                        String empeAddress2 = taxInfo?.employeeHomeContactInfo?.postalAddress?.address2 ?: ''
                        String empeUnit = taxInfo?.employeeHomeContactInfo?.postalAddress?.unit ? '#' + taxInfo?.contactInfo?.postalAddress?.address2 : ''
                        String empeLocAddress = empeAddress2 ? (empeUnit ? (empeAddress2 + ' ' + empeUnit) : empeAddress2) : empeUnit
                        rwHeader.append(empeLocAddress.padRight(22, ' ')?.take(22))

                        // Delivery Address (88-109, 22) (Street Number and Name or PO Box)
                        rwHeader.append(taxInfo?.employeeHomeContactInfo?.postalAddress?.toUpperCase()?.padRight(22, ' ')?.take(22))

                        // City (110-131, 22)
                        rwHeader.append(taxInfo?.employeeHomeContactInfo?.postalAddress?.city?.toUpperCase()?.padRight(22, ' ')?.take(22))

                        // State Abbreviation (132-133, 2) Foreign Addresses fill with blanks
                        Boolean empeHasUsAddress = taxInfo?.employeeHomeContactInfo?.postalAddressCountryGeo?.geoId == 'USA'
                        rwHeader.append((empeHasUsAddress ? taxInfo?.employeeHomeContactInfo?.postalAddressStateGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(2, ' ')?.take(2))

                        // Zip Code (134-138, 5) For a foreign address, fill with blanks
                        rwHeader.append((empeHasUsAddress ? taxInfo?.employeeHomeContactInfo?.postalCode : '')?.toUpperCase()?.padRight(5, ' ')?.take(5))

                        // Zip Code Extension (139-142, 4) If not applicable, fill with blanks
                        rwHeader.append((empeHasUsAddress ? taxInfo?.employeeHomeContactInfo?.postalCodeExt : '')?.toUpperCase()?.padRight(4, ' ')?.take(4))

                        // Blank (143-147, 5)
                        rwHeader.append("".padRight(5, ' '))

                        // Foreign State/Province (148-170, 23) If applicable, otherwise blank
                        rwHeader.append((!empeHasUsAddress ? taxInfo?.employeeHomeContactInfo?.postalAddressStateGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(23, ' ')?.take(23))

                        // Foreign Postal Code (171-185, 15)
                        rwHeader.append((!empeHasUsAddress ? taxInfo?.employeeHomeContactInfo?.postalCode : '')?.toUpperCase()?.padRight(15, ' ')?.take(15))

                        // Country Code (187-198, 2) If one of the following, fill with blanks:
                        //    * One of the 50 States of the U.S.A.
                        //    * District of Columbia
                        //    * Military Post Office (MPO)
                        //    * American Samoa
                        //    * Guam
                        //    * Northern Mariana Islands
                        //    * Puerto Rico
                        //    * Virgin Islands
                        //    * Otherwise, enter the applicable Country Code (see Appendix G).
                        rwHeader.append((!empeHasUsAddress ? taxInfo?.employeeHomeContactInfo?.postalAddressCountryGeo?.geoCodeAlpha2 : '')?.toUpperCase()?.padRight(2, ' ')?.take(2))

                        // Wages, Tips, and Other Compensation (188-198, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    Implied decimal
                        //    Does not apply to Puerto Rico, Virgin Islands, American Samoa, Guam or Northern Mariana Islands employees.
                        // TODO: This is hard coded to W-2; it does not consider US territories, nor omit them
                        // TODO: If/when this is implemented, it is likely that that the non-W2 handling may require separate employer RE records for each
                        rwHeader.append(ec.l10n.format(taxInfo?.taxablePayAmount, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Federal Income Tax Withheld (199-209, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    Implied decimal
                        //    Does not apply to Puerto Rico, Virgin Islands, American Samoa, Guam or Northern Mariana Islands employees.
                        // TODO: This is hard coded to W-2; it does not consider US territories, nor omit them
                        // TODO: If/when this is implemented, it is likely that that the non-W2 handling may require separate employer RE records for each
                        rwHeader.append(ec.l10n.format(federalWageAndTaxInfo?.incomeTaxWithheldAmount, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Social Security Wages (210-220, 11)
                        //    Zero fill if the Employment Code reported in position 219 of the preceding RE Employer Record is
                        //        Q (MGQE) or X (Railroad).
                        //    If Employment Code is H (Household) and the tax year is 1994 or later, the sum of this field and the
                        //        Social Security Tips field must be equal to or greater than the annual Household minimum for the
                        //        tax year being reported. Otherwise, report zeros. See Appendix H.
                        //    The sum of this field and the Social Security Tips field should not exceed the annual maximum Social
                        //        Security wage base for the tax year ($118,500 for tax year 2016). See Appendix H.
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        // TODO: No consideration is made for Q (MGQE) or X (Railroad) employees
                        // TODO: No consideration is made for H (Household) employees
                        // TODO: There is no check against the PayrollAdjustmentDetail for the sociable tax Ytd Max, but perhaps there is no need
                        rwHeader.append(ec.l10n.format(taxInfo?.socialTaxablePayAmount, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Social Security Tax Withheld (221-231, 11)
                        //    Zero fill if the Employment Code reported in position 219 of the preceding RE Employer Record is
                        //        Q (MGQE) or X (Railroad).
                        //    If the Employment Code is not Q (MQGE) or X (Railroad) and the amount in this field is greater than
                        //        zero, then the Social Security Wages field and/or the Social Security Tips field must be greater than zero.
                        //    This amount should not exceed $7,347.00 for tax year 2016.
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        // TODO: No consideration is made for Q (MGQE) or X (Railroad) employees
                        // TODO: No consideration is made for H (Household) employees
                        // TODO: There is no check against the PayrollAdjustmentDetail for the sociable tax Ytd Max, but perhaps there is no need
                        rwHeader.append(ec.l10n.format(federalWageAndTaxInfo?.socialTaxWithheldAmount, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Medicare Wages and Tips (232-242, 11)
                        //    For years prior to tax year 1983, zero fill for all Employment Codes.
                        //    Zero fill if the Employment Code reported in position 219 of the preceding RE Employer Record is X (Railroad).
                        //    If the Employment Code is H (Household) and the tax year is 1994 or later, this field must be equal
                        //        to or greater than the annual Household minimum for the tax year being reported. Otherwise, fill with zeros.
                        //    For all other Employment Codes:
                        //        * For tax years 1983 – 1993, do not exceed the annual maximum Medicare wage base for the tax year.
                        //        * For tax years 1983 – 1990, if Social Security Wages and/or Social Security Tips are greater than
                        //          zero, this amount must be equal to the sum of the Social Security Wages and Social Security Tips.
                        //        * For tax year 1991 and later, this amount must equal or exceed the sum of the Social Security
                        //          Wages and Social Security Tips.
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        // TODO: No consideration is given to tax years prior to 2016
                        // TODO: No consideration is made for railroad employees
                        rwHeader.append(ec.l10n.format(taxInfo?.medicalTaxablePayAmount, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Medicare Tax Withheld (243-253, 11)
                        //    For tax years prior to 1983, zero fill for all Employment Codes.
                        //    For tax year 1983 and later, zero fill if the Employment Code reported in position 219 of the
                        //        preceding RE Employer Record is X (Railroad).
                        //    Effective January 1, 2013, an employer is required to withhold a 0.9% additional Medicare Tax on any
                        //        Medicare Wages and Tips or Railroad Retirement Act (RRTA) compensation it pays to an employee in
                        //        excess of $200,000 in a calendar year.
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        // TODO: No consideration is given to tax years prior to 2016
                        // TODO: No consideration is given to railroad employees
                        // TODO: check is done against the additional medicare withholding
                        rwHeader.append(ec.l10n.format(federalWageAndTaxInfo?.medicalTaxWithheldAmount, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Social Security Tips (254-264, 11)
                        //    Zero fill if the Employment Code reported in position 219 of the preceding RE Employer Record is
                        //        Q (MQGE) or X (Railroad).
                        //    The sum of this field and Social Security Wages should not exceed the annual maximum Social Security
                        //        wage base for the tax year ($118,500 for tax year 2016.)
                        //    If Employment Code is H (Household) and the tax year is 1994 or later, the sum of this field and the
                        //        Social Security Wages field must be equal to or greater than the annual Household minimum for the
                        //        tax year being reported. Otherwise, report zeros. See Appendix H.
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        // TODO: Social Security Tips are not populated
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Blank (265-275, 11)
                        rwHeader.append("".padRight(11, ' '))

                        // Dependent Care Benefits (276-286, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1990 through the current tax year.
                        //    Does not apply to Puerto Rico, Virgin Islands, American Samoa, Guam or Northern Mariana Islands employees.
                        // TODO: Dependent Care Benefits are not populated
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Deferred Compensation Contributions to Section 401(k) (Code D) (287-297, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1987 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: 401(k) contributions
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Deferred Compensation Contributions to Section 403(b) (Code E) (298-308, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1987 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: 403(b) contributions
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Deferred Compensation Contributions to Section 408(k) (Code F) (309-319, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1987 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: 408(k) contributions
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Deferred Compensation Contributions to Section 457(b) (Code G) (320-330, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1987 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: 457(b) contributions
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Deferred Compensation Contributions to Section 501(c)(18)(D) (Code H) (331-341, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1987 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Section 501(c)(18)(D) contributions
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Blank (342-352, 11)
                        rwHeader.append("".padRight(11, ' '))

                        // Non-qualified Plan Section 457 Distributions or Contributions (353-363, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1990 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Non-qualified Plan Section 457 Distributions or Contributions
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Employer Contributions to a Health Savings Account (Code W) (364-374, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2004 through the current tax year.
                        //    Does not apply to Puerto Rico employees or Northern Mariana Islands employees..
                        // TODO: Employer Contributions to a Health Savings Account
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Non-qualified Plan Not Section 457 Distributions or Contributions (375-385, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1990 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Non-qualified Plan Not Section 457 Distributions or Contributions
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Nontaxable Combat Pay (Code Q) (386-396, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2005 through the current tax year.
                        //    Does not apply to Puerto Rico employees or Northern Mariana Islands employees.
                        // TODO: Nontaxable Combat Pay
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Blank (397-407, 11)
                        rwHeader.append("".padRight(11, ' '))

                        // Employer Cost of Premiums for Group Term Life Insurance over $50,000 (Code C)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1978 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Employer Cost of Premiums for Group Term Life Insurance over $50,000
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Income from the Excercise of Nonstatutory Stock Options (Code V) (419-429, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2001 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Employer Cost of Premiums for Group Term Life Insurance over $50,000
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Deferrals Under a Section 409A Non-qualified Deferred Compensation Plan (Code Y) (430-440, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2005 through the current tax year.
                        //    Does not apply to Puerto Rico employees or Northern Mariana Islands employees.
                        // TODO: Deferrals Under a Section 409A Non-qualified Deferred Compensation Plan
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Designated Roth Contributions to a Section 401(k) Plan (Code AA) (441-451, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2006 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Designated Roth Contributions to a Section 401(k) Plan
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Designated Roth Contributions Under a Section 403(b) Salary Reduction Agreement (Code BB) (452-462, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2006 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Designated Roth Contributions Under a Section 403(b) Salary Reduction Agreement
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Cost of Employer-Sponsored Health Coverage (Code DD) (463-473, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2005 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Cost of Employer-Sponsored Health Coverage
                        rwHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Blank (474-485, 12)
                        rwHeader.append("".padRight(12, ' '))

                        // Statutory Employee Indicator (486-486, 1)
                        // Enter "1" for a statutory employee.  Otherwise, enter "0" (zero).
                        //       A statutory employee is an independent contractor under IRS common law that is treated as an
                        //       employee, by statute, for tax withholdings. For a standard independent contractor, an employer
                        //       cannot withhold taxes, as this would change the independent contractor relationship into an
                        //       employer-employee relationship.
                        // TODO: Determine if this is a statuatory employee.
                        rwHeader.append("0")

                        // Blank (487-487, 1)
                        rwHeader.append("".padRight(1, ' '))

                        // Retirement Plan Indicator (488-488, 1)
                        // Enter a "1" for a retirement plan.  Otherwise, enter "0" (zero).
                        // TODO: Determine if there is a retirement plan
                        rwHeader.append("0")

                        // Third-Party Sick Pay Indicator (489-489, 1)
                        // Enter a "1" for a retirement plan.  Otherwise, enter "0" (zero).
                        // TODO: Determine Third-Party Sick Pay Indicator
                        rwHeader.append("0")

                        // Blank (490-512, 23)
                        rwHeader.append("".padRight(23, ' '))

                        lines.add(rwHeader)

                        ////////////////////////////////////////////////////////////////////////////////
                        // RO Employee Record
                        ////////////////////////////////////////////////////////////////////////////////
                        StringBuilder roHeader = new StringBuilder(512)
                        // Record Identifier (1-2, 2)
                        roHeader.append("RO")

                        // Blank (3-11, 9)
                        roHeader.append("".padRight(9, ' '))

                        // Allocated Tips (12-22, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1983 through the current tax year.
                        //    Does not apply to Puerto Rico, Virgin Islands, American Samoa, Guam or Northern Mariana Islands employees.
                        // TODO: Allocated Tips
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Uncollected Employee Tax on Tips (Codes A and B) (23-33, 11)
                        //    Combine the uncollected Social Security tax and the uncollected Medicare tax in this field.
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        // TODO: Uncollected Employee Tax on Tips (Codes A and B)
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Medical Savings Account (Code R) (34-44, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1997 through the current tax year.
                        //    Does not apply to Puerto Rico or Northern Mariana Islands employees.
                        // TODO: Medical Savings Account
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Simple Retirement Account (Code S) (45-55, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1997 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Simple Retirement Account
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Qualified Adoption Expenses (Code T) (56-66, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1997 through the current tax year.
                        //    Does not apply to Puerto Rico or Northern Mariana Islands employees.
                        // TODO: Qualified Adoption Expenses
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Uncollected Social Security or RRTA Tax on Cost of Group Term Life Insurance over $50,000 (Code M), (67-77, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2001 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Uncollected Social Security or RRTA Tax on Cost of Group Term Life Insurance over $50,000
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Uncollected Medicare Tax on Cost of Group Term Life Insurance Over $50,000 (Code N) (78-88, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2001 through the current tax year.
                        //    Does not apply to Puerto Rico employees.
                        // TODO: Uncollected Medicare Tax on Cost of Group Term Life Insurance Over $50,000
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Income Under a Nonqualified Deferred Compensation Plan That Fails to Satisfy Section 409A (Code Z) (89-99, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2005 through the current tax year.
                        //    Does not apply to Puerto Rico or Northern Mariana Islands employees.
                        // TODO: Income Under a Nonqualified Deferred Compensation Plan That Fails to Satisfy Section 409A
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Blank (100-110, 11)
                        roHeader.append("".padRight(11, ' '))

                        // Designated Roth Contributions Under a Governmental Section 457(b) Plan (Code EE) (111-121, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 2011 through the current tax year.
                        //    Does not apply to Puerto Rico or Northern Mariana Islands employees.
                        // TODO: Designated Roth Contributions Under a Governmental Section 457(b) Plan
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Blank (122-274, 153)
                        roHeader.append("".padRight(153, ' '))

                        // Wages Subject to Puerto Rico Tax (275-285, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1978 through the current tax year.
                        //    For Puerto Rico employees only.
                        // TODO: Wages Subject to Puerto Rico Tax
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Commissions Subject to Puerto Rico Tax (286-296, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1978 through the current tax year.
                        //    For Puerto Rico employees only.
                        // TODO: Commissions Subject to Puerto Rico Tax
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Allowances Subject to Puerto Rico Tax (297-307, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1998 through the current tax year.
                        //    For Puerto Rico employees only.
                        // TODO: Allowances Subject to Puerto Rico Tax
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Tips Subject to Puerto Rico Tax (308-318, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1998 through the current tax year.
                        //    For Puerto Rico employees only.
                        // TODO: Tips Subject to Puerto Rico Tax
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Total Wages, Commissions, Tips and Allowances Subject to Puerto Rico Tax (319-329)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1978 through the current tax year.
                        //    For Puerto Rico employees only.
                        // TODO: Total Wages, Commissions, Tips and Allowances Subject to Puerto Rico Tax
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Puerto Rico Tax Withheld (330-340, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1978 through the current tax year.
                        //    For Puerto Rico employees only.
                        // TODO: Puerto Rico Tax Withheld
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Retirement Fund Annual Contributions (341-351, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1978 through the current tax year.
                        //    For Puerto Rico employees only.
                        // TODO: Retirement Fund Annual Contributions
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Blank (352-362, 11)
                        roHeader.append("".padRight(11, ' '))

                        // Total Wages, Tips and Other Compensation Subject to Virgin Islands, Guam, American Samoa or Northern Mariana Islands Income Tax (363-373, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1978 through the current tax year.
                        //    For Virgin Islands, American Samoa, Guam or Northern Mariana Islands employees only.
                        // TODO: Total Wages, Tips and Other Compensation Subject to Virgin Islands, Guam, American Samoa or Northern Mariana Islands Income Tax
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Virgin Islands, Guam, American Samoa or Northern Mariana Islands Income Tax Withheld (374-384, 11)
                        //    No negative amounts.
                        //    Right justify and zero fill.
                        //    This field is valid from 1978 through the current tax year.
                        //    For Virgin Islands, American Samoa, Guam or Northern Mariana Islands employees only.
                        // TODO: Virgin Islands, Guam, American Samoa or Northern Mariana Islands Income Tax Withheld
                        roHeader.append(ec.l10n.format(0, "0.00")("\\p{P}", "")?.padLeft(11, '0')?.take(11)) // Regex removes punctuation

                        // Blank (385-512, 128)
                        roHeader.append("".padRight(128, ' '))

                        lines.add(roHeader)

                    }
                }


            ]]></script>
        </actions>
    </service>
    <service verb="get" noun="UsaIrs1099MiscFormData">
        <!-- NOTE: currently supports only one federal and state; to support multiple states with
            different wage/etc amounts other payroll services/etc would also need to be changed -->
        <!-- NOTE: currently uses FEIN for Employer's state ID -->
        <!-- TODO: support multiple state tax authorities by making sure the state is related to federalTaxAuthorityId -->
        <implements service="mantle.humanres.PayrollServices.get#EmploymentWageAndTaxInfo"/>
        <in-parameters>
            <parameter name="federalTaxAuthorityId" default-value="UsaIrs"/>
            <parameter name="formId" default-value="UsaIrs1099Misc"/>
        </in-parameters>
        <out-parameters>
            <parameter name="federalTaxAuthorityId"/>
            <parameter name="formId"/>
            <parameter name="formMap" type="Map">
                <parameter name="1099m_a"/><parameter name="1099m_b"/><parameter name="1099m_c"/>
                <parameter name="1099m_d1"/><parameter name="1099m_d2"/><parameter name="1099m_d3"/>
                <parameter name="1099m_03"/><parameter name="1099m_04"/><parameter name="1099m_07"/>
                <parameter name="1099m_16a"/><parameter name="1099m_17a"/><parameter name="1099m_18a"/>
            </parameter>
        </out-parameters>
        <actions>
            <service-call name="mantle.humanres.PayrollServices.get#EmploymentWageAndTaxInfo" in-map="context" out-map="context"/>
            <set field="formMap" from="[:]"/>

            <set field="formMap.'1099m_a'" value="${employerName}\n${employerAddressString}\n${employerPhoneString}"/>
            <set field="formMap.'1099m_b'" from="employerEin"/>
            <set field="formMap.'1099m_c'" from="employeeSsn"/>

            <set field="formMap.'1099m_d1'" value="${employeeFirstName?:''} ${employeeMiddleName? employeeMiddleName + ' ':''}${employeeLastName?:''} ${employeeSuffix?:''}"/>
            <set field="formMap.'1099m_d2'" from="employeeHomeStreetString"/>
            <set field="formMap.'1099m_d3'" from="employeeHomeCszString"/>

            <set field="federalWageAndTaxInfo" from="wageAndTaxInfoByTaxAuthorityId.get(federalTaxAuthorityId)"/>
            <if condition="federalWageAndTaxInfo?.incomeTaxWithheldAmount">
                <then>
                    <set field="formMap.'1099m_03'" from="ec.l10n.format(taxablePayAmount, '#,##0.00')"/>
                    <set field="formMap.'1099m_04'" from="ec.l10n.format(federalWageAndTaxInfo?.incomeTaxWithheldAmount, '#,##0.00')"/>
                </then>
                <else>
                    <set field="formMap.'1099m_07'" from="ec.l10n.format(taxablePayAmount, '#,##0.00')"/>
                </else>
            </if>

            <set field="stateTaxAuthorityId" from="stateTaxAuthorityIdList ? stateTaxAuthorityIdList[0] : 0"/>
            <set field="stateWageAndTaxInfo" from="wageAndTaxInfoByTaxAuthorityId.get(stateTaxAuthorityId)"/>
            <if condition="stateWageAndTaxInfo">
                <set field="formMap.'1099m_16a'" from="ec.l10n.format(stateWageAndTaxInfo.incomeTaxWithheldAmount, '#,##0.00')"/>
                <set field="formMap.'1099m_17a'" value="${stateWageAndTaxInfo.taxAuthorityGeo?.geoCodeAlpha2} ${employerEin}"/>
                <set field="formMap.'1099m_18a'" from="ec.l10n.format(taxablePayAmount, '#,##0.00')"/>
            </if>
        </actions>
    </service>
</services>
