<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

<!--
h1. General Order Services

h2. General Order Placement and eCommerce Usage

| create customer | PartyServices.create#Account |
| create/update/delete customer address | ContactServices.create#PostalAddress, .update#PartyPostalAddress |
| create/update/delete customer phone | ContactServices.create#TelecomNumber, .update#PartyTelecomNumber |
| create/update/delete customer credit card | PaymentMethodServices.create#CreditCard, .update#CreditCard |

| login: merge with previous open | merge#OrderItems |
| find customer open orders       | find#OpenOrders - TODO |

| init cart (auto on add to cart) | create#Order |
| add to cart                     | add#OrderProductQuantity, create#OrderItem |
| change cart quantity            | update#OrderProductQuantity, update#OrderItem |
| remove from cart                | delete#OrderItem |
| set billing and shipping info   | set#OrderBillingShippingInfo |
| split order                     | create#OrderPart |
| confirm/complete order          | place#Order |

| create order from shopping list (or other existing order) | clone#Order |

-->

    <service verb="get" noun="OrderDisplayInfo">
        <in-parameters>
            <parameter name="orderId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId"/>
            <parameter name="orderHeader" type="Map"><auto-parameters entity-name="mantle.order.OrderHeader"/></parameter>
            <parameter name="productStore" type="Map"/>
            <parameter name="statusItem" type="Map"><auto-parameters entity-name="moqui.basic.StatusItem"/></parameter>
            <parameter name="editableStatusIds" type="Set"><parameter name="statusId"/></parameter>
            <parameter name="orderEditable" type="Boolean"/>

            <parameter name="orderItemList" type="List"><parameter name="orderItem" type="Map">
                <auto-parameters entity-name="mantle.order.OrderItem"/></parameter></parameter>
            <parameter name="allItemsAuditLogList" type="List"><parameter name="orderItem" type="Map"/></parameter>
            <parameter name="orderItemWithChildrenSet" type="Set"><parameter name="orderItemSeqId"/></parameter>
            <parameter name="paymentList" type="List"><parameter name="payment" type="Map">
                <auto-parameters entity-name="mantle.account.payment.Payment"/></parameter></parameter>

            <parameter name="shipmentItemSourceList" type="List"><parameter name="sis" type="Map">
                <auto-parameters entity-name="mantle.shipment.ShipmentItemSource"/></parameter></parameter>
            <parameter name="shipmentIdSet" type="Set"><parameter name="shipmentId"/></parameter>
            <parameter name="quantityNotShippedByItem" type="Map">
                <description>Key is orderItemSeqId, value is quantity not shipped for item.</description></parameter>
            <parameter name="quantityNotShippedByPart" type="Map">
                <description>Key is orderPartSeqId, value is quantity not shipped for all items in part.</description></parameter>

            <parameter name="orderItemBillingList" type="List"><parameter name="oib" type="Map">
                <auto-parameters entity-name="mantle.order.OrderItemBilling"/></parameter></parameter>
            <parameter name="invoiceIdSet" type="Set"><parameter name="invoiceId"/></parameter>
            <parameter name="quantityNotBilledByItem" type="Map">
                <description>Key is orderItemSeqId, value is quantity not billed for item.</description></parameter>
            <parameter name="quantityNotBilledByPart" type="Map">
                <description>Key is orderPartSeqId, value is quantity not billed for all items in part.</description></parameter>

            <parameter name="returnItemList" type="List"><parameter name="returnItem" type="Map">
                <auto-parameters entity-name="mantle.order.return.ReturnItem"/></parameter></parameter>

            <parameter name="requestItemOrderList" type="List"><parameter name="rio" type="Map">
                <auto-parameters entity-name="mantle.request.RequestItemOrder"/></parameter></parameter>
            <parameter name="requestIdSet" type="Set"><parameter name="requestId"/></parameter>

            <parameter name="statusHistoryList" type="List"><parameter name="auditLog" type="Map">
                <auto-parameters entity-name="moqui.entity.EntityAuditLog"/></parameter></parameter>
            <parameter name="orderNoteList" type="List"><parameter name="orderNote" type="Map">
                <auto-parameters entity-name="mantle.order.OrderNote"/></parameter></parameter>

            <parameter name="orderPartList" type="List"><parameter name="orderPart" type="Map">
                <auto-parameters entity-name="mantle.order.OrderPart"/></parameter></parameter>
            <parameter name="orderPartInfoList" type="List"><parameter name="orderPartInfo" type="Map">
                <parameter name="orderPart" type="Map"><auto-parameters entity-name="mantle.order.OrderPart"/></parameter>
                <parameter name="partEditable" type="Boolean"/>
                <parameter name="partOrderItemList" type="List"><parameter name="partOrderItem" type="Map">
                    <auto-parameters entity-name="mantle.order.OrderItem"/></parameter></parameter>
                <parameter name="partNoParentOrderItemList" type="List"><parameter name="partOrderItem" type="Map">
                    <auto-parameters entity-name="mantle.order.OrderItem"/></parameter></parameter>
                <parameter name="hasShippableItems" type="Boolean"/>
                <parameter name="singleLot" type="Boolean"/>
                <parameter name="newerInventory" type="Boolean"/>
                <parameter name="shipmentMethodEnum" type="Map">
                    <auto-parameters entity-name="moqui.basic.Enumeration"/></parameter>
                <parameter name="partPaymentList" type="List"><parameter name="partPayment" type="Map">
                    <auto-parameters entity-name="mantle.account.payment.Payment"/></parameter></parameter>
                <parameter name="partPaymentInfoList" type="List"><parameter name="partPaymentInfo" type="Map">
                    <parameter name="partPayment" type="Map">
                        <auto-parameters entity-name="mantle.account.payment.Payment"/></parameter>
                    <parameter name="paymentMethod" type="Map">
                        <auto-parameters entity-name="mantle.account.method.PaymentMethod"/></parameter>
                    <parameter name="creditCard" type="Map">
                        <auto-parameters entity-name="mantle.account.method.CreditCard"/></parameter>
                    <parameter name="creditCardTypeEnum" type="Map">
                        <auto-parameters entity-name="moqui.basic.Enumeration"/></parameter>
                    <parameter name="maskedCardNumber"/>
                    <parameter name="postalAddress" type="Map">
                        <auto-parameters entity-name="mantle.party.contact.PostalAddress"/></parameter>
                    <parameter name="postalAddressStateGeo" type="Map">
                        <auto-parameters entity-name="moqui.basic.Geo"/></parameter>
                    <parameter name="telecomNumber" type="Map">
                        <auto-parameters entity-name="mantle.party.contact.TelecomNumber"/></parameter>
                    <parameter name="paymentMethodTypeEnum" type="Map">
                        <auto-parameters entity-name="moqui.basic.Enumeration"/></parameter>
                    <parameter name="paymentInstrumentEnum" type="Map">
                        <auto-parameters entity-name="moqui.basic.Enumeration"/></parameter>
                </parameter></parameter>
                <parameter name="paymentsTotal" type="BigDecimal"/>
                <parameter name="partTotalUnpaid" type="BigDecimal"/>
                <parameter name="postalAddress" type="Map">
                    <auto-parameters entity-name="mantle.party.contact.PostalAddress"/></parameter>
                <parameter name="postalAddressStateGeo" type="Map">
                    <auto-parameters entity-name="moqui.basic.Geo"/></parameter>
                <parameter name="telecomNumber" type="Map">
                    <auto-parameters entity-name="mantle.party.contact.TelecomNumber"/></parameter>
                <parameter name="facility" type="Map">
                    <auto-parameters entity-name="mantle.facility.Facility"/></parameter>
                <parameter name="facilityContactInfo" type="Map">
                    <parameter name="postalContactMechId"/>
                    <parameter name="postalContactMechPurposeId"/>
                    <parameter name="postalAddress" type="Map">
                        <auto-parameters entity-name="mantle.party.contact.PostalAddress"/></parameter>
                    <parameter name="postalAddressStateGeo" type="Map">
                        <auto-parameters entity-name="moqui.basic.Geo"/></parameter>
                    <parameter name="postalAddressGeoPoint" type="Map">
                        <auto-parameters entity-name="moqui.basic.GeoPoint"/></parameter>
                    <parameter name="telecomContactMechId"/>
                    <parameter name="telecomContactMechPurposeId"/>
                    <parameter name="telecomNumber" type="Map">
                        <auto-parameters entity-name="mantle.party.contact.TelecomNumber"/></parameter>
                </parameter>
                <parameter name="customerDetail" type="Map">
                    <auto-parameters entity-name="mantle.party.PartyDetail"/></parameter>
                <parameter name="vendorDetail" type="Map">
                    <auto-parameters entity-name="mantle.party.PartyDetail"/></parameter>
                <parameter name="isCustomerInternalOrg" type="Boolean"/>
                <parameter name="isVendorInternalOrg" type="Boolean"/>
                <parameter name="orderPartPartyList" type="List"><parameter name="orderPartParty">
                    <auto-parameters entity-name="mantle.order.OrderPartPartyDetail"/></parameter></parameter>
                <parameter name="customerShipToDetail" type="Map">
                    <auto-parameters entity-name="mantle.order.OrderPartPartyDetail"/></parameter>
                <parameter name="partShipmentItemSourceList" type="List"><parameter name="partSis" type="Map">
                    <auto-parameters entity-name="mantle.shipment.ShipmentItemSource"/></parameter></parameter>
                <parameter name="partShipmentIdSet" type="Set"><parameter name="partShipmentId"/></parameter>
            </parameter></parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <if condition="orderHeader == null"><return error="true" message="Order not found with ID ${orderId}"/></if>
            <!--
            <set field="headerMaster" from="orderHeader.getMasterValueMap('default')"/>
            <log message="======== Order Master:\n${groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(headerMaster))}"/>
            -->

            <set field="productStore" from="orderHeader.productStore"/>

            <set field="statusItem" from="orderHeader.status"/>
            <!-- NOTE: these statuses are fairly liberal, may want to restrict more in certain scenarios (such as customer changing an order) -->
            <set field="editableStatusIds" from="new HashSet(['OrderBeingChanged', 'OrderOpen', 'OrderRequested',
                'OrderProposed', 'OrderPlaced', 'OrderProcessing', 'OrderWishList', 'OrderGiftRegistry', 'OrderAutoReorder'])"/>
            <set field="orderEditable" from="editableStatusIds.contains(orderHeader.statusId)"/>

            <entity-find-related value-field="orderHeader" relationship-name="mantle.order.OrderItem"
                    list="orderItemList" order-by-list="['orderItemSeqId']"/>
            <!-- put items with parentItemSeqId in the list after their parent -->
            <script><![CDATA[
                orderItemWithChildrenSet = new HashSet()
                List reverseList = orderItemList.cloneList().orderByFields(["-orderItemSeqId"])
                for (def orderItem in reverseList) {
                    if (orderItem.parentItemSeqId) {
                        orderItemWithChildrenSet.add(orderItem.parentItemSeqId)
                        orderItemList.move(orderItemList.indexMatching([orderItemSeqId:orderItem.orderItemSeqId]),
                                orderItemList.indexMatching([orderItemSeqId:orderItem.parentItemSeqId])+1)
                    }
                }
            ]]></script>
            <entity-find entity-name="moqui.entity.EntityAuditLog" list="allItemsAuditLogList">
                <econdition field-name="changedEntityName" value="mantle.order.OrderItem"/>
                <econdition field-name="changedFieldName" operator="in" value="quantity,unitAmount"/>
                <econdition field-name="pkPrimaryValue" from="orderId"/>
                <select-field field-name="changedFieldName,pkSecondaryValue,newValueText,oldValueText,changeReason,changedByUserId,changedDate"/>
                <order-by field-name="-changedDate"/>
            </entity-find>

            <entity-find-related value-field="orderHeader" relationship-name="mantle.account.payment.Payment"
                    list="paymentList" order-by-list="['paymentId']"/>

            <!-- get ShipmentItemSource list and derived data -->
            <entity-find entity-name="mantle.shipment.ShipmentAndItemSource" list="shipmentItemSourceList">
                <econdition field-name="orderId"/>
                <econdition field-name="shipmentStatusId" operator="not-in" value="ShipRejected,ShipCancelled"/>
                <econdition field-name="statusId" operator="not-equals" value="SisCancelled"/>
            </entity-find>
            <set field="shipmentIdSet" from="new TreeSet()"/>
            <set field="quantityNotShippedByItem" from="[:]"/>
            <set field="quantityNotShippedByPart" from="[:]"/>
            <script>
                for (orderItem in orderItemList) {
                    if (!(orderItem.product?.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse'])) continue
                    def orderItemQuantity = (orderItem.quantity ?: 1) * (orderItem.selectedAmount ?: 1)
                    addToBigDecimalInMap(orderItem.orderItemSeqId, orderItemQuantity, quantityNotShippedByItem)
                    addToBigDecimalInMap(orderItem.orderPartSeqId, orderItemQuantity, quantityNotShippedByPart)
                }
            </script>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource"><script>
                def curOrderItem = orderItemList.find({ it.orderItemSeqId == shipmentItemSource.orderItemSeqId })
                shipmentIdSet.add(shipmentItemSource.shipmentId)
                addToBigDecimalInMap(curOrderItem.orderItemSeqId, -shipmentItemSource.quantity, quantityNotShippedByItem)
                addToBigDecimalInMap(curOrderItem.orderPartSeqId, -shipmentItemSource.quantity, quantityNotShippedByPart)
            </script></iterate>

            <!-- get OrderItemBilling list and derived data -->
            <!-- TODO: exclude OrderItemBilling records for cancelled invoices -->
            <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                <econdition field-name="orderId"/><order-by field-name="orderItemSeqId"/></entity-find>
            <set field="invoiceIdSet" from="new TreeSet()"/>
            <set field="quantityNotBilledByItem" from="[:]"/>
            <set field="quantityNotBilledByPart" from="[:]"/>
            <iterate list="orderItemList" entry="orderItem"><script>
                def orderItemQuantity = (orderItem.quantity ?: 1) * (orderItem.selectedAmount ?: 1)
                addToBigDecimalInMap(orderItem.orderItemSeqId, orderItemQuantity, quantityNotBilledByItem)
                addToBigDecimalInMap(orderItem.orderPartSeqId, orderItemQuantity, quantityNotBilledByPart)
            </script></iterate>
            <iterate list="orderItemBillingList" entry="orderItemBilling"><script>
                def curOrderItem = orderItemList.find({ it.orderItemSeqId == orderItemBilling.orderItemSeqId })
                invoiceIdSet.add(orderItemBilling.invoiceId)
                addToBigDecimalInMap(curOrderItem.orderItemSeqId, -orderItemBilling.quantity, quantityNotBilledByItem)
                addToBigDecimalInMap(curOrderItem.orderPartSeqId, -orderItemBilling.quantity, quantityNotBilledByPart)
            </script></iterate>

            <!-- get ReturnItem list -->
            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList">
                <econdition field-name="orderId"/>
                <econdition field-name="statusId" operator="not-equals" value="ReturnCancelled"/>
                <order-by field-name="orderItemSeqId"/>
            </entity-find>

            <!-- get RequestItemOrder list and derived data -->
            <entity-find entity-name="mantle.request.RequestItemOrder" list="requestItemOrderList">
                <econdition field-name="orderId"/></entity-find>
            <set field="requestIdSet" from="new TreeSet()"/>
            <iterate list="requestItemOrderList" entry="requestItemOrder">
                <script>requestIdSet.add(requestItemOrder.requestId)</script></iterate>

            <!-- get order status history from EntityAuditLog -->
            <entity-find entity-name="moqui.entity.EntityAuditLog" list="statusHistoryList">
                <econdition field-name="changedEntityName" value="mantle.order.OrderHeader"/>
                <econdition field-name="changedFieldName" value="statusId"/>
                <econdition field-name="pkPrimaryValue" from="orderId"/>
                <order-by field-name="changedDate"/>
            </entity-find>

            <entity-find entity-name="mantle.order.OrderNote" list="orderNoteList">
                <econdition field-name="orderId"/><order-by field-name="-noteDate"/></entity-find>

            <entity-find-related value-field="orderHeader" relationship-name="mantle.order.OrderPart" list="orderPartList"/>

            <!-- get order info by part for more detailed display -->
            <script><![CDATA[
            import org.moqui.entity.EntityList
            import org.moqui.entity.EntityValue
            import org.moqui.context.ExecutionContext
            ExecutionContext ec = context.ec

            orderPartInfoList = []
            for (EntityValue orderPart in orderPartList) {
                EntityList partOrderItemList = orderItemList.findAll({ it.orderPartSeqId == orderPart.orderPartSeqId })
                EntityList partNoParentOrderItemList = partOrderItemList.findAll({ it.parentItemSeqId == null })
                boolean hasShippableItems = orderItemList.find({ it.product?.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse'] }) != null

                boolean singleLot = false
                boolean newerInventory = false
                if (hasShippableItems && orderPart.customerPartyId) {
                    EntityList custSettingList = ec.entity.find("mantle.party.PartySetting").condition('partyId', orderPart.customerPartyId)
                            .condition('partySettingTypeId', 'CustomerSetting').useCache(true).list()
                    singleLot = custSettingList.find({ 'CsstSingleLot'.equals(it.settingValue) }) != null
                    newerInventory = custSettingList.find({ 'CsstNewerInventory'.equals(it.settingValue) }) != null
                }

                def partPaymentList = paymentList.cloneList().filterByAnd([orderPartSeqId:orderPart.orderPartSeqId])
                def partPaymentInfoList = []
                BigDecimal paymentsTotal = 0
                for (EntityValue partPayment in partPaymentList) {
                    paymentsTotal += (partPayment.amount ?: 0)
                    Map partPaymentInfo = [partPayment:partPayment]
                    EntityValue paymentMethod = partPayment.PaymentMethod
                    if (paymentMethod) {
                        partPaymentInfo.paymentMethod = paymentMethod
                        creditCard = paymentMethod.CreditCard
                        partPaymentInfo.creditCard = creditCard
                        partPaymentInfo.creditCardTypeEnum = creditCard?."CreditCardType#moqui.basic.Enumeration"
                        cardNumber = creditCard?.cardNumber
                        partPaymentInfo.maskedCardNumber = cardNumber ? (creditCard.creditCardTypeEnumId == 'CctAmericanExpress' ? '***********' : '************') + cardNumber.substring(cardNumber.length() - 4, cardNumber.length()) : ''
                        partPaymentInfo.postalAddress = paymentMethod.PostalAddress
                        partPaymentInfo.postalAddressStateGeo = partPaymentInfo.postalAddress?."StateProvince#moqui.basic.Geo"
                        partPaymentInfo.telecomNumber = paymentMethod.TelecomNumber
                        partPaymentInfo.paymentMethodTypeEnum = paymentMethod.methodType
                    }
                    partPaymentInfo.paymentInstrumentEnum = partPayment.instrument
                    partPaymentInfoList.add(partPaymentInfo)
                }

                BigDecimal partTotalUnpaid = (orderPart.partTotal ?: 0) - (paymentsTotal ?: 0)

                List orderItemSeqIdList = partOrderItemList.orderItemSeqId
                List partShipmentItemSourceList = []
                Set partShipmentIdSet = new TreeSet()
                for (EntityValue sis in shipmentItemSourceList) if (sis.orderItemSeqId in orderItemSeqIdList) {
                    partShipmentItemSourceList.add(sis)
                    partShipmentIdSet.add(sis.shipmentId)
                }

                EntityValue telecomNumber = orderPart.'mantle.party.contact.TelecomNumber'
                EntityValue postalAddress = orderPart.'mantle.party.contact.PostalAddress'
                EntityValue postalAddressStateGeo = postalAddress?."StateProvince#moqui.basic.Geo"
                EntityValue facility = orderPart.'mantle.facility.Facility'
                Map facilityContactInfo = null
                if (facility) {
                    Map facShipOut = ec.service.sync().name("mantle.facility.ContactServices.get#FacilityDefaultShipDest")
                            .parameter("facilityId", orderPart.facilityId).call()
                    facilityContactInfo = ec.service.sync().name("mantle.facility.ContactServices.get#FacilityContactInfo")
                            .parameters([facilityId:orderPart.facilityId, postalContactMechId:facShipOut.postalContactMechId,
                                         telecomContactMechId:facShipOut.telecomContactMechId]).call()
                }

                EntityValue customerDetail = ec.entity.find("mantle.party.PartyDetail").condition("partyId", orderPart.customerPartyId).one()
                EntityValue vendorDetail = ec.entity.find("mantle.party.PartyDetail").condition("partyId", orderPart.vendorPartyId).one()
                boolean isCustomerInternalOrg = ec.entity.find("mantle.party.PartyRole")
                        .condition("partyId", orderPart.customerPartyId).condition("roleTypeId", "OrgInternal").one() as boolean
                boolean isVendorInternalOrg = ec.entity.find("mantle.party.PartyRole")
                        .condition("partyId", orderPart.vendorPartyId).condition("roleTypeId", "OrgInternal").one() as boolean

                EntityList orderPartPartyList = ec.entity.find("mantle.order.OrderPartPartyDetail")
                        .condition([orderId:orderPart.orderId, orderPartSeqId:orderPart.orderPartSeqId]).orderBy("description").list()
                EntityValue customerShipToDetail = orderPartPartyList.find({ it.roleTypeId == 'CustomerShipTo' })

                // find applicable open returns
                Map openReturnsResult = ec.service.sync().name("mantle.order.ReturnServices.find#OrderOpenReturns")
                        .parameters([orderId:orderPart.orderId, orderPartSeqId:orderPart.orderPartSeqId]).call()

                orderPartInfoList.add([orderPart:orderPart, partEditable:editableStatusIds.contains(orderPart.statusId),
                        partOrderItemList:partOrderItemList, partNoParentOrderItemList:partNoParentOrderItemList,
                        hasShippableItems:hasShippableItems, singleLot:singleLot, newerInventory:newerInventory,
                        shipmentMethodEnum:orderPart."ShipmentMethod#moqui.basic.Enumeration",
                        partPaymentList:partPaymentList, partPaymentInfoList:partPaymentInfoList,
                        paymentsTotal:paymentsTotal, partTotalUnpaid:partTotalUnpaid,
                        postalAddress:postalAddress, postalAddressStateGeo:postalAddressStateGeo,
                        telecomNumber:telecomNumber, facility:facility,
                        facilityContactInfo:facilityContactInfo, customerDetail:customerDetail, vendorDetail:vendorDetail,
                        isCustomerInternalOrg:isCustomerInternalOrg, isVendorInternalOrg:isVendorInternalOrg,
                        orderPartPartyList:orderPartPartyList, customerShipToDetail:customerShipToDetail,
                        partShipmentItemSourceList:partShipmentItemSourceList, partShipmentIdSet:partShipmentIdSet,
                        openReturnList:openReturnsResult.openReturnList])
            }
            ]]></script>
            <!-- <log level="warn" message="======== OrderDisplayInfo orderPartInfoList: ${orderPartInfoList}"/> -->
        </actions>
    </service>
    <service verb="get" noun="OrderItemsTotalCount">
        <in-parameters><parameter name="orderId"/></in-parameters>
        <out-parameters><parameter name="itemCount" type="BigDecimal"/></out-parameters>
        <actions>
            <set field="itemCount" from="0.0"/>
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderItemList" entry="orderItem"><set field="itemCount" from="itemCount + orderItem.quantity"/></iterate>
        </actions>
    </service>

    <!-- ========== Order/Part Services ========== -->

    <service verb="create" noun="Order">
        <description>
            Create an Order (OrderHeader and one OrderPart).
            All parameters are optional so that this can be called transparently to create a shell/empty order.
        </description>
        <in-parameters>
            <auto-parameters entity-name="mantle.order.OrderHeader" include="nonpk"><exclude field-name="remainingSubTotal"/>
                <exclude field-name="grandTotal"/></auto-parameters>
            <auto-parameters entity-name="mantle.order.OrderPart" include="nonpk"/>

            <parameter name="statusId" default-value="OrderOpen">
                <description>The initial statusId for both header and part.</description></parameter>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="visitId" default="ec.user.visitId"/>
            <parameter name="enteredByPartyId" default="ec.user.userAccount?.partyId"/>
            <parameter name="currencyUomId"><description>Defaults to PartyAcctgPreference.baseCurrencyUomId for whichever
                Party (customer or vendor) is an internal organization with an accounting preference record.</description></parameter>
            <parameter name="orderRevision" type="Integer" default="1"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
        </out-parameters>
        <actions>
            <if condition="productStoreId">
                <!-- Get some unspecified values from the ProductStore -->
                <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
                <set field="vendorPartyId" from="vendorPartyId ?: productStore?.organizationPartyId"/>
                <set field="currencyUomId" from="currencyUomId ?: productStore?.defaultCurrencyUomId"/>
                <set field="facilityId" from="facilityId ?: productStore?.inventoryFacilityId"/>
            </if>

            <if condition="!currencyUomId">
                <if condition="customerPartyId">
                    <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                            in-map="[organizationPartyId:customerPartyId]"/></if>
                <if condition="!partyAcctgPreference &amp;&amp; vendorPartyId">
                    <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                            in-map="[organizationPartyId:vendorPartyId]"/></if>
                <set field="currencyUomId" from="partyAcctgPreference?.baseCurrencyUomId"/>
            </if>
            <!-- MAYBE: get this from configuration somewhere, needed beyond PartyAcctgPreference? -->
            <if condition="!currencyUomId"><set field="currencyUomId" value="USD"/></if>

            <service-call name="create#mantle.order.OrderHeader" in-map="context" out-map="context"/>

            <!-- If customer is internal org and there is a facility get default ship dest contact info -->
            <if condition="customerPartyId">
                <entity-find entity-name="mantle.party.PartyRole" list="custOrgInternalList">
                    <econdition field-name="partyId" from="customerPartyId"/>
                    <econdition field-name="roleTypeId" value="OrgInternal"/></entity-find>
                <if condition="custOrgInternalList">
                    <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipDest"
                            in-map="context" out-map="context"/></if>
            </if>

            <service-call name="create#mantle.order.OrderPart" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="OrderHeader">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <auto-parameters entity-name="mantle.order.OrderHeader" include="nonpk"><exclude field-name="statusId"/>
                <exclude field-name="orderRevision"/><exclude field-name="remainingSubTotal"/>
                <exclude field-name="grandTotal"/></auto-parameters>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-set value-field="orderHeader" include="nonpk"/>
            <set field="orderHeader.orderRevision" from="orderHeader.orderRevision + 1"/>
            <entity-update value-field="orderHeader"/>
            <!-- <service-call name="update#mantle.order.OrderHeader" in-map="context"/> -->
        </actions>
    </service>
    <service verb="create" noun="OrderPart">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <auto-parameters entity-name="mantle.order.OrderPart" include="nonpk"/>
            <parameter name="statusId" default-value="OrderOpen"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderPartSeqId" required="true"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipDest" in-map="context" out-map="context"/>
            <service-call name="create#mantle.order.OrderPart" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="OrderPart">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <auto-parameters entity-name="mantle.order.OrderPart" include="nonpk"/>
        </in-parameters>
        <actions>
            <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipDest" in-map="context" out-map="context"/>
            <service-call name="update#mantle.order.OrderPart" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="increment" noun="OrderRevision">
        <in-parameters><parameter name="orderId"/></in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <if condition="orderHeader != null">
                <set field="orderHeader.orderRevision" from="(orderHeader.orderRevision ?: 1) + 1"/>
                <entity-update value-field="orderHeader"/>
            </if>
        </actions>
    </service>
    <service verb="update" noun="OrderHeaderTotal">
        <description>Update OrderHeader.grandTotal based on OrderPart.partTotal values, called by update#OrderPartTotal
            which is called by EECA on OrderItem</description>
        <in-parameters><parameter name="orderId"/></in-parameters>
        <actions>
            <set field="totalSum" from="0.0" type="BigDecimal"/>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList">
                <econdition field-name="orderId"/>
            </entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <set field="totalSum" from="totalSum + (orderPart.partTotal ?: 0)"/>
            </iterate>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <set field="orderHeader.grandTotal" from="totalSum"/>
            <entity-update value-field="orderHeader"/>
        </actions>
    </service>
    <service verb="update" noun="OrderPartTotal">
        <description>Updated OrderPart.partTotal, called by EECA rule on OrderItem create/update/delete</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="originalValue" type="Map"/>
        </in-parameters>
        <actions>
            <set field="totalSum" from="0.0" type="BigDecimal"/>
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/>
                <econdition field-name="orderPartSeqId"/>
            </entity-find>
            <iterate list="orderItemList" entry="orderItem">
                <service-call name="mantle.order.OrderServices.get#OrderItemTotal" out-map="itemTotalOut"
                        in-map="[orderItem:orderItem]"/>
                <set field="totalSum" from="totalSum + itemTotalOut.itemTotal"/>
            </iterate>

            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <set field="orderPart.partTotal" from="totalSum"/>
            <entity-update value-field="orderPart"/>

            <!-- if this was triggered by an EECA and there is an originalValue with a different (old) orderPartSeqId,
                 then update that partTotal too -->
            <if condition="originalValue &amp;&amp; orderPartSeqId != originalValue.orderPartSeqId">
                <service-call name="mantle.order.OrderServices.update#OrderPartTotal"
                        in-map="[orderId:orderId, orderPartSeqId:originalValue.orderPartSeqId]"/>
            </if>

            <!-- now update the OrderHeader.grandTotal -->
            <service-call name="mantle.order.OrderServices.update#OrderHeaderTotal" in-map="[orderId:orderId]"/>
        </actions>
    </service>
    <service verb="get" noun="OrderItemTotal">
        <in-parameters>
            <parameter name="orderItem" type="EntityValue"><description>Can be a view-entity with OrderItem and at least
                the fields orderId, orderItemSeqId, unitAmount, quantity, selectedAmount.</description></parameter>
            <parameter name="getChildrenTotals" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="itemTotal" type="BigDecimal"/>
            <parameter name="childrenTotal" type="BigDecimal"/>
            <parameter name="itemPlusChildrenTotal" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <set field="itemTotal" from="0"/>
            <set field="itemTotal" from="itemTotal + ((orderItem.unitAmount ?: 0) * (orderItem.selectedAmount ?: 1) * orderItem.quantity)"/>

            <if condition="getChildrenTotals">
                <!-- recursively get total of child OrderItems -->
                <!-- don't use relationship, allow view-entities, etc <entity-find-related value-field="orderItem" relationship-name="Child#OrderItem" list="childOrderItemList"/> -->
                <entity-find entity-name="mantle.order.OrderItem" list="childOrderItemList">
                    <econdition field-name="orderId" from="orderItem.orderId"/>
                    <econdition field-name="parentItemSeqId" from="orderItem.orderItemSeqId"/>
                </entity-find>
                <set field="childrenTotal" from="0"/>

                <iterate list="childOrderItemList" entry="childOrderItem">
                    <service-call name="mantle.order.OrderServices.get#OrderItemTotal" out-map="getOitResult"
                            in-map="[orderItem:childOrderItem, getChildrenTotals:true]"/>
                    <set field="childrenTotal" from="childrenTotal + getOitResult.itemPlusChildrenTotal"/>
                </iterate>
                <set field="itemPlusChildrenTotal" from="itemTotal + childrenTotal"/>
            </if>
        </actions>
    </service>

    <!-- OrderItem Services -->
    <service verb="create" noun="OrderItem" transaction="cache">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <auto-parameters entity-name="mantle.order.OrderItem" include="nonpk"/>

            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="itemTypeEnumId" default-value="ItemProduct"/>
            <parameter name="quantity" type="BigDecimal" default="1"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderItemSeqId" required="true"/>
        </out-parameters>
        <actions>
            <if condition="productId">
                <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
                <if condition="product == null"><return error="true" message="Product [${productId}] not found."/></if>
            </if>
            <if condition="product?.amountRequire == 'Y' &amp;&amp; !selectedAmount">
                <return error="true" message="Product [${productId}] requires a selected amount"/></if>
            <if condition="!itemDescription"><set field="itemDescription" from="product?.productName"/></if>
            <if condition="!quantityUomId"><set field="quantityUomId" from="product?.amountUomId"/></if>
            <!-- Do NOT do this: Product.amountFixed means inherent amount of item included in quantity, not a selected amount!
                <if condition="product?.amountFixed"><set field="selectedAmount" from="product?.amountFixed"/></if> -->

            <service-call name="create#mantle.order.OrderItem" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="OrderItem" transaction="cache">
        <in-parameters>
            <auto-parameters include="pk" required="true"/>
            <auto-parameters include="nonpk"/>
            <parameter name="unitAmount_changeReason"/>
            <parameter name="quantity_changeReason"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem"/>
            <set field="productId" from="productId ?: orderItem.productId"/>

            <!-- calculate the price based on quantity, etc, -->
            <if condition="!unitAmount &amp;&amp; productId"><then>
                <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
                <entity-find-related-one value-field="orderItem" relationship-name="mantle.order.OrderPart" to-value-field="orderPart"/>

                <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                              in-map="[productId:productId, quantity:quantity, priceUomId:orderHeader.currencyUomId,
                                  productStoreId:orderHeader.productStoreId, customerPartyId:orderPart.customerPartyId,
                                  vendorPartyId:orderPart.vendorPartyId]"/>

                <set field="unitAmount" from="priceMap.price"/>
                <set field="unitListPrice" from="priceMap.listPrice"/>
                <set field="isModifiedPrice" value="N"/>
            </then><else>
                <set field="isModifiedPrice" value="Y"/>
            </else></if>

            <!-- on quantity changes adjust ShipmentItem/Source (only if some already exist) -->
            <if condition="quantity != null &amp;&amp; quantity != orderItem.quantity">
                <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                    <econdition field-name="orderId"/><econdition field-name="orderItemSeqId"/><order-by field-name="shipmentId"/></entity-find>
                <if condition="shipmentItemSourceList">
                    <set field="sourceQuantityTotal" from="0"/>
                    <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                        <set field="sourceQuantityTotal" from="sourceQuantityTotal + shipmentItemSource.quantity"/></iterate>
                    <if condition="quantity &gt; sourceQuantityTotal"><then>
                        <set field="quantityIncrease" from="quantity - sourceQuantityTotal"/>
                        <!-- quantity increase, we don't know which shipment it should go on so just pick the first -->
                        <set field="shipmentItemSource" from="shipmentItemSourceList[0]"/>
                        <service-call name="update#mantle.shipment.ShipmentItemSource"
                                      in-map="[shipmentItemSourceId:shipmentItemSource.shipmentItemSourceId,
                                          quantity:(shipmentItemSource.quantity + quantityIncrease),
                                          quantityNotHandled:(shipmentItemSource.quantityNotHandled + quantityIncrease)]"/>

                        <!-- also update ShipmentItem.quantity -->
                        <entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem">
                            <field-map field-name="shipmentId" from="shipmentItemSource.shipmentId"/>
                            <field-map field-name="productId" from="orderItem.productId"/></entity-find-one>
                        <service-call name="update#mantle.shipment.ShipmentItem"
                                      in-map="[shipmentId:shipmentItem.shipmentId, productId:shipmentItem.productId,
                                          quantity:(shipmentItem.quantity + quantityIncrease)]"/>
                    </then><else>
                        <!-- a little more fun, deduct as available from each item in the list until all handled -->
                        <set field="quantityReduceRemaining" from="sourceQuantityTotal - quantity"/>
                        <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                            <set field="quantityReduce" from="quantityReduceRemaining &gt; shipmentItemSource.quantityNotHandled ?
                                    shipmentItemSource.quantityNotHandled : quantityReduceRemaining"/>
                            <if condition="quantityReduce == 0"><break/></if>
                            <service-call name="update#mantle.shipment.ShipmentItemSource"
                                    in-map="[shipmentItemSourceId:shipmentItemSource.shipmentItemSourceId,
                                        quantity:(shipmentItemSource.quantity - quantityReduce),
                                        quantityNotHandled:(shipmentItemSource.quantityNotHandled - quantityReduce)]"/>
                            <set field="quantityReduceRemaining" from="quantityReduceRemaining - quantityReduce"/>

                            <!-- also update ShipmentItem.quantity -->
                            <entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem">
                                <field-map field-name="shipmentId" from="shipmentItemSource.shipmentId"/>
                                <field-map field-name="productId" from="orderItem.productId"/></entity-find-one>
                            <set field="newItemQuantity" from="shipmentItem.quantity &gt; quantityReduce ?
                                    shipmentItem.quantity - quantityReduce : 0"/>
                            <service-call name="update#mantle.shipment.ShipmentItem"
                                    in-map="[shipmentId:shipmentItem.shipmentId, productId:shipmentItem.productId,
                                        quantity:newItemQuantity]"/>
                        </iterate>
                    </else></if>
                </if>
            </if>

            <service-call name="update#mantle.order.OrderItem" in-map="context"/>
        </actions>
    </service>
    <service verb="delete" noun="OrderItem">
        <in-parameters><auto-parameters include="pk" required="true"/></in-parameters>
        <actions>
            <service-call name="mantle.product.AssetServices.remove#OrderItemReservations" in-map="context"/>
            <service-call name="delete#mantle.order.OrderItem" in-map="context"/>
        </actions>
    </service>

    <!-- OrderProductQuantity aka "Cart" Services -->
    <service verb="add" noun="OrderProductQuantity" authenticate="anonymous-all" transaction="cache">
        <description>A service for an add-to-cart sort of operation, including:
            1. create an Order if no orderId is passed in
            2. determine the price to charge for the Product (and update based on quantity as needed)
            3. find a OrderItem matching the productId, and if found update quantity
            4. if no existing OrderItem is found create a new OrderItem
        </description>
        <in-parameters>
            <parameter name="orderId"/>
            <parameter name="orderPartSeqId"/>
            <parameter name="customerPartyId"/>
            <parameter name="currencyUomId"/>
            <parameter name="productStoreId"/>

            <parameter name="productId" required="true"/>
            <parameter name="description"/>
            <parameter name="quantity" type="BigDecimal" default="1"/>
            <parameter name="itemTypeEnumId" default-value="ItemProduct"/>
            <parameter name="unitAmount" type="BigDecimal"/>
            <parameter name="requiredByDate" type="Timestamp"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
        </out-parameters>
        <actions>
            <!-- lookup orderPartSeqId if not passed in -->
            <if condition="!orderPartSeqId &amp;&amp; orderId">
                <entity-find entity-name="mantle.order.OrderPart" list="orderPartList">
                    <econdition field-name="orderId"/><order-by field-name="orderPartSeqId"/></entity-find>
                <set field="orderPartSeqId" from="orderPartList?.first?.orderPartSeqId"/>
            </if>

            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

            <set field="productStoreId" from="productStoreId ?: orderHeader?.productStoreId"/>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
            <set field="vendorPartyId" from="orderPart?.vendorPartyId ?: productStore?.organizationPartyId"/>
            <set field="currencyUomId" from="currencyUomId ?: productStore?.defaultCurrencyUomId"/>

            <!-- have customerPartyId default to current user's partyId -->
            <set field="customerPartyId" from="(customerPartyId ?: orderPart?.customerPartyId) ?: ec.user.userAccount?.partyId"/>

            <if condition="!orderId">
                <if condition="customerPartyId">
                    <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="existingOrderList">
                        <econdition field-name="statusId" value="OrderOpen"/>
                        <econdition field-name="customerPartyId"/>
                        <econdition field-name="productStoreId" ignore-if-empty="true"/>
                        <select-field field-name="orderId"/><select-field field-name="orderPartSeqId"/>
                        <order-by field-name="-entryDate"/><!-- get most recent open order -->
                    </entity-find>
                    <if condition="existingOrderList">
                        <set field="orderId" from="existingOrderList[0].orderId"/>
                        <set field="orderPartSeqId" from="existingOrderList[0].orderPartSeqId"/>
                    </if>
                </if>
                <!-- no existing open (cart) order found? create one -->
                <if condition="!orderId">
                    <service-call name="mantle.order.OrderServices.create#Order" out-map="createOrderOut"
                            in-map="[currencyUomId:currencyUomId, productStoreId:productStoreId,
                                vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/>
                    <set field="orderId" from="createOrderOut.orderId"/>
                    <set field="orderPartSeqId" from="createOrderOut.orderPartSeqId"/>
                </if>
            </if>

            <!-- find an OrderItem for the productId and increment quantity if found, otherwise create OrderItem with quantity -->
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition-object field="[orderId:orderId, orderPartSeqId:orderPartSeqId, productId:productId,
                        productConfigSavedId:null, forAssetId:null, selectedAmount:null]"/>
            </entity-find>

            <!-- calculate the price based on quantity, etc, -->
            <if condition="unitAmount == null"><then>
                <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                              in-map="[productId:productId, quantity:quantity, priceUomId:currencyUomId,
                         productStoreId:productStoreId, customerPartyId:customerPartyId, vendorPartyId:vendorPartyId]"/>

                <set field="unitAmount" from="priceMap.price"/>
                <set field="unitListPrice" from="priceMap.listPrice"/>
                <set field="isModifiedPrice" value="N"/>
            </then><else>
                <set field="isModifiedPrice" value="Y"/>
            </else></if>

            <if condition="orderItemList"><then>
                <set field="orderItem" from="orderItemList.first"/>
                <set field="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                <set field="orderPartSeqId" from="orderItem.orderPartSeqId" set-if-empty="false"/>
                <set field="unitAmount" from="orderItem.unitAmount" set-if-empty="false"/>
                <set field="quantity" from="quantity + orderItem.quantity"/>
                <!-- if requiredByDate on orderItem is less than that passed in, make sure to use it instead of the new later one -->
                <if condition="orderItem.requiredByDate &amp;&amp; requiredByDate &amp;&amp; orderItem.requiredByDate &lt; requiredByDate">
                    <set field="requiredByDate" from="orderItem.requiredByDate"/></if>
                <service-call name="mantle.order.OrderServices.update#OrderItem" in-map="context"/>
            </then><else>
                <service-call name="mantle.order.OrderServices.create#OrderItem" in-map="context" out-map="createOrderItemOut"/>
                <set field="orderItemSeqId" from="createOrderItemOut.orderItemSeqId"/>
            </else></if>
        </actions>
    </service>
    <service verb="update" noun="OrderProductQuantity" authenticate="anonymous-all" transaction="cache">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="quantity" type="BigDecimal" required="true"/>
        </in-parameters>
        <actions>
            <if condition="quantity &lt;= 0">
                <service-call name="mantle.order.OrderServices.delete#OrderItem"
                        in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId]"/>
                <return/>
            </if>

            <service-call name="mantle.order.OrderServices.update#OrderItem"
                    in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId, quantity:quantity]"/>
        </actions>
    </service>
    <service verb="merge" noun="OrderItems">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="fromOrderId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId" from="fromOrderId"/>
            </entity-find>
            <iterate list="orderItemList" entry="orderItem">
                <service-call name="mantle.order.OrderServices.add#OrderProductQuantity"
                        in-map="[orderId:orderId, productId:orderItem.productId, quantity:orderItem.quantity]"/>
            </iterate>
        </actions>
    </service>

    <service verb="set" noun="OrderBillingShippingInfo">
        <!-- TODO: make this service less simple: support multiple payments, and need to update Payment.amount when cart updates -->
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId"/>
            <parameter name="paymentId"/>

            <parameter name="paymentInstrumentEnumId"/>
            <parameter name="paymentMethodId"/>
            <parameter name="finAccountId"/>
            <parameter name="shippingFacilityId"/>
            <parameter name="shippingPostalContactMechId"/>
            <parameter name="shippingTelecomContactMechId"/>

            <parameter name="carrierAndShipmentMethod"/>
            <parameter name="carrierPartyId"/>
            <parameter name="shipmentMethodEnumId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <if condition="orderPartSeqId"><then>
                <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            </then><else>
                <!-- just get the first part -->
                <entity-find entity-name="mantle.order.OrderPart" list="orderPartList">
                    <econdition field-name="orderId"/>
                    <order-by field-name="orderPartSeqId"/>
                </entity-find>
                <set field="orderPart" from="orderPartList.first"/>
                <set field="orderPartSeqId" from="orderPart.orderPartSeqId"/>
            </else></if>

            <if condition="shippingPostalContactMechId &amp;&amp; !shippingTelecomContactMechId">
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress">
                    <field-map field-name="contactMechId" from="shippingPostalContactMechId"/>
                </entity-find-one>
                <set field="shippingTelecomContactMechId" from="postalAddress.telecomContactMechId"/>
            </if>

            <if condition="shippingFacilityId"><set field="orderPart.facilityId" from="shippingFacilityId"/></if>
            <if condition="shippingPostalContactMechId"><set field="orderPart.postalContactMechId" from="shippingPostalContactMechId"/></if>
            <if condition="shippingTelecomContactMechId"><set field="orderPart.telecomContactMechId" from="shippingTelecomContactMechId"/></if>
            <if condition="carrierAndShipmentMethod">
                <set field="carrierPartyId" from="carrierAndShipmentMethod.split(':')[0]"/>
                <set field="shipmentMethodEnumId" from="carrierAndShipmentMethod.split(':')[1]"/>
            </if>
            <if condition="carrierPartyId"><set field="orderPart.carrierPartyId" from="carrierPartyId"/></if>
            <if condition="shipmentMethodEnumId"><set field="orderPart.shipmentMethodEnumId" from="shipmentMethodEnumId"/></if>
            <entity-update value-field="orderPart"/>

            <!-- Find the shipment IDs for this order part -->
            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                <econdition field-name="orderId"/></entity-find>
            <if condition="shipmentItemSourceList">
                <entity-find entity-name="mantle.order.OrderItem" list="partOrderItemList">
                    <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/></entity-find>
                <script>
                    List orderItemSeqIdList = partOrderItemList.orderItemSeqId
                    partShipmentIdSet = new TreeSet()
                    for (EntityValue sis in shipmentItemSourceList) if (sis.orderItemSeqId in orderItemSeqIdList) {
                        partShipmentIdSet.add(sis.shipmentId)
                    }
                </script>

                <!-- Update shipment method and shipping address on the last route segment(s) of this order part -->
                <iterate list="partShipmentIdSet" entry="shipmentId">
                    <entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="shipmentRouteSegments">
                        <econdition field-name="shipmentId"/><order-by field-name="-shipmentRouteSegmentSeqId"/></entity-find>
                    <if condition="shipmentRouteSegments">
                        <set field="shipmentRouteSegment" from="shipmentRouteSegments[0]"/>
                        <set field="shipmentRouteSegment.shipmentMethodEnumId" from="shipmentMethodEnumId"/>
                        <set field="shipmentRouteSegment.destPostalContactMechId" from="shippingPostalContactMechId"/>
                        <set field="shipmentRouteSegment.destTelecomContactMechId" from="shippingTelecomContactMechId"/>
                        <entity-update value-field="shipmentRouteSegment"/>
                    </if>
                </iterate>
            </if>

            <!-- TODO: find a better place/way to call these, maybe even turn this service into some sort of workflow -->
            <if condition="orderHeader.productStoreId">
                <!-- Calculate Shipping, do this before the Payment is created/updated -->
                <service-call name="mantle.shipment.CarrierServices.calculate#OrderPartShipping"
                        in-map="[orderId:orderId, orderPartSeqId:orderPart.orderPartSeqId]"/>
                <!-- Calculate Tax, after Shipping as it might be taxed, before Payment so tax is included in total -->
                <service-call name="mantle.other.TaxServices.calculate#OrderSalesTax"
                        in-map="[orderId:orderId, orderPartSeqId:orderPart.orderPartSeqId]"/>
            </if>

            <if condition="paymentId"><then>
                <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            </then><else>
                <!-- try the first payment for the part -->
                <entity-find entity-name="mantle.account.payment.Payment" list="paymentList">
                    <econdition field-name="orderId"/>
                    <econdition field-name="orderPartSeqId"/>
                    <order-by field-name="paymentId"/>
                </entity-find>
                <set field="payment" from="paymentList.first"/>
            </else></if>

            <if condition="!paymentInstrumentEnumId &amp;&amp; finAccountId">
                <set field="paymentInstrumentEnumId" value="PiFinancialAccount"/></if>
            <if condition="!paymentInstrumentEnumId &amp;&amp; paymentMethodId">
                <entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/>
                <!-- may be more than one, just pick first by description for consistency -->
                <entity-find entity-name="moqui.basic.Enumeration" list="instrEnumList">
                    <econdition field-name="relatedEnumId" from="paymentMethod.paymentMethodTypeEnumId"/>
                    <order-by field-name="description"/>
                </entity-find>
                <set field="paymentInstrumentEnumId" from="instrEnumList ? instrEnumList[0].enumId : null"/>
            </if>
            <if condition="payment"><then>
                <!-- update existing payment -->
                <set field="payment.paymentInstrumentEnumId" from="paymentInstrumentEnumId"/>
                <set field="payment.paymentMethodId" from="paymentMethodId"/>
                <set field="payment.finAccountId" from="finAccountId"/>
                <set field="payment.amount" from="orderPart.partTotal"/>
                <entity-update value-field="payment"/>
                <set field="paymentId" from="payment.paymentId"/>
            </then><else-if condition="paymentMethodId || paymentInstrumentEnumId">
                <!-- create a new Payment for the Order -->
                <service-call name="mantle.order.OrderServices.add#OrderPartPayment" out-map="context"
                        in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId, paymentInstrumentEnumId:paymentInstrumentEnumId,
                            paymentMethodId:paymentMethodId, finAccountId:finAccountId]"/>
            </else-if></if>
        </actions>
    </service>
    <service verb="add" noun="OrderPartPayment">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.payment.Payment" include="nonpk"><exclude field-name="amountUomId"/>
                <exclude field-name="fromPartyId"/><exclude field-name="toPartyId"/><exclude field-name="acctgTransResultEnumId"/>
                <exclude field-name="reconcileStatusId"/><exclude field-name="paymentMethodFileId"/></auto-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="paymentTypeEnumId" default-value="PtInvoicePayment"/>
            <parameter name="statusId" default-value="PmntPromised"/>
            <parameter name="amount" type="BigDecimal"><description>Defaults to OrderPart.partTotal</description></parameter>
            <parameter name="visitId" default="ec.user.visitId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <service-call name="create#mantle.account.payment.Payment" out-map="context"
                    in-map="context + [amount:(amount ?: orderPart.partTotal), amountUomId:orderHeader.currencyUomId,
                        fromPartyId:orderPart.customerPartyId, toPartyId:orderPart.vendorPartyId]"/>
        </actions>
    </service>

    <!-- Order Status Change Services -->
    <service verb="change" noun="OrderStatusInterface" type="interface">
        <in-parameters><parameter name="orderId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
    </service>
    <service verb="update" noun="OrderStatus">
        <in-parameters>
            <parameter name="orderId" required="true"/><parameter name="statusId" required="true"/>
            <parameter name="placedDate" type="Timestamp"/>
        </in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <service-call name="update#mantle.order.OrderPart" out-map="context"
                        in-map="[orderId:orderId, orderPartSeqId:orderPart.orderPartSeqId, statusId:statusId]"/>
            </iterate>

            <set field="updateMap" from="[orderId:orderId, statusId:statusId]"/>
            <if condition="placedDate != null"><script>updateMap.put('placedDate', placedDate)</script></if>
            <service-call name="update#mantle.order.OrderHeader" out-map="context" in-map="updateMap"/>
        </actions>
    </service>
    <service verb="propose" noun="Order">
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions><service-call name="mantle.order.OrderServices.update#OrderStatus" out-map="context" in-map="context + [statusId:'OrderProposed']"/></actions>
    </service>
    <service verb="place" noun="Order">
        <!-- this used to use transaction="cache" but with record locks (for asset reservation) it is unreliable, gets old data from the TX cache -->
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions><service-call name="mantle.order.OrderServices.update#OrderStatus" out-map="context" in-map="context + [statusId:'OrderPlaced', placedDate:ec.user.nowTimestamp]"/></actions>
    </service>
    <service verb="approve" noun="Order">
        <description>For manual order approval, requires ORDER_APPROVE permission.</description>
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions>
            <if condition="!ec.user.hasPermission('ORDER_APPROVE')">
                <return error="true" message="Order Approve permission required"/></if>
            <service-call name="mantle.order.OrderServices.update#OrderStatus" out-map="context" in-map="context + [statusId:'OrderApproved']"/>
        </actions>
    </service>

    <service verb="checkComplete" noun="OrderPart">
        <description>Checks to see if all items in the order part have been shipped and/or digitally (including
            subscription) fulfilled, and if so complete the order part. Also checks for receipt of purchase order items.</description>
        <in-parameters><parameter name="orderId" required="true"/><parameter name="orderPartSeqId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <entity-find entity-name="mantle.product.subscription.Subscription" list="existingSubscriptionList">
                <econdition field-name="orderId"/></entity-find>
            <entity-find entity-name="mantle.product.issuance.AssetIssuance" list="existingAssetIssuanceList">
                <econdition field-name="orderId"/></entity-find>
            <entity-find entity-name="mantle.product.receipt.AssetReceipt" list="existingAssetReceiptList">
                <econdition field-name="orderId"/></entity-find>

            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/><econdition field-name="orderPartSeqId"/>
                <order-by field-name="orderItemSeqId"/>
            </entity-find>

            <!-- set to true, if any found not fulfilled will set to false -->
            <set field="orderPartComplete" from="true"/>
            <iterate list="orderItemList" entry="orderItem"><if condition="orderItem.productId">
                <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                    <field-map field-name="productId" from="orderItem.productId"/></entity-find-one>

                <if condition="product.productTypeEnumId in ['PtDigital', 'PtDigitalAsset']">
                    <entity-find entity-name="mantle.product.subscription.ProductSubscriptionResource"
                            list="productSubscriptionResourceList" cache="true">
                        <econdition field-name="productId" from="product.productId"/></entity-find>
                    <iterate list="productSubscriptionResourceList" entry="productSubscriptionResource">
                        <filter-map-list list="existingSubscriptionList" to-list="currentSubscriptionList">
                            <field-map field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                            <field-map field-name="subscriptionResourceId" from="productSubscriptionResource.subscriptionResourceId"/>
                        </filter-map-list>
                        <if condition="!currentSubscriptionList">
                            <set field="orderPartComplete" from="false"/>
                            <break/>
                        </if>
                    </iterate>
                </if>
                <if condition="product.productTypeEnumId in ['PtAsset', 'PtDigitalAsset']">
                    <filter-map-list list="existingAssetIssuanceList" to-list="currentAssetIssuanceList">
                        <field-map field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/></filter-map-list>
                    <filter-map-list list="existingAssetReceiptList" to-list="currentAssetReceiptList">
                        <field-map field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/></filter-map-list>
                    <!-- add up quantity in currentAssetIssuanceList, compare to orderItem.quantity -->
                    <set field="currentQuantityTotal" from="0" type="BigDecimal"/>
                    <iterate list="currentAssetIssuanceList" entry="currentAssetIssuance">
                        <set field="currentQuantityTotal" from="currentQuantityTotal + currentAssetIssuance.quantity"/>
                    </iterate>
                    <iterate list="currentAssetReceiptList" entry="currentAssetReceipt">
                        <set field="currentQuantityTotal" from="currentQuantityTotal + currentAssetReceipt.quantityAccepted"/>
                    </iterate>
                    <if condition="currentQuantityTotal &lt; orderItem.quantity">
                        <set field="orderPartComplete" from="false"/>
                        <break/>
                    </if>
                </if>
            </if></iterate>

            <if condition="orderPartComplete">
                <service-call name="mantle.order.OrderServices.complete#OrderPart" out-map="context" in-map="context"/>
            </if>
        </actions>
    </service>

    <service verb="complete" noun="OrderPart">
        <in-parameters><parameter name="orderId" required="true"/><parameter name="orderPartSeqId" required="true"/></in-parameters>
        <out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters>
        <actions>
            <service-call name="update#mantle.order.OrderPart" out-map="context"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId, statusId:'OrderCompleted']"/>
            <set field="allComplete" from="true"/>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <if condition="orderPart.statusId != 'OrderCompleted'"><set field="allComplete" from="false"/></if>
            </iterate>
            <if condition="allComplete">
                <service-call name="update#mantle.order.OrderHeader" out-map="context"
                        in-map="[orderId:orderId, statusId:'OrderCompleted']"/>
            </if>
        </actions>
    </service>
    <service verb="complete" noun="Order">
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions><service-call name="mantle.order.OrderServices.update#OrderStatus" out-map="context" in-map="context + [statusId:'OrderCompleted']"/></actions>
    </service>

    <service verb="cancel" noun="Order">
        <description>Call when customer cancels the order.</description>
        <implements service="mantle.order.OrderServices.change#OrderStatusInterface"/>
        <actions>
            <!-- does partial cancel if already partially shipped, and then set what is left as completed; otherwise does a full cancel -->

            <!-- cancel item quantities not issued, update or remove ShipmentItemSource records, remove asset reservations if any -->
            <set field="hasIssuedQuantity" from="false"/>
            <entity-find entity-name="mantle.product.issuance.AssetIssuance" list="fullAssetIssuanceList">
                <econdition field-name="orderId"/></entity-find>
            <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="fullShipmentItemSourceList">
                <econdition field-name="orderId"/></entity-find>

            <entity-find entity-name="mantle.order.OrderItem" list="orderItemList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderItemList" entry="orderItem">
                <set field="itemQuantityIssued" from="0"/>
                <filter-map-list list="fullAssetIssuanceList" to-list="itemAssetIssuanceList">
                    <field-map field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/></filter-map-list>
                <iterate list="itemAssetIssuanceList" entry="itemAssetIssuance">
                    <set field="itemQuantityIssued" from="itemQuantityIssued + itemAssetIssuance.quantity"/></iterate>

                <if condition="itemQuantityIssued &gt; 0"><set field="hasIssuedQuantity" from="true"/></if>

                <!-- update the OrderItem -->
                <set field="quantityCancelled" from="orderItem.quantity - itemQuantityIssued"/>
                <service-call name="update#mantle.order.OrderItem" in-map="[orderId:orderId,
                        orderItemSeqId:orderItem.orderItemSeqId, quantityCancelled:quantityCancelled,
                        quantity:itemQuantityIssued]"/>

                <!-- update or remove ShipmentItemSource records -->
                <filter-map-list list="fullShipmentItemSourceList" to-list="itemShipmentItemSourceList">
                    <field-map field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/></filter-map-list>
                <set field="shipmentItemQuantityReducedMap" from="[:]"/>
                <iterate list="itemShipmentItemSourceList" entry="itemShipmentItemSource">
                    <script>addToBigDecimalInMap(itemShipmentItemSource.shipmentId, itemShipmentItemSource.quantityNotHandled, shipmentItemQuantityReducedMap)</script>
                    <if condition="itemShipmentItemSource.quantity == itemShipmentItemSource.quantityNotHandled">
                        <!-- none handled yet, just remove -->
                        <entity-delete value-field="itemShipmentItemSource"/>
                        <else>
                            <!-- some handled, reduce quantity by quantityNotHandled -->
                            <service-call name="update#mantle.shipment.ShipmentItemSource"
                                    in-map="[shipmentItemSourceId:itemShipmentItemSource.shipmentItemSourceId,
                                        quantity:(itemShipmentItemSource.quantity - itemShipmentItemSource.quantityNotHandled),
                                        quantityNotHandled:0]"/>
                        </else>
                    </if>
                </iterate>
                <iterate list="shipmentItemQuantityReducedMap" entry="shipmentItemQuantityReduced" key="shipmentId">
                    <entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem">
                        <field-map field-name="shipmentId"/><field-map field-name="productId" from="orderItem.productId"/></entity-find-one>
                    <if condition="shipmentItem">
                        <set field="newSiQuantity" from="shipmentItem.quantity &gt; shipmentItemQuantityReduced ?
                                shipmentItem.quantity - shipmentItemQuantityReduced : 0"/>
                        <service-call name="update#mantle.shipment.ShipmentItem"
                                in-map="[shipmentId:shipmentId, productId:orderItem.productId, quantity:newSiQuantity]"/>
                    </if>
                </iterate>

                <!-- remove OrderItem Reservations -->
                <service-call name="mantle.product.AssetServices.remove#OrderItemReservations"
                        in-map="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId]"/>
            </iterate>

            <!-- cancel or complete order parts -->
            <set field="targetStatusId" from="hasIssuedQuantity ? 'OrderCompleted' : 'OrderCancelled'"/>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList"><econdition field-name="orderId"/></entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <service-call name="update#mantle.order.OrderPart" out-map="context"
                        in-map="[orderId:orderId, orderPartSeqId:orderPart.orderPartSeqId, statusId:targetStatusId]"/>
            </iterate>

            <!-- cancel or complete order header -->
            <service-call name="update#mantle.order.OrderHeader" out-map="context"
                    in-map="[orderId:orderId, statusId:targetStatusId]"/>
        </actions>
    </service>

    <service verb="clone" noun="Order">
        <description>Clone an order. Always copies the OrderHeader, OrderPart, and OrderItem records.</description>
        <in-parameters>
            <parameter name="baseOrderId" required="true" default="orderId"/>
            <parameter name="orderId"/>
            <auto-parameters entity-name="mantle.order.OrderHeader" include="nonpk"/>
            <auto-parameters entity-name="mantle.order.OrderPart" include="nonpk"/>
            <parameter name="requiredByDate" type="Timestamp"/>
            <parameter name="statusId" default-value="OrderOpen"/>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="visitId" default="ec.user.visitId"/>
            <parameter name="orderRevision" type="Integer" default="1"/>

            <parameter name="clearDates" type="Boolean" default="true"/>
            <parameter name="copyContactMech" type="Boolean" default="true"/>
            <parameter name="copyContent" type="Boolean" default="true"/>
            <parameter name="copyNote" type="Boolean" default="true"/>
            <parameter name="copyPartParty" type="Boolean" default="true"/>
            <parameter name="copyTerm" type="Boolean" default="true"/>
            <parameter name="copyItemWorkEffort" type="Boolean" default="true"/>
            <parameter name="copyPayment" type="Boolean" default="true"/>
            <parameter name="paymentStatusId" default-value="PmntPromised"/>
        </in-parameters>
        <out-parameters><parameter name="orderId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="order">
                <field-map field-name="orderId" from="baseOrderId"/></entity-find-one>

            <entity-set value-field="order" include="nonpk"/>
            <if condition="clearDates">
                <!-- set the fields even if null, don't do this for other fields -->
                <set field="order.entryDate" from="entryDate"/>
                <set field="order.placedDate" from="placedDate"/>
                <set field="order.lastOrderedDate" from="lastOrderedDate"/>
            </if>

            <set field="order.orderId" from="null"/>
            <entity-sequenced-id-primary value-field="order"/>
            <entity-create value-field="order"/>
            <set field="orderId" from="order.orderId"/>

            <entity-find entity-name="mantle.order.OrderPart" list="valueList">
                <econdition field-name="orderId" from="baseOrderId"/></entity-find>
            <iterate list="valueList" entry="value">
                <set field="value.orderId" from="orderId"/>
                <entity-set value-field="value" include="nonpk"/>
                <if condition="clearDates">
                    <!-- set the fields even if null, don't do this for other fields -->
                    <set field="value.shipAfterDate" from="shipAfterDate"/>
                    <set field="value.shipBeforeDate" from="shipBeforeDate"/>
                    <set field="value.estimatedShipDate" from="estimatedShipDate"/>
                    <set field="value.estimatedDeliveryDate" from="estimatedDeliveryDate"/>
                    <set field="value.validFromDate" from="validFromDate"/>
                    <set field="value.validThruDate" from="validThruDate"/>
                    <set field="value.autoCancelDate" from="autoCancelDate"/>
                    <set field="value.dontCancelSetDate" from="dontCancelSetDate"/>
                </if>
                <entity-create value-field="value"/>
            </iterate>

            <entity-find entity-name="mantle.order.OrderItem" list="valueList">
                <econdition field-name="orderId" from="baseOrderId"/></entity-find>
            <iterate list="valueList" entry="value">
                <set field="value.orderId" from="orderId"/>
                <if condition="clearDates"><set field="value.requiredByDate" from="requiredByDate"/></if>
                <entity-create value-field="value"/>
            </iterate>

            <if condition="copyContactMech">
                <entity-find entity-name="mantle.order.OrderPartContactMech" list="valueList">
                    <econdition field-name="orderId" from="baseOrderId"/></entity-find>
                <iterate list="valueList" entry="value"><set field="value.orderId" from="orderId"/><entity-create value-field="value"/></iterate>
            </if>
            <if condition="copyContent">
                <entity-find entity-name="mantle.order.OrderContent" list="valueList">
                    <econdition field-name="orderId" from="baseOrderId"/></entity-find>
                <iterate list="valueList" entry="value">
                    <set field="value.orderId" from="orderId"/>
                    <set field="value.orderContentId" from="null"/>
                    <entity-sequenced-id-primary value-field="value"/>
                    <entity-create value-field="value"/>
                </iterate>
            </if>
            <if condition="copyNote">
                <entity-find entity-name="mantle.order.OrderNote" list="valueList">
                    <econdition field-name="orderId" from="baseOrderId"/></entity-find>
                <iterate list="valueList" entry="value"><set field="value.orderId" from="orderId"/><entity-create value-field="value"/></iterate>
            </if>
            <if condition="copyPartParty">
                <entity-find entity-name="mantle.order.OrderPartParty" list="valueList">
                    <econdition field-name="orderId" from="baseOrderId"/></entity-find>
                <iterate list="valueList" entry="value"><set field="value.orderId" from="orderId"/><entity-create value-field="value"/></iterate>
            </if>
            <if condition="copyTerm">
                <entity-find entity-name="mantle.order.OrderPartTerm" list="valueList">
                    <econdition field-name="orderId" from="baseOrderId"/></entity-find>
                <iterate list="valueList" entry="value"><set field="value.orderId" from="orderId"/><entity-create value-field="value"/></iterate>
            </if>
            <if condition="copyItemWorkEffort">
                <entity-find entity-name="mantle.order.OrderItemWorkEffort" list="valueList">
                    <econdition field-name="orderId" from="baseOrderId"/></entity-find>
                <iterate list="valueList" entry="value"><set field="value.orderId" from="orderId"/><entity-create value-field="value"/></iterate>
            </if>

            <if condition="copyPayment">
                <entity-find entity-name="mantle.account.payment.Payment" list="valueList">
                    <econdition field-name="orderId" from="baseOrderId"/></entity-find>
                <iterate list="valueList" entry="value">
                    <set field="value.orderId" from="orderId"/>
                    <set field="value.statusId" from="paymentStatusId"/>
                    <set field="value.paymentAuthCode" from="null"/><set field="value.paymentRefNum" from="null"/>
                    <set field="value.presentFlag" from="null"/><set field="value.swipedFlag" from="null"/>
                    <set field="value.processAttempt" from="null"/><set field="value.needsNsfRetry" from="null"/>
                    <set field="value.visitId" from="visitId"/>
                    <if condition="clearDates"><set field="value.effectiveDate" from="null"/></if>
                    <set field="value.paymentId" from="null"/>
                    <entity-sequenced-id-primary value-field="value"/>
                    <entity-create value-field="value"/>
                </iterate>
            </if>
        </actions>
    </service>

    <!-- ========== OrderContent Services ========== -->

    <service verb="create" noun="OrderContent">
        <in-parameters>
            <auto-parameters entity-name="mantle.order.OrderContent" include="nonpk">
                <exclude field-name="contentLocation"/></auto-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem"/>
        </in-parameters>
        <out-parameters><parameter name="orderContentId"/></out-parameters>
        <actions>
            <service-call name="create#mantle.order.OrderContent" in-map="context" out-map="context"/>
            <if condition="contentFile != null &amp;&amp; contentFile.size &gt; 0">
                <service-call name="mantle.order.OrderServices.save#OrderContentFile" in-map="context"/></if>
        </actions>
    </service>
    <service verb="update" noun="OrderContent">
        <in-parameters>
            <parameter name="orderContentId" required="true"/>
            <auto-parameters entity-name="mantle.order.OrderContent" include="nonpk">
                <exclude field-name="contentLocation"/></auto-parameters>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem"/>
        </in-parameters>
        <actions>
            <if condition="contentFile != null &amp;&amp; contentFile.size &gt; 0">
                <entity-find-one entity-name="mantle.order.OrderContent" value-field="orderContent"/>
                <service-call name="mantle.order.OrderServices.save#OrderContentFile" out-map="context"
                        in-map="context + [orderId:orderContent.orderId, saveContentLocation:false]"/>
            </if>
            <service-call name="update#mantle.order.OrderContent" in-map="context"/>
        </actions>
    </service>
    <service verb="save" noun="OrderContentFile">
        <in-parameters>
            <parameter name="orderContentId" required="true"/>
            <parameter name="orderId" required="true"/>
            <parameter name="contentFile" type="org.apache.commons.fileupload.FileItem" required="true"/>
            <parameter name="saveContentLocation" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters><parameter name="contentLocation"/></out-parameters>
        <actions>
            <set field="filename" from="contentFile.getName()"/>
            <set field="contentRoot" from="ec.user.getPreference('mantle.content.root') ?: 'dbresource://mantle/content'"/>
            <set field="contentLocation" value="${contentRoot}/order/${orderId}/content_${orderContentId}/${filename}"/>

            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>
            <script>
                fileStream = contentFile.getInputStream()
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script>

            <if condition="saveContentLocation"><service-call name="update#mantle.order.OrderContent"
                    in-map="[orderContentId:orderContentId, contentLocation:contentLocation]"/></if>
        </actions>
    </service>

    <!-- ========== Order Notification Services ========== -->

    <service verb="send" noun="OrderStoreEmail" authenticate="anonymous-view">
        <description>Called by SECA rule in OrderReturn.secas.xml on tx-commit so always run async from triggering thread</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="emailTypeEnumId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <if condition="orderHeader == null"><return/></if>
            <set field="productStoreId" from="orderHeader.productStoreId"/>
            <if condition="!productStoreId"><return/></if>

            <entity-find entity-name="mantle.product.store.ProductStoreEmail" list="storeEmailList">
                <date-filter/><econdition field-name="productStoreId"/><econdition field-name="emailTypeEnumId"/></entity-find>
            <if condition="storeEmailList">
                <!-- simple bodyParameters, let the screen do data prep -->
                <set field="bodyParameters" from="[orderId:orderId]"/>

                <!-- assume one OrderPart or all order parts have same customerPartyId -->
                <set field="orderPartList" from="orderHeader.parts"/>
                <set field="customerPartyId" from="orderPartList[0].customerPartyId"/>
                <!-- get customer email address -->
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="emailInfo"
                        in-map="[partyId:customerPartyId, emailContactMechPurposeId:'EmailOrder', defaultToPrimaryPurpose:true]"/>
                <set field="toAddresses" from="emailInfo.emailAddress"/>

                <!-- send email for each configured -->
                <iterate list="storeEmailList" entry="storeEmail">
                    <if condition="!storeEmail.emailTemplateId"><continue/></if>
                    <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate"
                            in-map="[emailTemplateId:storeEmail.emailTemplateId, toAddresses:toAddresses, bodyParameters:bodyParameters]"/>
                </iterate>
            </if>
        </actions>
    </service>

    <!-- ========== Order-Request Services ========== -->

    <service verb="create" noun="PurchaseRequestOrder">
        <in-parameters>
            <parameter name="requestId" required="true"/>
            <parameter name="customerPartyId" required="true">
                <description>The customer for the PO. Should be an Internal Org.</description></parameter>
            <parameter name="paymentInstrumentEnumId" default-value="PiCompanyCheck"/>
            <parameter name="paymentMethodId"/>
            <parameter name="shipmentMethodEnumId" default-value="ShMthPickUp"/>
            <parameter name="placeAndApproveOrders" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.request.Request" value-field="request"/>
            <if condition="!request.facilityId">
                <return error="true" message="Request ${requestId} has no Facility set."/>
            </if>

            <entity-find entity-name="mantle.facility.FacilityContactMech" list="postalList" cache="true">
                <date-filter/><econdition field-name="facilityId" from="request.facilityId"/>
                <econdition field-name="contactMechPurposeId" operator="in" value="PostalShippingDest,PostalGeneral"/>
                <order-by field-name="-contactMechPurposeId,-fromDate"/><!-- prefer PostalShippingDest over PostalGeneral, get most recent -->
            </entity-find>
            <set field="shippingPostalContactMechId" from="postalList?.first?.contactMechId"/>

            <entity-find entity-name="mantle.facility.FacilityContactMech" list="phoneList" cache="true">
                <date-filter/><econdition field-name="facilityId" from="request.facilityId"/>
                <econdition field-name="contactMechPurposeId" operator="in" value="PhoneShippingDest,PhonePrimary"/>
                <order-by field-name="-contactMechPurposeId,-fromDate"/><!-- prefer PhoneShippingDest over PhonePrimary, get most recent -->
            </entity-find>
            <set field="shippingTelecomContactMechId" from="phoneList?.first?.contactMechId"/>

            <entity-find entity-name="mantle.request.RequestItem" list="allRequestItemList">
                <econdition field-name="requestId"/></entity-find>

            <!-- split request by supplierPartyId, create one PO for each -->
            <set field="requestItemListBySupplier" from="[:]"/>
            <iterate list="allRequestItemList" entry="requestItem">
                <if condition="!requestItem.supplierPartyId">
                    <return error="true" message="No Supplier set on item ${requestItem.requestItemSeqId} for Request ${requestId}"/></if>
                <script>addToListInMap(requestItem.supplierPartyId, requestItem, requestItemListBySupplier)</script>
            </iterate>

            <iterate list="requestItemListBySupplier" entry="requestItemList" key="supplierPartyId">
                <service-call name="mantle.order.OrderServices.create#Order" out-map="orderOut"
                        in-map="[vendorPartyId:supplierPartyId, customerPartyId:customerPartyId,
                            currencyUomId:(request.currencyUomId ?: 'USD'), facilityId:request.facilityId]"/>
                <set field="earliestRequiredByDate" from="null"/>
                <iterate list="requestItemList" entry="requestItem">
                    <service-call name="mantle.order.OrderServices.add#OrderProductQuantity"
                            in-map="[orderId:orderOut.orderId, orderPartSeqId:orderOut.orderPartSeqId,
                                productId:requestItem.productId, quantity:requestItem.quantity,
                                itemTypeEnumId:'ItemProduct', requiredByDate:requestItem.requiredByDate]" out-map="addOut"/>
                    <service-call name="create#mantle.request.RequestItemOrder"
                            in-map="[requestId:requestItem.requestId, requestItemSeqId:requestItem.requestItemSeqId,
                                orderId:orderOut.orderId, orderItemSeqId:addOut.orderItemSeqId, quantity:requestItem.quantity]"/>
                    <if condition="!earliestRequiredByDate || (requestItem.requiredByDate &amp;&amp; requestItem.requiredByDate &lt; earliestRequiredByDate)">
                        <set field="earliestRequiredByDate" from="requestItem.requiredByDate"/></if>
                </iterate>
                <if condition="earliestRequiredByDate">
                    <service-call name="update#mantle.order.OrderPart" in-map="[orderId:orderOut.orderId,
                            orderPartSeqId:orderOut.orderPartSeqId, shipBeforeDate:earliestRequiredByDate]"/>
                </if>
                <service-call name="mantle.order.OrderServices.set#OrderBillingShippingInfo"
                        in-map="[orderId:orderOut.orderId, orderPartSeqId:orderOut.orderPartSeqId,
                            paymentInstrumentEnumId:paymentInstrumentEnumId, paymentMethodId:paymentMethodId,
                            shippingPostalContactMechId:shippingPostalContactMechId,
                            shippingTelecomContactMechId:shippingTelecomContactMechId,
                            shipmentMethodEnumId:shipmentMethodEnumId]"/>
                <if condition="placeAndApproveOrders">
                    <service-call name="mantle.order.OrderServices.place#Order"
                            in-map="[orderId:orderOut.orderId, orderPartSeqId:orderOut.orderPartSeqId]"/>
                    <service-call name="mantle.order.OrderServices.approve#Order"
                            in-map="[orderId:orderOut.orderId, orderPartSeqId:orderOut.orderPartSeqId]"/>
                </if>
            </iterate>

            <!-- Order created for Purchase Request, set Request status to In Progress -->
            <service-call name="update#mantle.request.Request" in-map="[requestId:requestId, statusId:'ReqInProgress']"/>
        </actions>
    </service>
</services>
