<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<secas xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-eca-2.0.xsd">
    <!-- Authorize Payment when Order Placed -->
    <seca service="update#mantle.order.OrderHeader" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; statusId == 'OrderPlaced'</expression></condition>
        <actions><service-call name="mantle.account.PaymentServices.authorize#OrderPayments" in-map="context"/></actions>
    </seca>

    <!-- DEPRECATED: capture for each PaymentApplication instead of waiting until entire invoices is paid (see below)
    <!- - Capture Payment when Invoice Finalized (specifically payment received, ie Payment applied for incoming payments - ->
    <seca service="update#mantle.account.invoice.Invoice" when="post-service" run-on-error="false">
        <!- - when status goes to InvoicePmtRecvd Payments are applied to Invoice and ready to be captured - ->
        <condition><expression>statusChanged &amp;&amp; statusId == 'InvoicePmtRecvd'</expression></condition>
        <actions><service-call name="mantle.account.PaymentServices.capture#InvoicePayments" in-map="context"/></actions>
    </seca>
    -->
    <!-- Capture Payment when PaymentApplication created, ie when applied to an Invoice -->
    <seca service="create#mantle.account.payment.PaymentApplication" when="post-service" run-on-error="false">
        <actions><service-call name="mantle.account.PaymentServices.capture#AppliedPayment" in-map="context"/></actions>
    </seca>

    <!-- If cancelled (Cancelled, Void, Refunded) call void#Payment to un-apply if needed, etc -->
    <seca service="update#mantle.account.payment.Payment" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; (statusId in ['PmntCancelled', 'PmntVoid', 'PmntRefunded'])</expression></condition>
        <actions><service-call name="mantle.account.PaymentServices.void#Payment" in-map="context" ignore-error="true"/></actions>
    </seca>
    <!-- Payment Undeliver (PmntDelivered => PmntPromised) call void#Payment to un-apply if needed, etc -->
    <seca service="update#mantle.account.payment.Payment" when="post-service" run-on-error="false">
        <condition><expression>statusChanged &amp;&amp; oldStatusId == 'PmntDelivered' &amp;&amp; statusId == 'PmntPromised'</expression></condition>
        <actions><service-call name="mantle.account.PaymentServices.void#Payment" in-map="context" ignore-error="true"/></actions>
    </seca>
</secas>
